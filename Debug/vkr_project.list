
vkr_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007010  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080071a8  080071a8  000081a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007208  08007208  00009070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007208  08007208  00008208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007210  08007210  00009070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007210  08007210  00008210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007214  08007214  00008214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08007218  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b8  20000070  08007288  00009070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000528  08007288  00009528  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa95  00000000  00000000  000090a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000224d  00000000  00000000  00018b35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e90  00000000  00000000  0001ad88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b69  00000000  00000000  0001bc18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f74  00000000  00000000  0001c781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011643  00000000  00000000  000346f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a5b0  00000000  00000000  00045d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e02e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004270  00000000  00000000  000e032c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000e459c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007190 	.word	0x08007190

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	08007190 	.word	0x08007190

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_uldivmod>:
 8000b50:	b953      	cbnz	r3, 8000b68 <__aeabi_uldivmod+0x18>
 8000b52:	b94a      	cbnz	r2, 8000b68 <__aeabi_uldivmod+0x18>
 8000b54:	2900      	cmp	r1, #0
 8000b56:	bf08      	it	eq
 8000b58:	2800      	cmpeq	r0, #0
 8000b5a:	bf1c      	itt	ne
 8000b5c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b60:	f04f 30ff 	movne.w	r0, #4294967295
 8000b64:	f000 b988 	b.w	8000e78 <__aeabi_idiv0>
 8000b68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b70:	f000 f806 	bl	8000b80 <__udivmoddi4>
 8000b74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b7c:	b004      	add	sp, #16
 8000b7e:	4770      	bx	lr

08000b80 <__udivmoddi4>:
 8000b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b84:	9d08      	ldr	r5, [sp, #32]
 8000b86:	468e      	mov	lr, r1
 8000b88:	4604      	mov	r4, r0
 8000b8a:	4688      	mov	r8, r1
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d14a      	bne.n	8000c26 <__udivmoddi4+0xa6>
 8000b90:	428a      	cmp	r2, r1
 8000b92:	4617      	mov	r7, r2
 8000b94:	d962      	bls.n	8000c5c <__udivmoddi4+0xdc>
 8000b96:	fab2 f682 	clz	r6, r2
 8000b9a:	b14e      	cbz	r6, 8000bb0 <__udivmoddi4+0x30>
 8000b9c:	f1c6 0320 	rsb	r3, r6, #32
 8000ba0:	fa01 f806 	lsl.w	r8, r1, r6
 8000ba4:	fa20 f303 	lsr.w	r3, r0, r3
 8000ba8:	40b7      	lsls	r7, r6
 8000baa:	ea43 0808 	orr.w	r8, r3, r8
 8000bae:	40b4      	lsls	r4, r6
 8000bb0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bb4:	fa1f fc87 	uxth.w	ip, r7
 8000bb8:	fbb8 f1fe 	udiv	r1, r8, lr
 8000bbc:	0c23      	lsrs	r3, r4, #16
 8000bbe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000bc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bc6:	fb01 f20c 	mul.w	r2, r1, ip
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	d909      	bls.n	8000be2 <__udivmoddi4+0x62>
 8000bce:	18fb      	adds	r3, r7, r3
 8000bd0:	f101 30ff 	add.w	r0, r1, #4294967295
 8000bd4:	f080 80ea 	bcs.w	8000dac <__udivmoddi4+0x22c>
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	f240 80e7 	bls.w	8000dac <__udivmoddi4+0x22c>
 8000bde:	3902      	subs	r1, #2
 8000be0:	443b      	add	r3, r7
 8000be2:	1a9a      	subs	r2, r3, r2
 8000be4:	b2a3      	uxth	r3, r4
 8000be6:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bea:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bf2:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bf6:	459c      	cmp	ip, r3
 8000bf8:	d909      	bls.n	8000c0e <__udivmoddi4+0x8e>
 8000bfa:	18fb      	adds	r3, r7, r3
 8000bfc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c00:	f080 80d6 	bcs.w	8000db0 <__udivmoddi4+0x230>
 8000c04:	459c      	cmp	ip, r3
 8000c06:	f240 80d3 	bls.w	8000db0 <__udivmoddi4+0x230>
 8000c0a:	443b      	add	r3, r7
 8000c0c:	3802      	subs	r0, #2
 8000c0e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c12:	eba3 030c 	sub.w	r3, r3, ip
 8000c16:	2100      	movs	r1, #0
 8000c18:	b11d      	cbz	r5, 8000c22 <__udivmoddi4+0xa2>
 8000c1a:	40f3      	lsrs	r3, r6
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c26:	428b      	cmp	r3, r1
 8000c28:	d905      	bls.n	8000c36 <__udivmoddi4+0xb6>
 8000c2a:	b10d      	cbz	r5, 8000c30 <__udivmoddi4+0xb0>
 8000c2c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c30:	2100      	movs	r1, #0
 8000c32:	4608      	mov	r0, r1
 8000c34:	e7f5      	b.n	8000c22 <__udivmoddi4+0xa2>
 8000c36:	fab3 f183 	clz	r1, r3
 8000c3a:	2900      	cmp	r1, #0
 8000c3c:	d146      	bne.n	8000ccc <__udivmoddi4+0x14c>
 8000c3e:	4573      	cmp	r3, lr
 8000c40:	d302      	bcc.n	8000c48 <__udivmoddi4+0xc8>
 8000c42:	4282      	cmp	r2, r0
 8000c44:	f200 8105 	bhi.w	8000e52 <__udivmoddi4+0x2d2>
 8000c48:	1a84      	subs	r4, r0, r2
 8000c4a:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c4e:	2001      	movs	r0, #1
 8000c50:	4690      	mov	r8, r2
 8000c52:	2d00      	cmp	r5, #0
 8000c54:	d0e5      	beq.n	8000c22 <__udivmoddi4+0xa2>
 8000c56:	e9c5 4800 	strd	r4, r8, [r5]
 8000c5a:	e7e2      	b.n	8000c22 <__udivmoddi4+0xa2>
 8000c5c:	2a00      	cmp	r2, #0
 8000c5e:	f000 8090 	beq.w	8000d82 <__udivmoddi4+0x202>
 8000c62:	fab2 f682 	clz	r6, r2
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	f040 80a4 	bne.w	8000db4 <__udivmoddi4+0x234>
 8000c6c:	1a8a      	subs	r2, r1, r2
 8000c6e:	0c03      	lsrs	r3, r0, #16
 8000c70:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c74:	b280      	uxth	r0, r0
 8000c76:	b2bc      	uxth	r4, r7
 8000c78:	2101      	movs	r1, #1
 8000c7a:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c7e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c86:	fb04 f20c 	mul.w	r2, r4, ip
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	d907      	bls.n	8000c9e <__udivmoddi4+0x11e>
 8000c8e:	18fb      	adds	r3, r7, r3
 8000c90:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000c94:	d202      	bcs.n	8000c9c <__udivmoddi4+0x11c>
 8000c96:	429a      	cmp	r2, r3
 8000c98:	f200 80e0 	bhi.w	8000e5c <__udivmoddi4+0x2dc>
 8000c9c:	46c4      	mov	ip, r8
 8000c9e:	1a9b      	subs	r3, r3, r2
 8000ca0:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ca4:	fb0e 3312 	mls	r3, lr, r2, r3
 8000ca8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000cac:	fb02 f404 	mul.w	r4, r2, r4
 8000cb0:	429c      	cmp	r4, r3
 8000cb2:	d907      	bls.n	8000cc4 <__udivmoddi4+0x144>
 8000cb4:	18fb      	adds	r3, r7, r3
 8000cb6:	f102 30ff 	add.w	r0, r2, #4294967295
 8000cba:	d202      	bcs.n	8000cc2 <__udivmoddi4+0x142>
 8000cbc:	429c      	cmp	r4, r3
 8000cbe:	f200 80ca 	bhi.w	8000e56 <__udivmoddi4+0x2d6>
 8000cc2:	4602      	mov	r2, r0
 8000cc4:	1b1b      	subs	r3, r3, r4
 8000cc6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000cca:	e7a5      	b.n	8000c18 <__udivmoddi4+0x98>
 8000ccc:	f1c1 0620 	rsb	r6, r1, #32
 8000cd0:	408b      	lsls	r3, r1
 8000cd2:	fa22 f706 	lsr.w	r7, r2, r6
 8000cd6:	431f      	orrs	r7, r3
 8000cd8:	fa0e f401 	lsl.w	r4, lr, r1
 8000cdc:	fa20 f306 	lsr.w	r3, r0, r6
 8000ce0:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ce4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ce8:	4323      	orrs	r3, r4
 8000cea:	fa00 f801 	lsl.w	r8, r0, r1
 8000cee:	fa1f fc87 	uxth.w	ip, r7
 8000cf2:	fbbe f0f9 	udiv	r0, lr, r9
 8000cf6:	0c1c      	lsrs	r4, r3, #16
 8000cf8:	fb09 ee10 	mls	lr, r9, r0, lr
 8000cfc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d00:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d04:	45a6      	cmp	lr, r4
 8000d06:	fa02 f201 	lsl.w	r2, r2, r1
 8000d0a:	d909      	bls.n	8000d20 <__udivmoddi4+0x1a0>
 8000d0c:	193c      	adds	r4, r7, r4
 8000d0e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d12:	f080 809c 	bcs.w	8000e4e <__udivmoddi4+0x2ce>
 8000d16:	45a6      	cmp	lr, r4
 8000d18:	f240 8099 	bls.w	8000e4e <__udivmoddi4+0x2ce>
 8000d1c:	3802      	subs	r0, #2
 8000d1e:	443c      	add	r4, r7
 8000d20:	eba4 040e 	sub.w	r4, r4, lr
 8000d24:	fa1f fe83 	uxth.w	lr, r3
 8000d28:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d2c:	fb09 4413 	mls	r4, r9, r3, r4
 8000d30:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d34:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d38:	45a4      	cmp	ip, r4
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x1ce>
 8000d3c:	193c      	adds	r4, r7, r4
 8000d3e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d42:	f080 8082 	bcs.w	8000e4a <__udivmoddi4+0x2ca>
 8000d46:	45a4      	cmp	ip, r4
 8000d48:	d97f      	bls.n	8000e4a <__udivmoddi4+0x2ca>
 8000d4a:	3b02      	subs	r3, #2
 8000d4c:	443c      	add	r4, r7
 8000d4e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d52:	eba4 040c 	sub.w	r4, r4, ip
 8000d56:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d5a:	4564      	cmp	r4, ip
 8000d5c:	4673      	mov	r3, lr
 8000d5e:	46e1      	mov	r9, ip
 8000d60:	d362      	bcc.n	8000e28 <__udivmoddi4+0x2a8>
 8000d62:	d05f      	beq.n	8000e24 <__udivmoddi4+0x2a4>
 8000d64:	b15d      	cbz	r5, 8000d7e <__udivmoddi4+0x1fe>
 8000d66:	ebb8 0203 	subs.w	r2, r8, r3
 8000d6a:	eb64 0409 	sbc.w	r4, r4, r9
 8000d6e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d72:	fa22 f301 	lsr.w	r3, r2, r1
 8000d76:	431e      	orrs	r6, r3
 8000d78:	40cc      	lsrs	r4, r1
 8000d7a:	e9c5 6400 	strd	r6, r4, [r5]
 8000d7e:	2100      	movs	r1, #0
 8000d80:	e74f      	b.n	8000c22 <__udivmoddi4+0xa2>
 8000d82:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d86:	0c01      	lsrs	r1, r0, #16
 8000d88:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d8c:	b280      	uxth	r0, r0
 8000d8e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d92:	463b      	mov	r3, r7
 8000d94:	4638      	mov	r0, r7
 8000d96:	463c      	mov	r4, r7
 8000d98:	46b8      	mov	r8, r7
 8000d9a:	46be      	mov	lr, r7
 8000d9c:	2620      	movs	r6, #32
 8000d9e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000da2:	eba2 0208 	sub.w	r2, r2, r8
 8000da6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000daa:	e766      	b.n	8000c7a <__udivmoddi4+0xfa>
 8000dac:	4601      	mov	r1, r0
 8000dae:	e718      	b.n	8000be2 <__udivmoddi4+0x62>
 8000db0:	4610      	mov	r0, r2
 8000db2:	e72c      	b.n	8000c0e <__udivmoddi4+0x8e>
 8000db4:	f1c6 0220 	rsb	r2, r6, #32
 8000db8:	fa2e f302 	lsr.w	r3, lr, r2
 8000dbc:	40b7      	lsls	r7, r6
 8000dbe:	40b1      	lsls	r1, r6
 8000dc0:	fa20 f202 	lsr.w	r2, r0, r2
 8000dc4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dc8:	430a      	orrs	r2, r1
 8000dca:	fbb3 f8fe 	udiv	r8, r3, lr
 8000dce:	b2bc      	uxth	r4, r7
 8000dd0:	fb0e 3318 	mls	r3, lr, r8, r3
 8000dd4:	0c11      	lsrs	r1, r2, #16
 8000dd6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dda:	fb08 f904 	mul.w	r9, r8, r4
 8000dde:	40b0      	lsls	r0, r6
 8000de0:	4589      	cmp	r9, r1
 8000de2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000de6:	b280      	uxth	r0, r0
 8000de8:	d93e      	bls.n	8000e68 <__udivmoddi4+0x2e8>
 8000dea:	1879      	adds	r1, r7, r1
 8000dec:	f108 3cff 	add.w	ip, r8, #4294967295
 8000df0:	d201      	bcs.n	8000df6 <__udivmoddi4+0x276>
 8000df2:	4589      	cmp	r9, r1
 8000df4:	d81f      	bhi.n	8000e36 <__udivmoddi4+0x2b6>
 8000df6:	eba1 0109 	sub.w	r1, r1, r9
 8000dfa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dfe:	fb09 f804 	mul.w	r8, r9, r4
 8000e02:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e06:	b292      	uxth	r2, r2
 8000e08:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e0c:	4542      	cmp	r2, r8
 8000e0e:	d229      	bcs.n	8000e64 <__udivmoddi4+0x2e4>
 8000e10:	18ba      	adds	r2, r7, r2
 8000e12:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e16:	d2c4      	bcs.n	8000da2 <__udivmoddi4+0x222>
 8000e18:	4542      	cmp	r2, r8
 8000e1a:	d2c2      	bcs.n	8000da2 <__udivmoddi4+0x222>
 8000e1c:	f1a9 0102 	sub.w	r1, r9, #2
 8000e20:	443a      	add	r2, r7
 8000e22:	e7be      	b.n	8000da2 <__udivmoddi4+0x222>
 8000e24:	45f0      	cmp	r8, lr
 8000e26:	d29d      	bcs.n	8000d64 <__udivmoddi4+0x1e4>
 8000e28:	ebbe 0302 	subs.w	r3, lr, r2
 8000e2c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e30:	3801      	subs	r0, #1
 8000e32:	46e1      	mov	r9, ip
 8000e34:	e796      	b.n	8000d64 <__udivmoddi4+0x1e4>
 8000e36:	eba7 0909 	sub.w	r9, r7, r9
 8000e3a:	4449      	add	r1, r9
 8000e3c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e40:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e44:	fb09 f804 	mul.w	r8, r9, r4
 8000e48:	e7db      	b.n	8000e02 <__udivmoddi4+0x282>
 8000e4a:	4673      	mov	r3, lr
 8000e4c:	e77f      	b.n	8000d4e <__udivmoddi4+0x1ce>
 8000e4e:	4650      	mov	r0, sl
 8000e50:	e766      	b.n	8000d20 <__udivmoddi4+0x1a0>
 8000e52:	4608      	mov	r0, r1
 8000e54:	e6fd      	b.n	8000c52 <__udivmoddi4+0xd2>
 8000e56:	443b      	add	r3, r7
 8000e58:	3a02      	subs	r2, #2
 8000e5a:	e733      	b.n	8000cc4 <__udivmoddi4+0x144>
 8000e5c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e60:	443b      	add	r3, r7
 8000e62:	e71c      	b.n	8000c9e <__udivmoddi4+0x11e>
 8000e64:	4649      	mov	r1, r9
 8000e66:	e79c      	b.n	8000da2 <__udivmoddi4+0x222>
 8000e68:	eba1 0109 	sub.w	r1, r1, r9
 8000e6c:	46c4      	mov	ip, r8
 8000e6e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e72:	fb09 f804 	mul.w	r8, r9, r4
 8000e76:	e7c4      	b.n	8000e02 <__udivmoddi4+0x282>

08000e78 <__aeabi_idiv0>:
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop

08000e7c <Motor_Init>:
 */

#include "Motor_Control.h"

void Motor_Init(Motor_t* new_Motor, GPIO_TypeDef* GPIO_IN1, uint16_t IN1, GPIO_TypeDef* GPIO_IN2, uint16_t IN2, TIM_HandleTypeDef* htim_pwm,
		uint32_t Channel_PWM, TIM_HandleTypeDef* htim_encoder){
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	603b      	str	r3, [r7, #0]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	80fb      	strh	r3, [r7, #6]
	new_Motor->GPIO_IN1 = GPIO_IN1;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	68ba      	ldr	r2, [r7, #8]
 8000e90:	601a      	str	r2, [r3, #0]
	new_Motor->GPIO_IN2 = GPIO_IN2;
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	683a      	ldr	r2, [r7, #0]
 8000e96:	609a      	str	r2, [r3, #8]
	new_Motor->IN1 = IN1;
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	88fa      	ldrh	r2, [r7, #6]
 8000e9c:	809a      	strh	r2, [r3, #4]
	new_Motor->IN2 = IN2;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	8b3a      	ldrh	r2, [r7, #24]
 8000ea2:	819a      	strh	r2, [r3, #12]
	new_Motor->htim_pwm = htim_pwm;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	69fa      	ldr	r2, [r7, #28]
 8000ea8:	611a      	str	r2, [r3, #16]
	new_Motor->Channel_PWM = Channel_PWM;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	6a3a      	ldr	r2, [r7, #32]
 8000eae:	615a      	str	r2, [r3, #20]
	new_Motor->htim_encoder = htim_encoder;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000eb4:	619a      	str	r2, [r3, #24]
}
 8000eb6:	bf00      	nop
 8000eb8:	3714      	adds	r7, #20
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <Stop>:

void Stop(Motor_t *Motor){
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b082      	sub	sp, #8
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(Motor->GPIO_IN1, Motor->IN1, GPIO_PIN_RESET);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6818      	ldr	r0, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	889b      	ldrh	r3, [r3, #4]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f002 ff0d 	bl	8003cf4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor->GPIO_IN2, Motor->IN2, GPIO_PIN_RESET);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6898      	ldr	r0, [r3, #8]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	899b      	ldrh	r3, [r3, #12]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	f002 ff05 	bl	8003cf4 <HAL_GPIO_WritePin>
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <Turn_right>:

void Turn_right(Motor_t *Motor){
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b082      	sub	sp, #8
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(Motor->GPIO_IN1, Motor->IN1, GPIO_PIN_RESET);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6818      	ldr	r0, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	889b      	ldrh	r3, [r3, #4]
 8000f02:	2200      	movs	r2, #0
 8000f04:	4619      	mov	r1, r3
 8000f06:	f002 fef5 	bl	8003cf4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor->GPIO_IN2, Motor->IN2, GPIO_PIN_SET);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6898      	ldr	r0, [r3, #8]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	899b      	ldrh	r3, [r3, #12]
 8000f12:	2201      	movs	r2, #1
 8000f14:	4619      	mov	r1, r3
 8000f16:	f002 feed 	bl	8003cf4 <HAL_GPIO_WritePin>
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <Turn_left>:

void Turn_left(Motor_t *Motor){
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(Motor->GPIO_IN1, Motor->IN1, GPIO_PIN_SET);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6818      	ldr	r0, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	889b      	ldrh	r3, [r3, #4]
 8000f32:	2201      	movs	r2, #1
 8000f34:	4619      	mov	r1, r3
 8000f36:	f002 fedd 	bl	8003cf4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor->GPIO_IN2, Motor->IN2, GPIO_PIN_RESET);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6898      	ldr	r0, [r3, #8]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	899b      	ldrh	r3, [r3, #12]
 8000f42:	2200      	movs	r2, #0
 8000f44:	4619      	mov	r1, r3
 8000f46:	f002 fed5 	bl	8003cf4 <HAL_GPIO_WritePin>
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <Control_Motor>:

void Control_Motor(Motor_t* Motor, float control_signal){
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
 8000f5a:	ed87 0a00 	vstr	s0, [r7]
	if(control_signal >= 0){
 8000f5e:	edd7 7a00 	vldr	s15, [r7]
 8000f62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f6a:	db03      	blt.n	8000f74 <Control_Motor+0x22>
		Turn_left(Motor);
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f7ff ffd8 	bl	8000f22 <Turn_left>
 8000f72:	e002      	b.n	8000f7a <Control_Motor+0x28>
	}else{
		Turn_right(Motor);
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f7ff ffbc 	bl	8000ef2 <Turn_right>
	}
	__HAL_TIM_SET_COMPARE(Motor->htim_pwm, Motor->Channel_PWM, control_signal);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	695b      	ldr	r3, [r3, #20]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d10a      	bne.n	8000f98 <Control_Motor+0x46>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	691b      	ldr	r3, [r3, #16]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	edd7 7a00 	vldr	s15, [r7]
 8000f8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f90:	ee17 2a90 	vmov	r2, s15
 8000f94:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000f96:	e027      	b.n	8000fe8 <Control_Motor+0x96>
	__HAL_TIM_SET_COMPARE(Motor->htim_pwm, Motor->Channel_PWM, control_signal);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	695b      	ldr	r3, [r3, #20]
 8000f9c:	2b04      	cmp	r3, #4
 8000f9e:	d10a      	bne.n	8000fb6 <Control_Motor+0x64>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	691b      	ldr	r3, [r3, #16]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	edd7 7a00 	vldr	s15, [r7]
 8000faa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fae:	ee17 3a90 	vmov	r3, s15
 8000fb2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000fb4:	e018      	b.n	8000fe8 <Control_Motor+0x96>
	__HAL_TIM_SET_COMPARE(Motor->htim_pwm, Motor->Channel_PWM, control_signal);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	695b      	ldr	r3, [r3, #20]
 8000fba:	2b08      	cmp	r3, #8
 8000fbc:	d10a      	bne.n	8000fd4 <Control_Motor+0x82>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	691b      	ldr	r3, [r3, #16]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	edd7 7a00 	vldr	s15, [r7]
 8000fc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fcc:	ee17 3a90 	vmov	r3, s15
 8000fd0:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000fd2:	e009      	b.n	8000fe8 <Control_Motor+0x96>
	__HAL_TIM_SET_COMPARE(Motor->htim_pwm, Motor->Channel_PWM, control_signal);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	691b      	ldr	r3, [r3, #16]
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	edd7 7a00 	vldr	s15, [r7]
 8000fde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fe2:	ee17 3a90 	vmov	r3, s15
 8000fe6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <PID_regulator>:
float PID_regulator(float err_n, float err_o, float int_var, float Kp, float Ki, float Kd, float dt);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float PID_regulator(float err_n, float err_o, float int_var, float Kp, float Ki, float Kd, float dt){
 8000ff0:	b480      	push	{r7}
 8000ff2:	b08b      	sub	sp, #44	@ 0x2c
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	ed87 0a07 	vstr	s0, [r7, #28]
 8000ffa:	edc7 0a06 	vstr	s1, [r7, #24]
 8000ffe:	ed87 1a05 	vstr	s2, [r7, #20]
 8001002:	edc7 1a04 	vstr	s3, [r7, #16]
 8001006:	ed87 2a03 	vstr	s4, [r7, #12]
 800100a:	edc7 2a02 	vstr	s5, [r7, #8]
 800100e:	ed87 3a01 	vstr	s6, [r7, #4]
	float P = err_n*Kp;
 8001012:	ed97 7a07 	vldr	s14, [r7, #28]
 8001016:	edd7 7a04 	vldr	s15, [r7, #16]
 800101a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800101e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	float D = Kd*(err_n - err_o)/dt;
 8001022:	ed97 7a07 	vldr	s14, [r7, #28]
 8001026:	edd7 7a06 	vldr	s15, [r7, #24]
 800102a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800102e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001032:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001036:	ed97 7a01 	vldr	s14, [r7, #4]
 800103a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800103e:	edc7 7a08 	vstr	s15, [r7, #32]
	int_var += Ki*err_n*dt;
 8001042:	ed97 7a03 	vldr	s14, [r7, #12]
 8001046:	edd7 7a07 	vldr	s15, [r7, #28]
 800104a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800104e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001056:	ed97 7a05 	vldr	s14, [r7, #20]
 800105a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800105e:	edc7 7a05 	vstr	s15, [r7, #20]
	err_o = err_n;
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	61bb      	str	r3, [r7, #24]
	return P + int_var + D;
 8001066:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800106a:	edd7 7a05 	vldr	s15, [r7, #20]
 800106e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001072:	edd7 7a08 	vldr	s15, [r7, #32]
 8001076:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800107a:	eeb0 0a67 	vmov.f32	s0, s15
 800107e:	372c      	adds	r7, #44	@ 0x2c
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08a      	sub	sp, #40	@ 0x28
 800108c:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800108e:	f001 fde5 	bl	8002c5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001092:	f000 f8e5 	bl	8001260 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001096:	f000 fbb9 	bl	800180c <MX_GPIO_Init>
  MX_I2C1_Init();
 800109a:	f000 f991 	bl	80013c0 <MX_I2C1_Init>
  MX_TIM1_Init();
 800109e:	f000 f9bd 	bl	800141c <MX_TIM1_Init>
  MX_ADC1_Init();
 80010a2:	f000 f93b 	bl	800131c <MX_ADC1_Init>
  MX_TIM2_Init();
 80010a6:	f000 fa57 	bl	8001558 <MX_TIM2_Init>
  MX_TIM3_Init();
 80010aa:	f000 faad 	bl	8001608 <MX_TIM3_Init>
  MX_TIM4_Init();
 80010ae:	f000 faff 	bl	80016b0 <MX_TIM4_Init>
  MX_TIM5_Init();
 80010b2:	f000 fb57 	bl	8001764 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
//Configure DC MOTOR A, B
 //A:
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80010b6:	2100      	movs	r1, #0
 80010b8:	4850      	ldr	r0, [pc, #320]	@ (80011fc <main+0x174>)
 80010ba:	f004 fd25 	bl	8005b08 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80010be:	213c      	movs	r1, #60	@ 0x3c
 80010c0:	484f      	ldr	r0, [pc, #316]	@ (8001200 <main+0x178>)
 80010c2:	f004 fe77 	bl	8005db4 <HAL_TIM_Encoder_Start>
//B:
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80010c6:	2100      	movs	r1, #0
 80010c8:	484e      	ldr	r0, [pc, #312]	@ (8001204 <main+0x17c>)
 80010ca:	f004 fd1d 	bl	8005b08 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 80010ce:	213c      	movs	r1, #60	@ 0x3c
 80010d0:	484d      	ldr	r0, [pc, #308]	@ (8001208 <main+0x180>)
 80010d2:	f004 fe6f 	bl	8005db4 <HAL_TIM_Encoder_Start>

  //Initialize Motors
  Motor_Init(&Motor_1,
 80010d6:	4b4a      	ldr	r3, [pc, #296]	@ (8001200 <main+0x178>)
 80010d8:	9303      	str	r3, [sp, #12]
 80010da:	2300      	movs	r3, #0
 80010dc:	9302      	str	r3, [sp, #8]
 80010de:	4b47      	ldr	r3, [pc, #284]	@ (80011fc <main+0x174>)
 80010e0:	9301      	str	r3, [sp, #4]
 80010e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010e6:	9300      	str	r3, [sp, #0]
 80010e8:	4b48      	ldr	r3, [pc, #288]	@ (800120c <main+0x184>)
 80010ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010ee:	4947      	ldr	r1, [pc, #284]	@ (800120c <main+0x184>)
 80010f0:	4847      	ldr	r0, [pc, #284]	@ (8001210 <main+0x188>)
 80010f2:	f7ff fec3 	bl	8000e7c <Motor_Init>
		  GPIOD, IN1_M1_Pin,
		  GPIOD, IN2_M1_Pin,
		  &htim2, TIM_CHANNEL_1,
		  &htim3);

  Motor_Init(&Motor_2,
 80010f6:	4b44      	ldr	r3, [pc, #272]	@ (8001208 <main+0x180>)
 80010f8:	9303      	str	r3, [sp, #12]
 80010fa:	2300      	movs	r3, #0
 80010fc:	9302      	str	r3, [sp, #8]
 80010fe:	4b41      	ldr	r3, [pc, #260]	@ (8001204 <main+0x17c>)
 8001100:	9301      	str	r3, [sp, #4]
 8001102:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	4b40      	ldr	r3, [pc, #256]	@ (800120c <main+0x184>)
 800110a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800110e:	493f      	ldr	r1, [pc, #252]	@ (800120c <main+0x184>)
 8001110:	4840      	ldr	r0, [pc, #256]	@ (8001214 <main+0x18c>)
 8001112:	f7ff feb3 	bl	8000e7c <Motor_Init>
		  GPIOD, IN2_M2_Pin,
		  &htim4, TIM_CHANNEL_1,
		  &htim5);

//Initialize touch screen
  touch_5wire_init(&Ts,
 8001116:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800111a:	9308      	str	r3, [sp, #32]
 800111c:	4b3e      	ldr	r3, [pc, #248]	@ (8001218 <main+0x190>)
 800111e:	9307      	str	r3, [sp, #28]
 8001120:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001124:	9306      	str	r3, [sp, #24]
 8001126:	4b3c      	ldr	r3, [pc, #240]	@ (8001218 <main+0x190>)
 8001128:	9305      	str	r3, [sp, #20]
 800112a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800112e:	9304      	str	r3, [sp, #16]
 8001130:	4b39      	ldr	r3, [pc, #228]	@ (8001218 <main+0x190>)
 8001132:	9303      	str	r3, [sp, #12]
 8001134:	2380      	movs	r3, #128	@ 0x80
 8001136:	9302      	str	r3, [sp, #8]
 8001138:	4b37      	ldr	r3, [pc, #220]	@ (8001218 <main+0x190>)
 800113a:	9301      	str	r3, [sp, #4]
 800113c:	2301      	movs	r3, #1
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	4b36      	ldr	r3, [pc, #216]	@ (800121c <main+0x194>)
 8001142:	2208      	movs	r2, #8
 8001144:	4936      	ldr	r1, [pc, #216]	@ (8001220 <main+0x198>)
 8001146:	4837      	ldr	r0, [pc, #220]	@ (8001224 <main+0x19c>)
 8001148:	f001 fae0 	bl	800270c <touch_5wire_init>
		  GPIOE, LR_Pin,
		  GPIOE, LL_Pin,
		  GPIOE, UR_Pin,
		  GPIOE, UL_Pin);

  Stop(&Motor_1);
 800114c:	4830      	ldr	r0, [pc, #192]	@ (8001210 <main+0x188>)
 800114e:	f7ff feb8 	bl	8000ec2 <Stop>
  Stop(&Motor_2);
 8001152:	4830      	ldr	r0, [pc, #192]	@ (8001214 <main+0x18c>)
 8001154:	f7ff feb5 	bl	8000ec2 <Stop>
//Initialize MPU sensor
  HAL_TIM_Base_Start_IT(&htim1);
 8001158:	4833      	ldr	r0, [pc, #204]	@ (8001228 <main+0x1a0>)
 800115a:	f004 fbcb 	bl	80058f4 <HAL_TIM_Base_Start_IT>
  MPU6500_Init(&hi2c1);
 800115e:	4833      	ldr	r0, [pc, #204]	@ (800122c <main+0x1a4>)
 8001160:	f000 fbe0 	bl	8001924 <MPU6500_Init>
  MPU6500_Calibrate(&hi2c1, &mpu, 1000);
 8001164:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001168:	4931      	ldr	r1, [pc, #196]	@ (8001230 <main+0x1a8>)
 800116a:	4830      	ldr	r0, [pc, #192]	@ (800122c <main+0x1a4>)
 800116c:	f000 fc96 	bl	8001a9c <MPU6500_Calibrate>
  HAL_Delay(1000);
 8001170:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001174:	f001 fde4 	bl	8002d40 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MPU6500_Read_Data(&hi2c1, &mpu);
 8001178:	492d      	ldr	r1, [pc, #180]	@ (8001230 <main+0x1a8>)
 800117a:	482c      	ldr	r0, [pc, #176]	@ (800122c <main+0x1a4>)
 800117c:	f000 fd40 	bl	8001c00 <MPU6500_Read_Data>
	  state_touch = touch_detect(&Ts);
 8001180:	4828      	ldr	r0, [pc, #160]	@ (8001224 <main+0x19c>)
 8001182:	f001 fc85 	bl	8002a90 <touch_detect>
 8001186:	4603      	mov	r3, r0
 8001188:	461a      	mov	r2, r3
 800118a:	4b2a      	ldr	r3, [pc, #168]	@ (8001234 <main+0x1ac>)
 800118c:	701a      	strb	r2, [r3, #0]
	  if (state_touch == 1){
 800118e:	4b29      	ldr	r3, [pc, #164]	@ (8001234 <main+0x1ac>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	b2db      	uxtb	r3, r3
 8001194:	2b01      	cmp	r3, #1
 8001196:	d11a      	bne.n	80011ce <main+0x146>
		  set_to_adc(&Ts);
 8001198:	4822      	ldr	r0, [pc, #136]	@ (8001224 <main+0x19c>)
 800119a:	f001 fc1f 	bl	80029dc <set_to_adc>
//		  MX_ADC1_Init();
//		  HAL_Delay(10);
		  position_x = get_position_x(&Ts, min_adc_x, max_adc_x, length);
 800119e:	4b26      	ldr	r3, [pc, #152]	@ (8001238 <main+0x1b0>)
 80011a0:	8819      	ldrh	r1, [r3, #0]
 80011a2:	4b26      	ldr	r3, [pc, #152]	@ (800123c <main+0x1b4>)
 80011a4:	881a      	ldrh	r2, [r3, #0]
 80011a6:	4b26      	ldr	r3, [pc, #152]	@ (8001240 <main+0x1b8>)
 80011a8:	881b      	ldrh	r3, [r3, #0]
 80011aa:	481e      	ldr	r0, [pc, #120]	@ (8001224 <main+0x19c>)
 80011ac:	f001 fca9 	bl	8002b02 <get_position_x>
 80011b0:	4603      	mov	r3, r0
 80011b2:	4a24      	ldr	r2, [pc, #144]	@ (8001244 <main+0x1bc>)
 80011b4:	6013      	str	r3, [r2, #0]
		  position_y = get_position_y(&Ts, min_adc_y, max_adc_y, width);
 80011b6:	4b24      	ldr	r3, [pc, #144]	@ (8001248 <main+0x1c0>)
 80011b8:	8819      	ldrh	r1, [r3, #0]
 80011ba:	4b24      	ldr	r3, [pc, #144]	@ (800124c <main+0x1c4>)
 80011bc:	881a      	ldrh	r2, [r3, #0]
 80011be:	4b24      	ldr	r3, [pc, #144]	@ (8001250 <main+0x1c8>)
 80011c0:	881b      	ldrh	r3, [r3, #0]
 80011c2:	4818      	ldr	r0, [pc, #96]	@ (8001224 <main+0x19c>)
 80011c4:	f001 fcec 	bl	8002ba0 <get_position_y>
 80011c8:	4603      	mov	r3, r0
 80011ca:	4a22      	ldr	r2, [pc, #136]	@ (8001254 <main+0x1cc>)
 80011cc:	6013      	str	r3, [r2, #0]
	  }
	  //Control motor
	  Control_Motor(&Motor_1, ang_control_signal_alpha);
 80011ce:	4b22      	ldr	r3, [pc, #136]	@ (8001258 <main+0x1d0>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	ee07 3a90 	vmov	s15, r3
 80011d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011da:	eeb0 0a67 	vmov.f32	s0, s15
 80011de:	480c      	ldr	r0, [pc, #48]	@ (8001210 <main+0x188>)
 80011e0:	f7ff feb7 	bl	8000f52 <Control_Motor>
	  Control_Motor(&Motor_2, ang_control_signal_beta);
 80011e4:	4b1d      	ldr	r3, [pc, #116]	@ (800125c <main+0x1d4>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	ee07 3a90 	vmov	s15, r3
 80011ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011f0:	eeb0 0a67 	vmov.f32	s0, s15
 80011f4:	4807      	ldr	r0, [pc, #28]	@ (8001214 <main+0x18c>)
 80011f6:	f7ff feac 	bl	8000f52 <Control_Motor>
	  MPU6500_Read_Data(&hi2c1, &mpu);
 80011fa:	e7bd      	b.n	8001178 <main+0xf0>
 80011fc:	20000170 	.word	0x20000170
 8001200:	200001b8 	.word	0x200001b8
 8001204:	20000200 	.word	0x20000200
 8001208:	20000248 	.word	0x20000248
 800120c:	40020c00 	.word	0x40020c00
 8001210:	200003b4 	.word	0x200003b4
 8001214:	200003d0 	.word	0x200003d0
 8001218:	40021000 	.word	0x40021000
 800121c:	40020400 	.word	0x40020400
 8001220:	2000008c 	.word	0x2000008c
 8001224:	20000318 	.word	0x20000318
 8001228:	20000128 	.word	0x20000128
 800122c:	200000d4 	.word	0x200000d4
 8001230:	200002c8 	.word	0x200002c8
 8001234:	200003a8 	.word	0x200003a8
 8001238:	2000000c 	.word	0x2000000c
 800123c:	2000000e 	.word	0x2000000e
 8001240:	20000008 	.word	0x20000008
 8001244:	200003ac 	.word	0x200003ac
 8001248:	20000010 	.word	0x20000010
 800124c:	20000012 	.word	0x20000012
 8001250:	2000000a 	.word	0x2000000a
 8001254:	200003b0 	.word	0x200003b0
 8001258:	200002b0 	.word	0x200002b0
 800125c:	200002b4 	.word	0x200002b4

08001260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b094      	sub	sp, #80	@ 0x50
 8001264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001266:	f107 0320 	add.w	r3, r7, #32
 800126a:	2230      	movs	r2, #48	@ 0x30
 800126c:	2100      	movs	r1, #0
 800126e:	4618      	mov	r0, r3
 8001270:	f005 fcdc 	bl	8006c2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001274:	f107 030c 	add.w	r3, r7, #12
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001284:	2300      	movs	r3, #0
 8001286:	60bb      	str	r3, [r7, #8]
 8001288:	4b22      	ldr	r3, [pc, #136]	@ (8001314 <SystemClock_Config+0xb4>)
 800128a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128c:	4a21      	ldr	r2, [pc, #132]	@ (8001314 <SystemClock_Config+0xb4>)
 800128e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001292:	6413      	str	r3, [r2, #64]	@ 0x40
 8001294:	4b1f      	ldr	r3, [pc, #124]	@ (8001314 <SystemClock_Config+0xb4>)
 8001296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001298:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800129c:	60bb      	str	r3, [r7, #8]
 800129e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012a0:	2300      	movs	r3, #0
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001318 <SystemClock_Config+0xb8>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a1b      	ldr	r2, [pc, #108]	@ (8001318 <SystemClock_Config+0xb8>)
 80012aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80012ae:	6013      	str	r3, [r2, #0]
 80012b0:	4b19      	ldr	r3, [pc, #100]	@ (8001318 <SystemClock_Config+0xb8>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012b8:	607b      	str	r3, [r7, #4]
 80012ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012bc:	2302      	movs	r3, #2
 80012be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012c0:	2301      	movs	r3, #1
 80012c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012c4:	2310      	movs	r3, #16
 80012c6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012c8:	2300      	movs	r3, #0
 80012ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012cc:	f107 0320 	add.w	r3, r7, #32
 80012d0:	4618      	mov	r0, r3
 80012d2:	f003 fe7b 	bl	8004fcc <HAL_RCC_OscConfig>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80012dc:	f000 fb1c 	bl	8001918 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012e0:	230f      	movs	r3, #15
 80012e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012e4:	2300      	movs	r3, #0
 80012e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012f0:	2300      	movs	r3, #0
 80012f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012f4:	f107 030c 	add.w	r3, r7, #12
 80012f8:	2100      	movs	r1, #0
 80012fa:	4618      	mov	r0, r3
 80012fc:	f004 f8de 	bl	80054bc <HAL_RCC_ClockConfig>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001306:	f000 fb07 	bl	8001918 <Error_Handler>
  }
}
 800130a:	bf00      	nop
 800130c:	3750      	adds	r7, #80	@ 0x50
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40023800 	.word	0x40023800
 8001318:	40007000 	.word	0x40007000

0800131c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001322:	463b      	mov	r3, r7
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800132e:	4b21      	ldr	r3, [pc, #132]	@ (80013b4 <MX_ADC1_Init+0x98>)
 8001330:	4a21      	ldr	r2, [pc, #132]	@ (80013b8 <MX_ADC1_Init+0x9c>)
 8001332:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001334:	4b1f      	ldr	r3, [pc, #124]	@ (80013b4 <MX_ADC1_Init+0x98>)
 8001336:	2200      	movs	r2, #0
 8001338:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800133a:	4b1e      	ldr	r3, [pc, #120]	@ (80013b4 <MX_ADC1_Init+0x98>)
 800133c:	2200      	movs	r2, #0
 800133e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001340:	4b1c      	ldr	r3, [pc, #112]	@ (80013b4 <MX_ADC1_Init+0x98>)
 8001342:	2200      	movs	r2, #0
 8001344:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001346:	4b1b      	ldr	r3, [pc, #108]	@ (80013b4 <MX_ADC1_Init+0x98>)
 8001348:	2200      	movs	r2, #0
 800134a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800134c:	4b19      	ldr	r3, [pc, #100]	@ (80013b4 <MX_ADC1_Init+0x98>)
 800134e:	2200      	movs	r2, #0
 8001350:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001354:	4b17      	ldr	r3, [pc, #92]	@ (80013b4 <MX_ADC1_Init+0x98>)
 8001356:	2200      	movs	r2, #0
 8001358:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800135a:	4b16      	ldr	r3, [pc, #88]	@ (80013b4 <MX_ADC1_Init+0x98>)
 800135c:	4a17      	ldr	r2, [pc, #92]	@ (80013bc <MX_ADC1_Init+0xa0>)
 800135e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001360:	4b14      	ldr	r3, [pc, #80]	@ (80013b4 <MX_ADC1_Init+0x98>)
 8001362:	2200      	movs	r2, #0
 8001364:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001366:	4b13      	ldr	r3, [pc, #76]	@ (80013b4 <MX_ADC1_Init+0x98>)
 8001368:	2201      	movs	r2, #1
 800136a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800136c:	4b11      	ldr	r3, [pc, #68]	@ (80013b4 <MX_ADC1_Init+0x98>)
 800136e:	2200      	movs	r2, #0
 8001370:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001374:	4b0f      	ldr	r3, [pc, #60]	@ (80013b4 <MX_ADC1_Init+0x98>)
 8001376:	2201      	movs	r2, #1
 8001378:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800137a:	480e      	ldr	r0, [pc, #56]	@ (80013b4 <MX_ADC1_Init+0x98>)
 800137c:	f001 fd04 	bl	8002d88 <HAL_ADC_Init>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001386:	f000 fac7 	bl	8001918 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800138a:	2308      	movs	r3, #8
 800138c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800138e:	2301      	movs	r3, #1
 8001390:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001392:	2300      	movs	r3, #0
 8001394:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001396:	463b      	mov	r3, r7
 8001398:	4619      	mov	r1, r3
 800139a:	4806      	ldr	r0, [pc, #24]	@ (80013b4 <MX_ADC1_Init+0x98>)
 800139c:	f001 feea 	bl	8003174 <HAL_ADC_ConfigChannel>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80013a6:	f000 fab7 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013aa:	bf00      	nop
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	2000008c 	.word	0x2000008c
 80013b8:	40012000 	.word	0x40012000
 80013bc:	0f000001 	.word	0x0f000001

080013c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013c4:	4b12      	ldr	r3, [pc, #72]	@ (8001410 <MX_I2C1_Init+0x50>)
 80013c6:	4a13      	ldr	r2, [pc, #76]	@ (8001414 <MX_I2C1_Init+0x54>)
 80013c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013ca:	4b11      	ldr	r3, [pc, #68]	@ (8001410 <MX_I2C1_Init+0x50>)
 80013cc:	4a12      	ldr	r2, [pc, #72]	@ (8001418 <MX_I2C1_Init+0x58>)
 80013ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001410 <MX_I2C1_Init+0x50>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001410 <MX_I2C1_Init+0x50>)
 80013d8:	2200      	movs	r2, #0
 80013da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001410 <MX_I2C1_Init+0x50>)
 80013de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001410 <MX_I2C1_Init+0x50>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013ea:	4b09      	ldr	r3, [pc, #36]	@ (8001410 <MX_I2C1_Init+0x50>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013f0:	4b07      	ldr	r3, [pc, #28]	@ (8001410 <MX_I2C1_Init+0x50>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013f6:	4b06      	ldr	r3, [pc, #24]	@ (8001410 <MX_I2C1_Init+0x50>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013fc:	4804      	ldr	r0, [pc, #16]	@ (8001410 <MX_I2C1_Init+0x50>)
 80013fe:	f002 fc93 	bl	8003d28 <HAL_I2C_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001408:	f000 fa86 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}
 8001410:	200000d4 	.word	0x200000d4
 8001414:	40005400 	.word	0x40005400
 8001418:	000186a0 	.word	0x000186a0

0800141c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b096      	sub	sp, #88	@ 0x58
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001422:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001430:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800143a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	60da      	str	r2, [r3, #12]
 8001448:	611a      	str	r2, [r3, #16]
 800144a:	615a      	str	r2, [r3, #20]
 800144c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	2220      	movs	r2, #32
 8001452:	2100      	movs	r1, #0
 8001454:	4618      	mov	r0, r3
 8001456:	f005 fbe9 	bl	8006c2c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800145a:	4b3d      	ldr	r3, [pc, #244]	@ (8001550 <MX_TIM1_Init+0x134>)
 800145c:	4a3d      	ldr	r2, [pc, #244]	@ (8001554 <MX_TIM1_Init+0x138>)
 800145e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 8001460:	4b3b      	ldr	r3, [pc, #236]	@ (8001550 <MX_TIM1_Init+0x134>)
 8001462:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001466:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001468:	4b39      	ldr	r3, [pc, #228]	@ (8001550 <MX_TIM1_Init+0x134>)
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1599;
 800146e:	4b38      	ldr	r3, [pc, #224]	@ (8001550 <MX_TIM1_Init+0x134>)
 8001470:	f240 623f 	movw	r2, #1599	@ 0x63f
 8001474:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001476:	4b36      	ldr	r3, [pc, #216]	@ (8001550 <MX_TIM1_Init+0x134>)
 8001478:	2200      	movs	r2, #0
 800147a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800147c:	4b34      	ldr	r3, [pc, #208]	@ (8001550 <MX_TIM1_Init+0x134>)
 800147e:	2200      	movs	r2, #0
 8001480:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001482:	4b33      	ldr	r3, [pc, #204]	@ (8001550 <MX_TIM1_Init+0x134>)
 8001484:	2200      	movs	r2, #0
 8001486:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001488:	4831      	ldr	r0, [pc, #196]	@ (8001550 <MX_TIM1_Init+0x134>)
 800148a:	f004 f9e3 	bl	8005854 <HAL_TIM_Base_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001494:	f000 fa40 	bl	8001918 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001498:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800149c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800149e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80014a2:	4619      	mov	r1, r3
 80014a4:	482a      	ldr	r0, [pc, #168]	@ (8001550 <MX_TIM1_Init+0x134>)
 80014a6:	f004 ff21 	bl	80062ec <HAL_TIM_ConfigClockSource>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80014b0:	f000 fa32 	bl	8001918 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80014b4:	4826      	ldr	r0, [pc, #152]	@ (8001550 <MX_TIM1_Init+0x134>)
 80014b6:	f004 fa7f 	bl	80059b8 <HAL_TIM_OC_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80014c0:	f000 fa2a 	bl	8001918 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c4:	2300      	movs	r3, #0
 80014c6:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c8:	2300      	movs	r3, #0
 80014ca:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014cc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80014d0:	4619      	mov	r1, r3
 80014d2:	481f      	ldr	r0, [pc, #124]	@ (8001550 <MX_TIM1_Init+0x134>)
 80014d4:	f005 fad6 	bl	8006a84 <HAL_TIMEx_MasterConfigSynchronization>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80014de:	f000 fa1b 	bl	8001918 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80014e2:	2300      	movs	r3, #0
 80014e4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014ea:	2300      	movs	r3, #0
 80014ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014ee:	2300      	movs	r3, #0
 80014f0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014f2:	2300      	movs	r3, #0
 80014f4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014f6:	2300      	movs	r3, #0
 80014f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014fa:	2300      	movs	r3, #0
 80014fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001502:	2200      	movs	r2, #0
 8001504:	4619      	mov	r1, r3
 8001506:	4812      	ldr	r0, [pc, #72]	@ (8001550 <MX_TIM1_Init+0x134>)
 8001508:	f004 fdd2 	bl	80060b0 <HAL_TIM_OC_ConfigChannel>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001512:	f000 fa01 	bl	8001918 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001516:	2300      	movs	r3, #0
 8001518:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800151a:	2300      	movs	r3, #0
 800151c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001522:	2300      	movs	r3, #0
 8001524:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001526:	2300      	movs	r3, #0
 8001528:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800152a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800152e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001530:	2300      	movs	r3, #0
 8001532:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001534:	1d3b      	adds	r3, r7, #4
 8001536:	4619      	mov	r1, r3
 8001538:	4805      	ldr	r0, [pc, #20]	@ (8001550 <MX_TIM1_Init+0x134>)
 800153a:	f005 fb11 	bl	8006b60 <HAL_TIMEx_ConfigBreakDeadTime>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001544:	f000 f9e8 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001548:	bf00      	nop
 800154a:	3758      	adds	r7, #88	@ 0x58
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000128 	.word	0x20000128
 8001554:	40010000 	.word	0x40010000

08001558 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08a      	sub	sp, #40	@ 0x28
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800155e:	f107 0320 	add.w	r3, r7, #32
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001568:	1d3b      	adds	r3, r7, #4
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	605a      	str	r2, [r3, #4]
 8001570:	609a      	str	r2, [r3, #8]
 8001572:	60da      	str	r2, [r3, #12]
 8001574:	611a      	str	r2, [r3, #16]
 8001576:	615a      	str	r2, [r3, #20]
 8001578:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800157a:	4b22      	ldr	r3, [pc, #136]	@ (8001604 <MX_TIM2_Init+0xac>)
 800157c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001580:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001582:	4b20      	ldr	r3, [pc, #128]	@ (8001604 <MX_TIM2_Init+0xac>)
 8001584:	2200      	movs	r2, #0
 8001586:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001588:	4b1e      	ldr	r3, [pc, #120]	@ (8001604 <MX_TIM2_Init+0xac>)
 800158a:	2200      	movs	r2, #0
 800158c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 799;
 800158e:	4b1d      	ldr	r3, [pc, #116]	@ (8001604 <MX_TIM2_Init+0xac>)
 8001590:	f240 321f 	movw	r2, #799	@ 0x31f
 8001594:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001596:	4b1b      	ldr	r3, [pc, #108]	@ (8001604 <MX_TIM2_Init+0xac>)
 8001598:	2200      	movs	r2, #0
 800159a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800159c:	4b19      	ldr	r3, [pc, #100]	@ (8001604 <MX_TIM2_Init+0xac>)
 800159e:	2200      	movs	r2, #0
 80015a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80015a2:	4818      	ldr	r0, [pc, #96]	@ (8001604 <MX_TIM2_Init+0xac>)
 80015a4:	f004 fa61 	bl	8005a6a <HAL_TIM_PWM_Init>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80015ae:	f000 f9b3 	bl	8001918 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b2:	2300      	movs	r3, #0
 80015b4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b6:	2300      	movs	r3, #0
 80015b8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015ba:	f107 0320 	add.w	r3, r7, #32
 80015be:	4619      	mov	r1, r3
 80015c0:	4810      	ldr	r0, [pc, #64]	@ (8001604 <MX_TIM2_Init+0xac>)
 80015c2:	f005 fa5f 	bl	8006a84 <HAL_TIMEx_MasterConfigSynchronization>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80015cc:	f000 f9a4 	bl	8001918 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015d0:	2360      	movs	r3, #96	@ 0x60
 80015d2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015d8:	2300      	movs	r3, #0
 80015da:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015e0:	1d3b      	adds	r3, r7, #4
 80015e2:	2200      	movs	r2, #0
 80015e4:	4619      	mov	r1, r3
 80015e6:	4807      	ldr	r0, [pc, #28]	@ (8001604 <MX_TIM2_Init+0xac>)
 80015e8:	f004 fdbe 	bl	8006168 <HAL_TIM_PWM_ConfigChannel>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80015f2:	f000 f991 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80015f6:	4803      	ldr	r0, [pc, #12]	@ (8001604 <MX_TIM2_Init+0xac>)
 80015f8:	f000 fe5a 	bl	80022b0 <HAL_TIM_MspPostInit>

}
 80015fc:	bf00      	nop
 80015fe:	3728      	adds	r7, #40	@ 0x28
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20000170 	.word	0x20000170

08001608 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b08c      	sub	sp, #48	@ 0x30
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800160e:	f107 030c 	add.w	r3, r7, #12
 8001612:	2224      	movs	r2, #36	@ 0x24
 8001614:	2100      	movs	r1, #0
 8001616:	4618      	mov	r0, r3
 8001618:	f005 fb08 	bl	8006c2c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800161c:	1d3b      	adds	r3, r7, #4
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001624:	4b20      	ldr	r3, [pc, #128]	@ (80016a8 <MX_TIM3_Init+0xa0>)
 8001626:	4a21      	ldr	r2, [pc, #132]	@ (80016ac <MX_TIM3_Init+0xa4>)
 8001628:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800162a:	4b1f      	ldr	r3, [pc, #124]	@ (80016a8 <MX_TIM3_Init+0xa0>)
 800162c:	2200      	movs	r2, #0
 800162e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001630:	4b1d      	ldr	r3, [pc, #116]	@ (80016a8 <MX_TIM3_Init+0xa0>)
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001636:	4b1c      	ldr	r3, [pc, #112]	@ (80016a8 <MX_TIM3_Init+0xa0>)
 8001638:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800163c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800163e:	4b1a      	ldr	r3, [pc, #104]	@ (80016a8 <MX_TIM3_Init+0xa0>)
 8001640:	2200      	movs	r2, #0
 8001642:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001644:	4b18      	ldr	r3, [pc, #96]	@ (80016a8 <MX_TIM3_Init+0xa0>)
 8001646:	2200      	movs	r2, #0
 8001648:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800164a:	2303      	movs	r3, #3
 800164c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800164e:	2300      	movs	r3, #0
 8001650:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001652:	2301      	movs	r3, #1
 8001654:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001656:	2300      	movs	r3, #0
 8001658:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800165a:	2300      	movs	r3, #0
 800165c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800165e:	2300      	movs	r3, #0
 8001660:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001662:	2301      	movs	r3, #1
 8001664:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001666:	2300      	movs	r3, #0
 8001668:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800166a:	2300      	movs	r3, #0
 800166c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800166e:	f107 030c 	add.w	r3, r7, #12
 8001672:	4619      	mov	r1, r3
 8001674:	480c      	ldr	r0, [pc, #48]	@ (80016a8 <MX_TIM3_Init+0xa0>)
 8001676:	f004 faf7 	bl	8005c68 <HAL_TIM_Encoder_Init>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001680:	f000 f94a 	bl	8001918 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001684:	2300      	movs	r3, #0
 8001686:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001688:	2300      	movs	r3, #0
 800168a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800168c:	1d3b      	adds	r3, r7, #4
 800168e:	4619      	mov	r1, r3
 8001690:	4805      	ldr	r0, [pc, #20]	@ (80016a8 <MX_TIM3_Init+0xa0>)
 8001692:	f005 f9f7 	bl	8006a84 <HAL_TIMEx_MasterConfigSynchronization>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800169c:	f000 f93c 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80016a0:	bf00      	nop
 80016a2:	3730      	adds	r7, #48	@ 0x30
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	200001b8 	.word	0x200001b8
 80016ac:	40000400 	.word	0x40000400

080016b0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b08a      	sub	sp, #40	@ 0x28
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b6:	f107 0320 	add.w	r3, r7, #32
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016c0:	1d3b      	adds	r3, r7, #4
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]
 80016c8:	609a      	str	r2, [r3, #8]
 80016ca:	60da      	str	r2, [r3, #12]
 80016cc:	611a      	str	r2, [r3, #16]
 80016ce:	615a      	str	r2, [r3, #20]
 80016d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80016d2:	4b22      	ldr	r3, [pc, #136]	@ (800175c <MX_TIM4_Init+0xac>)
 80016d4:	4a22      	ldr	r2, [pc, #136]	@ (8001760 <MX_TIM4_Init+0xb0>)
 80016d6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80016d8:	4b20      	ldr	r3, [pc, #128]	@ (800175c <MX_TIM4_Init+0xac>)
 80016da:	2200      	movs	r2, #0
 80016dc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016de:	4b1f      	ldr	r3, [pc, #124]	@ (800175c <MX_TIM4_Init+0xac>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 799;
 80016e4:	4b1d      	ldr	r3, [pc, #116]	@ (800175c <MX_TIM4_Init+0xac>)
 80016e6:	f240 321f 	movw	r2, #799	@ 0x31f
 80016ea:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ec:	4b1b      	ldr	r3, [pc, #108]	@ (800175c <MX_TIM4_Init+0xac>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f2:	4b1a      	ldr	r3, [pc, #104]	@ (800175c <MX_TIM4_Init+0xac>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80016f8:	4818      	ldr	r0, [pc, #96]	@ (800175c <MX_TIM4_Init+0xac>)
 80016fa:	f004 f9b6 	bl	8005a6a <HAL_TIM_PWM_Init>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001704:	f000 f908 	bl	8001918 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001708:	2300      	movs	r3, #0
 800170a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800170c:	2300      	movs	r3, #0
 800170e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001710:	f107 0320 	add.w	r3, r7, #32
 8001714:	4619      	mov	r1, r3
 8001716:	4811      	ldr	r0, [pc, #68]	@ (800175c <MX_TIM4_Init+0xac>)
 8001718:	f005 f9b4 	bl	8006a84 <HAL_TIMEx_MasterConfigSynchronization>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001722:	f000 f8f9 	bl	8001918 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001726:	2360      	movs	r3, #96	@ 0x60
 8001728:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800172a:	2300      	movs	r3, #0
 800172c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001732:	2300      	movs	r3, #0
 8001734:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001736:	1d3b      	adds	r3, r7, #4
 8001738:	2200      	movs	r2, #0
 800173a:	4619      	mov	r1, r3
 800173c:	4807      	ldr	r0, [pc, #28]	@ (800175c <MX_TIM4_Init+0xac>)
 800173e:	f004 fd13 	bl	8006168 <HAL_TIM_PWM_ConfigChannel>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001748:	f000 f8e6 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800174c:	4803      	ldr	r0, [pc, #12]	@ (800175c <MX_TIM4_Init+0xac>)
 800174e:	f000 fdaf 	bl	80022b0 <HAL_TIM_MspPostInit>

}
 8001752:	bf00      	nop
 8001754:	3728      	adds	r7, #40	@ 0x28
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000200 	.word	0x20000200
 8001760:	40000800 	.word	0x40000800

08001764 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b08c      	sub	sp, #48	@ 0x30
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800176a:	f107 030c 	add.w	r3, r7, #12
 800176e:	2224      	movs	r2, #36	@ 0x24
 8001770:	2100      	movs	r1, #0
 8001772:	4618      	mov	r0, r3
 8001774:	f005 fa5a 	bl	8006c2c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001778:	1d3b      	adds	r3, r7, #4
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001780:	4b20      	ldr	r3, [pc, #128]	@ (8001804 <MX_TIM5_Init+0xa0>)
 8001782:	4a21      	ldr	r2, [pc, #132]	@ (8001808 <MX_TIM5_Init+0xa4>)
 8001784:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001786:	4b1f      	ldr	r3, [pc, #124]	@ (8001804 <MX_TIM5_Init+0xa0>)
 8001788:	2200      	movs	r2, #0
 800178a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800178c:	4b1d      	ldr	r3, [pc, #116]	@ (8001804 <MX_TIM5_Init+0xa0>)
 800178e:	2200      	movs	r2, #0
 8001790:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001792:	4b1c      	ldr	r3, [pc, #112]	@ (8001804 <MX_TIM5_Init+0xa0>)
 8001794:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001798:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800179a:	4b1a      	ldr	r3, [pc, #104]	@ (8001804 <MX_TIM5_Init+0xa0>)
 800179c:	2200      	movs	r2, #0
 800179e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017a0:	4b18      	ldr	r3, [pc, #96]	@ (8001804 <MX_TIM5_Init+0xa0>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80017a6:	2303      	movs	r3, #3
 80017a8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80017aa:	2300      	movs	r3, #0
 80017ac:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80017ae:	2301      	movs	r3, #1
 80017b0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80017b2:	2300      	movs	r3, #0
 80017b4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80017ba:	2300      	movs	r3, #0
 80017bc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80017be:	2301      	movs	r3, #1
 80017c0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80017c2:	2300      	movs	r3, #0
 80017c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80017ca:	f107 030c 	add.w	r3, r7, #12
 80017ce:	4619      	mov	r1, r3
 80017d0:	480c      	ldr	r0, [pc, #48]	@ (8001804 <MX_TIM5_Init+0xa0>)
 80017d2:	f004 fa49 	bl	8005c68 <HAL_TIM_Encoder_Init>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80017dc:	f000 f89c 	bl	8001918 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017e0:	2300      	movs	r3, #0
 80017e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017e4:	2300      	movs	r3, #0
 80017e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80017e8:	1d3b      	adds	r3, r7, #4
 80017ea:	4619      	mov	r1, r3
 80017ec:	4805      	ldr	r0, [pc, #20]	@ (8001804 <MX_TIM5_Init+0xa0>)
 80017ee:	f005 f949 	bl	8006a84 <HAL_TIMEx_MasterConfigSynchronization>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80017f8:	f000 f88e 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80017fc:	bf00      	nop
 80017fe:	3730      	adds	r7, #48	@ 0x30
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	20000248 	.word	0x20000248
 8001808:	40000c00 	.word	0x40000c00

0800180c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b08a      	sub	sp, #40	@ 0x28
 8001810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001812:	f107 0314 	add.w	r3, r7, #20
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	605a      	str	r2, [r3, #4]
 800181c:	609a      	str	r2, [r3, #8]
 800181e:	60da      	str	r2, [r3, #12]
 8001820:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	613b      	str	r3, [r7, #16]
 8001826:	4b39      	ldr	r3, [pc, #228]	@ (800190c <MX_GPIO_Init+0x100>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182a:	4a38      	ldr	r2, [pc, #224]	@ (800190c <MX_GPIO_Init+0x100>)
 800182c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001830:	6313      	str	r3, [r2, #48]	@ 0x30
 8001832:	4b36      	ldr	r3, [pc, #216]	@ (800190c <MX_GPIO_Init+0x100>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001836:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800183a:	613b      	str	r3, [r7, #16]
 800183c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	4b32      	ldr	r3, [pc, #200]	@ (800190c <MX_GPIO_Init+0x100>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001846:	4a31      	ldr	r2, [pc, #196]	@ (800190c <MX_GPIO_Init+0x100>)
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	6313      	str	r3, [r2, #48]	@ 0x30
 800184e:	4b2f      	ldr	r3, [pc, #188]	@ (800190c <MX_GPIO_Init+0x100>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	60bb      	str	r3, [r7, #8]
 800185e:	4b2b      	ldr	r3, [pc, #172]	@ (800190c <MX_GPIO_Init+0x100>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001862:	4a2a      	ldr	r2, [pc, #168]	@ (800190c <MX_GPIO_Init+0x100>)
 8001864:	f043 0302 	orr.w	r3, r3, #2
 8001868:	6313      	str	r3, [r2, #48]	@ 0x30
 800186a:	4b28      	ldr	r3, [pc, #160]	@ (800190c <MX_GPIO_Init+0x100>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	60bb      	str	r3, [r7, #8]
 8001874:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	607b      	str	r3, [r7, #4]
 800187a:	4b24      	ldr	r3, [pc, #144]	@ (800190c <MX_GPIO_Init+0x100>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187e:	4a23      	ldr	r2, [pc, #140]	@ (800190c <MX_GPIO_Init+0x100>)
 8001880:	f043 0310 	orr.w	r3, r3, #16
 8001884:	6313      	str	r3, [r2, #48]	@ 0x30
 8001886:	4b21      	ldr	r3, [pc, #132]	@ (800190c <MX_GPIO_Init+0x100>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188a:	f003 0310 	and.w	r3, r3, #16
 800188e:	607b      	str	r3, [r7, #4]
 8001890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	603b      	str	r3, [r7, #0]
 8001896:	4b1d      	ldr	r3, [pc, #116]	@ (800190c <MX_GPIO_Init+0x100>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189a:	4a1c      	ldr	r2, [pc, #112]	@ (800190c <MX_GPIO_Init+0x100>)
 800189c:	f043 0308 	orr.w	r3, r3, #8
 80018a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018a2:	4b1a      	ldr	r3, [pc, #104]	@ (800190c <MX_GPIO_Init+0x100>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a6:	f003 0308 	and.w	r3, r3, #8
 80018aa:	603b      	str	r3, [r7, #0]
 80018ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LR_Pin|LL_Pin|UL_Pin|UR_Pin, GPIO_PIN_RESET);
 80018ae:	2200      	movs	r2, #0
 80018b0:	f44f 61f0 	mov.w	r1, #1920	@ 0x780
 80018b4:	4816      	ldr	r0, [pc, #88]	@ (8001910 <MX_GPIO_Init+0x104>)
 80018b6:	f002 fa1d 	bl	8003cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, IN1_M1_Pin|IN2_M1_Pin|IN1_M2_Pin|IN2_M2_Pin, GPIO_PIN_RESET);
 80018ba:	2200      	movs	r2, #0
 80018bc:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 80018c0:	4814      	ldr	r0, [pc, #80]	@ (8001914 <MX_GPIO_Init+0x108>)
 80018c2:	f002 fa17 	bl	8003cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LR_Pin LL_Pin UL_Pin UR_Pin */
  GPIO_InitStruct.Pin = LR_Pin|LL_Pin|UL_Pin|UR_Pin;
 80018c6:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 80018ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018cc:	2301      	movs	r3, #1
 80018ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d4:	2300      	movs	r3, #0
 80018d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018d8:	f107 0314 	add.w	r3, r7, #20
 80018dc:	4619      	mov	r1, r3
 80018de:	480c      	ldr	r0, [pc, #48]	@ (8001910 <MX_GPIO_Init+0x104>)
 80018e0:	f001 ff88 	bl	80037f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_M1_Pin IN2_M1_Pin IN1_M2_Pin IN2_M2_Pin */
  GPIO_InitStruct.Pin = IN1_M1_Pin|IN2_M1_Pin|IN1_M2_Pin|IN2_M2_Pin;
 80018e4:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80018e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ea:	2301      	movs	r3, #1
 80018ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f2:	2300      	movs	r3, #0
 80018f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018f6:	f107 0314 	add.w	r3, r7, #20
 80018fa:	4619      	mov	r1, r3
 80018fc:	4805      	ldr	r0, [pc, #20]	@ (8001914 <MX_GPIO_Init+0x108>)
 80018fe:	f001 ff79 	bl	80037f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001902:	bf00      	nop
 8001904:	3728      	adds	r7, #40	@ 0x28
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40023800 	.word	0x40023800
 8001910:	40021000 	.word	0x40021000
 8001914:	40020c00 	.word	0x40020c00

08001918 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800191c:	b672      	cpsid	i
}
 800191e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001920:	bf00      	nop
 8001922:	e7fd      	b.n	8001920 <Error_Handler+0x8>

08001924 <MPU6500_Init>:
#include "stm32f4xx_hal.h"
//#include "stm32f4xx_hal_i2c.h"



void MPU6500_Init(I2C_HandleTypeDef *hi2c){
 8001924:	b580      	push	{r7, lr}
 8001926:	b088      	sub	sp, #32
 8001928:	af04      	add	r7, sp, #16
 800192a:	6078      	str	r0, [r7, #4]
	uint8_t data_clksel = INT_CLK;
 800192c:	2300      	movs	r3, #0
 800192e:	73bb      	strb	r3, [r7, #14]
//	uint8_t data_dlpf = 0x03;
	uint8_t data_smprt = 0x13;			//sample_rate: 50Hz
 8001930:	2313      	movs	r3, #19
 8001932:	737b      	strb	r3, [r7, #13]
	uint8_t data_accel = FS_ACCEL_2G;
 8001934:	2300      	movs	r3, #0
 8001936:	733b      	strb	r3, [r7, #12]
	uint8_t data_gyro = FS_GYRO_250;
 8001938:	2300      	movs	r3, #0
 800193a:	72fb      	strb	r3, [r7, #11]

	HAL_StatusTypeDef check = HAL_I2C_IsDeviceReady(hi2c, (ADDR_DEVICE << 1), 10, 100);
 800193c:	2364      	movs	r3, #100	@ 0x64
 800193e:	220a      	movs	r2, #10
 8001940:	21d0      	movs	r1, #208	@ 0xd0
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f002 fe60 	bl	8004608 <HAL_I2C_IsDeviceReady>
 8001948:	4603      	mov	r3, r0
 800194a:	73fb      	strb	r3, [r7, #15]
	if(check == HAL_OK){
 800194c:	7bfb      	ldrb	r3, [r7, #15]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d133      	bne.n	80019ba <MPU6500_Init+0x96>
		HAL_I2C_Mem_Write(hi2c, (ADDR_DEVICE << 1), PWR_MGMT1_REG, 1, &data_clksel, 1, 100);
 8001952:	2364      	movs	r3, #100	@ 0x64
 8001954:	9302      	str	r3, [sp, #8]
 8001956:	2301      	movs	r3, #1
 8001958:	9301      	str	r3, [sp, #4]
 800195a:	f107 030e 	add.w	r3, r7, #14
 800195e:	9300      	str	r3, [sp, #0]
 8001960:	2301      	movs	r3, #1
 8001962:	226b      	movs	r2, #107	@ 0x6b
 8001964:	21d0      	movs	r1, #208	@ 0xd0
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f002 fb22 	bl	8003fb0 <HAL_I2C_Mem_Write>
//		HAL_I2C_Mem_Write(hi2c1, (ADDR_DEVICE << 1), CONFIG_REG, 1, &data_dlpf, 1, 100);
		HAL_I2C_Mem_Write(hi2c, (ADDR_DEVICE << 1), SMPLRT_REG, 1, &data_smprt, 1, 100);
 800196c:	2364      	movs	r3, #100	@ 0x64
 800196e:	9302      	str	r3, [sp, #8]
 8001970:	2301      	movs	r3, #1
 8001972:	9301      	str	r3, [sp, #4]
 8001974:	f107 030d 	add.w	r3, r7, #13
 8001978:	9300      	str	r3, [sp, #0]
 800197a:	2301      	movs	r3, #1
 800197c:	2219      	movs	r2, #25
 800197e:	21d0      	movs	r1, #208	@ 0xd0
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f002 fb15 	bl	8003fb0 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(hi2c, (ADDR_DEVICE << 1), ACCEL_CONFIG_REG, 1, &data_accel, 1, 100);
 8001986:	2364      	movs	r3, #100	@ 0x64
 8001988:	9302      	str	r3, [sp, #8]
 800198a:	2301      	movs	r3, #1
 800198c:	9301      	str	r3, [sp, #4]
 800198e:	f107 030c 	add.w	r3, r7, #12
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	2301      	movs	r3, #1
 8001996:	221c      	movs	r2, #28
 8001998:	21d0      	movs	r1, #208	@ 0xd0
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f002 fb08 	bl	8003fb0 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(hi2c, (ADDR_DEVICE << 1), GYRO_CONFIG_REG, 1, &data_gyro, 1, 100);
 80019a0:	2364      	movs	r3, #100	@ 0x64
 80019a2:	9302      	str	r3, [sp, #8]
 80019a4:	2301      	movs	r3, #1
 80019a6:	9301      	str	r3, [sp, #4]
 80019a8:	f107 030b 	add.w	r3, r7, #11
 80019ac:	9300      	str	r3, [sp, #0]
 80019ae:	2301      	movs	r3, #1
 80019b0:	221b      	movs	r2, #27
 80019b2:	21d0      	movs	r1, #208	@ 0xd0
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f002 fafb 	bl	8003fb0 <HAL_I2C_Mem_Write>
	}
}
 80019ba:	bf00      	nop
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <MPU6500_Raw_Gyro>:


void MPU6500_Raw_Gyro(I2C_HandleTypeDef *hi2c, int16_t* raw_gyro){
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b088      	sub	sp, #32
 80019c6:	af04      	add	r7, sp, #16
 80019c8:	6078      	str	r0, [r7, #4]
 80019ca:	6039      	str	r1, [r7, #0]
	uint8_t Gyro_buffer[6];
	HAL_I2C_Mem_Read(hi2c, (ADDR_DEVICE << 1), GYRO_MEASUR, 1, Gyro_buffer, 6, 100);
 80019cc:	2364      	movs	r3, #100	@ 0x64
 80019ce:	9302      	str	r3, [sp, #8]
 80019d0:	2306      	movs	r3, #6
 80019d2:	9301      	str	r3, [sp, #4]
 80019d4:	f107 0308 	add.w	r3, r7, #8
 80019d8:	9300      	str	r3, [sp, #0]
 80019da:	2301      	movs	r3, #1
 80019dc:	2243      	movs	r2, #67	@ 0x43
 80019de:	21d0      	movs	r1, #208	@ 0xd0
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f002 fbdf 	bl	80041a4 <HAL_I2C_Mem_Read>
	raw_gyro[0] = (int16_t)((Gyro_buffer[0] << 8) | Gyro_buffer[1]);
 80019e6:	7a3b      	ldrb	r3, [r7, #8]
 80019e8:	b21b      	sxth	r3, r3
 80019ea:	021b      	lsls	r3, r3, #8
 80019ec:	b21a      	sxth	r2, r3
 80019ee:	7a7b      	ldrb	r3, [r7, #9]
 80019f0:	b21b      	sxth	r3, r3
 80019f2:	4313      	orrs	r3, r2
 80019f4:	b21a      	sxth	r2, r3
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	801a      	strh	r2, [r3, #0]
	raw_gyro[1] = (int16_t)((Gyro_buffer[2] << 8) | Gyro_buffer[3]);
 80019fa:	7abb      	ldrb	r3, [r7, #10]
 80019fc:	b21b      	sxth	r3, r3
 80019fe:	021b      	lsls	r3, r3, #8
 8001a00:	b219      	sxth	r1, r3
 8001a02:	7afb      	ldrb	r3, [r7, #11]
 8001a04:	b21a      	sxth	r2, r3
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	3302      	adds	r3, #2
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	b212      	sxth	r2, r2
 8001a0e:	801a      	strh	r2, [r3, #0]
	raw_gyro[2] = (int16_t)((Gyro_buffer[4] << 8) | Gyro_buffer[5]);
 8001a10:	7b3b      	ldrb	r3, [r7, #12]
 8001a12:	b21b      	sxth	r3, r3
 8001a14:	021b      	lsls	r3, r3, #8
 8001a16:	b219      	sxth	r1, r3
 8001a18:	7b7b      	ldrb	r3, [r7, #13]
 8001a1a:	b21a      	sxth	r2, r3
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	3304      	adds	r3, #4
 8001a20:	430a      	orrs	r2, r1
 8001a22:	b212      	sxth	r2, r2
 8001a24:	801a      	strh	r2, [r3, #0]

}
 8001a26:	bf00      	nop
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <MPU6500_Raw_Accel>:

void MPU6500_Raw_Accel(I2C_HandleTypeDef *hi2c, int16_t* raw_accel){
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b088      	sub	sp, #32
 8001a32:	af04      	add	r7, sp, #16
 8001a34:	6078      	str	r0, [r7, #4]
 8001a36:	6039      	str	r1, [r7, #0]
	uint8_t Accel_buffer[6];
	HAL_I2C_Mem_Read(hi2c, (ADDR_DEVICE << 1), ACCEL_MEASUR, 1, Accel_buffer, 6, 100);
 8001a38:	2364      	movs	r3, #100	@ 0x64
 8001a3a:	9302      	str	r3, [sp, #8]
 8001a3c:	2306      	movs	r3, #6
 8001a3e:	9301      	str	r3, [sp, #4]
 8001a40:	f107 0308 	add.w	r3, r7, #8
 8001a44:	9300      	str	r3, [sp, #0]
 8001a46:	2301      	movs	r3, #1
 8001a48:	223b      	movs	r2, #59	@ 0x3b
 8001a4a:	21d0      	movs	r1, #208	@ 0xd0
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f002 fba9 	bl	80041a4 <HAL_I2C_Mem_Read>
	raw_accel[0] = (int16_t)((Accel_buffer[0] << 8) | Accel_buffer[1]);
 8001a52:	7a3b      	ldrb	r3, [r7, #8]
 8001a54:	b21b      	sxth	r3, r3
 8001a56:	021b      	lsls	r3, r3, #8
 8001a58:	b21a      	sxth	r2, r3
 8001a5a:	7a7b      	ldrb	r3, [r7, #9]
 8001a5c:	b21b      	sxth	r3, r3
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	b21a      	sxth	r2, r3
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	801a      	strh	r2, [r3, #0]
	raw_accel[1] = (int16_t)((Accel_buffer[2] << 8) | Accel_buffer[3]);
 8001a66:	7abb      	ldrb	r3, [r7, #10]
 8001a68:	b21b      	sxth	r3, r3
 8001a6a:	021b      	lsls	r3, r3, #8
 8001a6c:	b219      	sxth	r1, r3
 8001a6e:	7afb      	ldrb	r3, [r7, #11]
 8001a70:	b21a      	sxth	r2, r3
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	3302      	adds	r3, #2
 8001a76:	430a      	orrs	r2, r1
 8001a78:	b212      	sxth	r2, r2
 8001a7a:	801a      	strh	r2, [r3, #0]
	raw_accel[2]= (int16_t)((Accel_buffer[4] << 8) | Accel_buffer[5]);
 8001a7c:	7b3b      	ldrb	r3, [r7, #12]
 8001a7e:	b21b      	sxth	r3, r3
 8001a80:	021b      	lsls	r3, r3, #8
 8001a82:	b219      	sxth	r1, r3
 8001a84:	7b7b      	ldrb	r3, [r7, #13]
 8001a86:	b21a      	sxth	r2, r3
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	3304      	adds	r3, #4
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	b212      	sxth	r2, r2
 8001a90:	801a      	strh	r2, [r3, #0]

}
 8001a92:	bf00      	nop
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
	...

08001a9c <MPU6500_Calibrate>:

void MPU6500_Calibrate(I2C_HandleTypeDef *hi2c, MPU6500_t* mpu, uint16_t num_sample){
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b090      	sub	sp, #64	@ 0x40
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	80fb      	strh	r3, [r7, #6]
	int32_t total_gx = 0, total_gy = 0, total_gz = 0, total_ax = 0, total_ay = 0, total_az = 0;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001aae:	2300      	movs	r3, #0
 8001ab0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	633b      	str	r3, [r7, #48]	@ 0x30
 8001aba:	2300      	movs	r3, #0
 8001abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001abe:	2300      	movs	r3, #0
 8001ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
	int16_t raw_gyro[3], raw_accel[3];
	for(int i = 0; i < num_sample; i++){
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ac6:	e032      	b.n	8001b2e <MPU6500_Calibrate+0x92>
		MPU6500_Raw_Gyro(hi2c, raw_gyro);
 8001ac8:	f107 031c 	add.w	r3, r7, #28
 8001acc:	4619      	mov	r1, r3
 8001ace:	68f8      	ldr	r0, [r7, #12]
 8001ad0:	f7ff ff77 	bl	80019c2 <MPU6500_Raw_Gyro>
		MPU6500_Raw_Accel(hi2c, raw_accel);
 8001ad4:	f107 0314 	add.w	r3, r7, #20
 8001ad8:	4619      	mov	r1, r3
 8001ada:	68f8      	ldr	r0, [r7, #12]
 8001adc:	f7ff ffa7 	bl	8001a2e <MPU6500_Raw_Accel>

		total_gx += raw_gyro[0];
 8001ae0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ae8:	4413      	add	r3, r2
 8001aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
		total_gy += raw_gyro[1];
 8001aec:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001af0:	461a      	mov	r2, r3
 8001af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001af4:	4413      	add	r3, r2
 8001af6:	63bb      	str	r3, [r7, #56]	@ 0x38
		total_gz += raw_gyro[2];
 8001af8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001afc:	461a      	mov	r2, r3
 8001afe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b00:	4413      	add	r3, r2
 8001b02:	637b      	str	r3, [r7, #52]	@ 0x34

		total_ax += raw_accel[0];
 8001b04:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b0c:	4413      	add	r3, r2
 8001b0e:	633b      	str	r3, [r7, #48]	@ 0x30
		total_ay += raw_accel[1];
 8001b10:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b14:	461a      	mov	r2, r3
 8001b16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b18:	4413      	add	r3, r2
 8001b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		total_az += raw_accel[2];
 8001b1c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001b20:	461a      	mov	r2, r3
 8001b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b24:	4413      	add	r3, r2
 8001b26:	62bb      	str	r3, [r7, #40]	@ 0x28
	for(int i = 0; i < num_sample; i++){
 8001b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b2e:	88fb      	ldrh	r3, [r7, #6]
 8001b30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b32:	429a      	cmp	r2, r3
 8001b34:	dbc8      	blt.n	8001ac8 <MPU6500_Calibrate+0x2c>
	}
	mpu->offset_gx = (float)total_gx/num_sample;
 8001b36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b38:	ee07 3a90 	vmov	s15, r3
 8001b3c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001b40:	88fb      	ldrh	r3, [r7, #6]
 8001b42:	ee07 3a90 	vmov	s15, r3
 8001b46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	edc3 7a07 	vstr	s15, [r3, #28]
	mpu->offset_gy = (float)total_gy/num_sample;
 8001b54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b56:	ee07 3a90 	vmov	s15, r3
 8001b5a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001b5e:	88fb      	ldrh	r3, [r7, #6]
 8001b60:	ee07 3a90 	vmov	s15, r3
 8001b64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	edc3 7a08 	vstr	s15, [r3, #32]
	mpu->offset_gz = (float)total_gz/num_sample;
 8001b72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b74:	ee07 3a90 	vmov	s15, r3
 8001b78:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001b7c:	88fb      	ldrh	r3, [r7, #6]
 8001b7e:	ee07 3a90 	vmov	s15, r3
 8001b82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	mpu->offset_ax = (float)total_ax/num_sample;
 8001b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b92:	ee07 3a90 	vmov	s15, r3
 8001b96:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001b9a:	88fb      	ldrh	r3, [r7, #6]
 8001b9c:	ee07 3a90 	vmov	s15, r3
 8001ba0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ba4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	mpu->offset_ay = (float)total_ay/num_sample;
 8001bae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bb0:	ee07 3a90 	vmov	s15, r3
 8001bb4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001bb8:	88fb      	ldrh	r3, [r7, #6]
 8001bba:	ee07 3a90 	vmov	s15, r3
 8001bbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	mpu->offset_az = (float)total_az/num_sample + 16384.0;
 8001bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bce:	ee07 3a90 	vmov	s15, r3
 8001bd2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001bd6:	88fb      	ldrh	r3, [r7, #6]
 8001bd8:	ee07 3a90 	vmov	s15, r3
 8001bdc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001be0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001be4:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8001bfc <MPU6500_Calibrate+0x160>
 8001be8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
}
 8001bf2:	bf00      	nop
 8001bf4:	3740      	adds	r7, #64	@ 0x40
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	46800000 	.word	0x46800000

08001c00 <MPU6500_Read_Data>:

void MPU6500_Read_Data(I2C_HandleTypeDef *hi2c, MPU6500_t* mpu){
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
	int16_t raw_gyro[3], raw_accel[3];
	MPU6500_Raw_Gyro(hi2c, raw_gyro);
 8001c0a:	f107 0310 	add.w	r3, r7, #16
 8001c0e:	4619      	mov	r1, r3
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f7ff fed6 	bl	80019c2 <MPU6500_Raw_Gyro>
	MPU6500_Raw_Accel(hi2c, raw_accel);
 8001c16:	f107 0308 	add.w	r3, r7, #8
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f7ff ff06 	bl	8001a2e <MPU6500_Raw_Accel>

	mpu->gx = ((float)raw_gyro[0] - mpu->offset_gx)/131.0;
 8001c22:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001c26:	ee07 3a90 	vmov	s15, r3
 8001c2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	edd3 7a07 	vldr	s15, [r3, #28]
 8001c34:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c38:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8001d04 <MPU6500_Read_Data+0x104>
 8001c3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	edc3 7a01 	vstr	s15, [r3, #4]
	mpu->gy = ((float)raw_gyro[1] - mpu->offset_gy)/131.0;
 8001c46:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001c4a:	ee07 3a90 	vmov	s15, r3
 8001c4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	edd3 7a08 	vldr	s15, [r3, #32]
 8001c58:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c5c:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8001d04 <MPU6500_Read_Data+0x104>
 8001c60:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	edc3 7a02 	vstr	s15, [r3, #8]
	mpu->gz = ((float)raw_gyro[2] - mpu->offset_gz)/131.0;
 8001c6a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c6e:	ee07 3a90 	vmov	s15, r3
 8001c72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001c7c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c80:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8001d04 <MPU6500_Read_Data+0x104>
 8001c84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	edc3 7a03 	vstr	s15, [r3, #12]
	mpu->ax = ((float)raw_accel[0] - mpu->offset_ax)/16384.0;
 8001c8e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001c92:	ee07 3a90 	vmov	s15, r3
 8001c96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001ca0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ca4:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8001d08 <MPU6500_Read_Data+0x108>
 8001ca8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	edc3 7a04 	vstr	s15, [r3, #16]
	mpu->ay = ((float)raw_accel[1] - mpu->offset_ay)/16384.0;
 8001cb2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001cb6:	ee07 3a90 	vmov	s15, r3
 8001cba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001cc4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001cc8:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8001d08 <MPU6500_Read_Data+0x108>
 8001ccc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	edc3 7a05 	vstr	s15, [r3, #20]
	mpu->az = ((float)raw_accel[2] - mpu->offset_az)/16384.0;
 8001cd6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001cda:	ee07 3a90 	vmov	s15, r3
 8001cde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001ce8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001cec:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8001d08 <MPU6500_Read_Data+0x108>
 8001cf0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	edc3 7a06 	vstr	s15, [r3, #24]
}
 8001cfa:	bf00      	nop
 8001cfc:	3718      	adds	r7, #24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	43030000 	.word	0x43030000
 8001d08:	46800000 	.word	0x46800000
 8001d0c:	00000000 	.word	0x00000000

08001d10 <Angle_CompFilter>:


void Angle_CompFilter(MPU6500_t* mpu, float dt, float alpha){
 8001d10:	b5b0      	push	{r4, r5, r7, lr}
 8001d12:	ed2d 8b02 	vpush	{d8}
 8001d16:	b08c      	sub	sp, #48	@ 0x30
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001d20:	edc7 0a01 	vstr	s1, [r7, #4]
	float gx = mpu->gx;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
	float gy = mpu->gy;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	62bb      	str	r3, [r7, #40]	@ 0x28
	float gz = mpu->gz;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	627b      	str	r3, [r7, #36]	@ 0x24
	float ax = mpu->ax;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	623b      	str	r3, [r7, #32]
	float ay = mpu->ay;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	695b      	ldr	r3, [r3, #20]
 8001d40:	61fb      	str	r3, [r7, #28]
	float az = mpu->az;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	61bb      	str	r3, [r7, #24]

	float accel_pitch = (atan2f(ax, sqrt(az*az + ay*ay)))*180.0/3.14;
 8001d48:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d4c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001d50:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d54:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001d58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d5c:	ee17 0a90 	vmov	r0, s15
 8001d60:	f7fe fb9e 	bl	80004a0 <__aeabi_f2d>
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	ec43 2b10 	vmov	d0, r2, r3
 8001d6c:	f004 ff90 	bl	8006c90 <sqrt>
 8001d70:	ec53 2b10 	vmov	r2, r3, d0
 8001d74:	4610      	mov	r0, r2
 8001d76:	4619      	mov	r1, r3
 8001d78:	f7fe fe9a 	bl	8000ab0 <__aeabi_d2f>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	ee00 3a90 	vmov	s1, r3
 8001d82:	ed97 0a08 	vldr	s0, [r7, #32]
 8001d86:	f004 ffaf 	bl	8006ce8 <atan2f>
 8001d8a:	ee10 3a10 	vmov	r3, s0
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7fe fb86 	bl	80004a0 <__aeabi_f2d>
 8001d94:	f04f 0200 	mov.w	r2, #0
 8001d98:	4b61      	ldr	r3, [pc, #388]	@ (8001f20 <Angle_CompFilter+0x210>)
 8001d9a:	f7fe fbd9 	bl	8000550 <__aeabi_dmul>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
 8001da2:	4610      	mov	r0, r2
 8001da4:	4619      	mov	r1, r3
 8001da6:	a35a      	add	r3, pc, #360	@ (adr r3, 8001f10 <Angle_CompFilter+0x200>)
 8001da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dac:	f7fe fcfa 	bl	80007a4 <__aeabi_ddiv>
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	4610      	mov	r0, r2
 8001db6:	4619      	mov	r1, r3
 8001db8:	f7fe fe7a 	bl	8000ab0 <__aeabi_d2f>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	617b      	str	r3, [r7, #20]
	float accel_roll  = (atan2f(-ay, sqrt(az*az + ax*ax)))*180.0/3.14;
 8001dc0:	edd7 7a07 	vldr	s15, [r7, #28]
 8001dc4:	eeb1 8a67 	vneg.f32	s16, s15
 8001dc8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001dcc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001dd0:	edd7 7a08 	vldr	s15, [r7, #32]
 8001dd4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001dd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ddc:	ee17 0a90 	vmov	r0, s15
 8001de0:	f7fe fb5e 	bl	80004a0 <__aeabi_f2d>
 8001de4:	4602      	mov	r2, r0
 8001de6:	460b      	mov	r3, r1
 8001de8:	ec43 2b10 	vmov	d0, r2, r3
 8001dec:	f004 ff50 	bl	8006c90 <sqrt>
 8001df0:	ec53 2b10 	vmov	r2, r3, d0
 8001df4:	4610      	mov	r0, r2
 8001df6:	4619      	mov	r1, r3
 8001df8:	f7fe fe5a 	bl	8000ab0 <__aeabi_d2f>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	ee00 3a90 	vmov	s1, r3
 8001e02:	eeb0 0a48 	vmov.f32	s0, s16
 8001e06:	f004 ff6f 	bl	8006ce8 <atan2f>
 8001e0a:	ee10 3a10 	vmov	r3, s0
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7fe fb46 	bl	80004a0 <__aeabi_f2d>
 8001e14:	f04f 0200 	mov.w	r2, #0
 8001e18:	4b41      	ldr	r3, [pc, #260]	@ (8001f20 <Angle_CompFilter+0x210>)
 8001e1a:	f7fe fb99 	bl	8000550 <__aeabi_dmul>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	460b      	mov	r3, r1
 8001e22:	4610      	mov	r0, r2
 8001e24:	4619      	mov	r1, r3
 8001e26:	a33a      	add	r3, pc, #232	@ (adr r3, 8001f10 <Angle_CompFilter+0x200>)
 8001e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2c:	f7fe fcba 	bl	80007a4 <__aeabi_ddiv>
 8001e30:	4602      	mov	r2, r0
 8001e32:	460b      	mov	r3, r1
 8001e34:	4610      	mov	r0, r2
 8001e36:	4619      	mov	r1, r3
 8001e38:	f7fe fe3a 	bl	8000ab0 <__aeabi_d2f>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	613b      	str	r3, [r7, #16]
//	float accel_roll  = (atan2f(ay, az))*180.0/3.14;

	mpu->pitch = alpha*(mpu->pitch + gy*dt) + (1-alpha)*accel_pitch;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8001e46:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8001e4a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e52:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e56:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001e62:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e66:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001e6a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
	mpu->roll = alpha*(mpu->roll + gx*dt) + (1-alpha)*accel_roll;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8001e82:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8001e86:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e92:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001e9e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ea2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001ea6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001eaa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
	mpu->yaw += gz*dt*(180.0f / 3.14);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7fe faef 	bl	80004a0 <__aeabi_f2d>
 8001ec2:	4604      	mov	r4, r0
 8001ec4:	460d      	mov	r5, r1
 8001ec6:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001eca:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ed2:	ee17 0a90 	vmov	r0, s15
 8001ed6:	f7fe fae3 	bl	80004a0 <__aeabi_f2d>
 8001eda:	a30f      	add	r3, pc, #60	@ (adr r3, 8001f18 <Angle_CompFilter+0x208>)
 8001edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee0:	f7fe fb36 	bl	8000550 <__aeabi_dmul>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	4620      	mov	r0, r4
 8001eea:	4629      	mov	r1, r5
 8001eec:	f7fe f97a 	bl	80001e4 <__adddf3>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	4610      	mov	r0, r2
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	f7fe fdda 	bl	8000ab0 <__aeabi_d2f>
 8001efc:	4602      	mov	r2, r0
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001f02:	bf00      	nop
 8001f04:	3730      	adds	r7, #48	@ 0x30
 8001f06:	46bd      	mov	sp, r7
 8001f08:	ecbd 8b02 	vpop	{d8}
 8001f0c:	bdb0      	pop	{r4, r5, r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	51eb851f 	.word	0x51eb851f
 8001f14:	40091eb8 	.word	0x40091eb8
 8001f18:	61d59ae7 	.word	0x61d59ae7
 8001f1c:	404ca994 	.word	0x404ca994
 8001f20:	40668000 	.word	0x40668000

08001f24 <Read_Angel>:

void Read_Angel(MPU6500_t* mpu, volatile float* pitch, volatile float*roll, volatile float *yaw){
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
 8001f30:	603b      	str	r3, [r7, #0]

	*pitch = mpu->pitch;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	601a      	str	r2, [r3, #0]
	*roll = mpu->roll;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	601a      	str	r2, [r3, #0]
	*yaw = mpu->yaw;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	601a      	str	r2, [r3, #0]
}
 8001f4a:	bf00      	nop
 8001f4c:	3714      	adds	r7, #20
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
	...

08001f58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f5e:	2300      	movs	r3, #0
 8001f60:	607b      	str	r3, [r7, #4]
 8001f62:	4b10      	ldr	r3, [pc, #64]	@ (8001fa4 <HAL_MspInit+0x4c>)
 8001f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f66:	4a0f      	ldr	r2, [pc, #60]	@ (8001fa4 <HAL_MspInit+0x4c>)
 8001f68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001fa4 <HAL_MspInit+0x4c>)
 8001f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f76:	607b      	str	r3, [r7, #4]
 8001f78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	603b      	str	r3, [r7, #0]
 8001f7e:	4b09      	ldr	r3, [pc, #36]	@ (8001fa4 <HAL_MspInit+0x4c>)
 8001f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f82:	4a08      	ldr	r2, [pc, #32]	@ (8001fa4 <HAL_MspInit+0x4c>)
 8001f84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f88:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f8a:	4b06      	ldr	r3, [pc, #24]	@ (8001fa4 <HAL_MspInit+0x4c>)
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f92:	603b      	str	r3, [r7, #0]
 8001f94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	40023800 	.word	0x40023800

08001fa8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08a      	sub	sp, #40	@ 0x28
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb0:	f107 0314 	add.w	r3, r7, #20
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	609a      	str	r2, [r3, #8]
 8001fbc:	60da      	str	r2, [r3, #12]
 8001fbe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a17      	ldr	r2, [pc, #92]	@ (8002024 <HAL_ADC_MspInit+0x7c>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d127      	bne.n	800201a <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	613b      	str	r3, [r7, #16]
 8001fce:	4b16      	ldr	r3, [pc, #88]	@ (8002028 <HAL_ADC_MspInit+0x80>)
 8001fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd2:	4a15      	ldr	r2, [pc, #84]	@ (8002028 <HAL_ADC_MspInit+0x80>)
 8001fd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fda:	4b13      	ldr	r3, [pc, #76]	@ (8002028 <HAL_ADC_MspInit+0x80>)
 8001fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fe2:	613b      	str	r3, [r7, #16]
 8001fe4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60fb      	str	r3, [r7, #12]
 8001fea:	4b0f      	ldr	r3, [pc, #60]	@ (8002028 <HAL_ADC_MspInit+0x80>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fee:	4a0e      	ldr	r2, [pc, #56]	@ (8002028 <HAL_ADC_MspInit+0x80>)
 8001ff0:	f043 0302 	orr.w	r3, r3, #2
 8001ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ff6:	4b0c      	ldr	r3, [pc, #48]	@ (8002028 <HAL_ADC_MspInit+0x80>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002002:	2301      	movs	r3, #1
 8002004:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002006:	2303      	movs	r3, #3
 8002008:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200a:	2300      	movs	r3, #0
 800200c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800200e:	f107 0314 	add.w	r3, r7, #20
 8002012:	4619      	mov	r1, r3
 8002014:	4805      	ldr	r0, [pc, #20]	@ (800202c <HAL_ADC_MspInit+0x84>)
 8002016:	f001 fbed 	bl	80037f4 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800201a:	bf00      	nop
 800201c:	3728      	adds	r7, #40	@ 0x28
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	40012000 	.word	0x40012000
 8002028:	40023800 	.word	0x40023800
 800202c:	40020400 	.word	0x40020400

08002030 <HAL_ADC_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a08      	ldr	r2, [pc, #32]	@ (8002060 <HAL_ADC_MspDeInit+0x30>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d109      	bne.n	8002056 <HAL_ADC_MspDeInit+0x26>
  {
    /* USER CODE BEGIN ADC1_MspDeInit 0 */

    /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 8002042:	4b08      	ldr	r3, [pc, #32]	@ (8002064 <HAL_ADC_MspDeInit+0x34>)
 8002044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002046:	4a07      	ldr	r2, [pc, #28]	@ (8002064 <HAL_ADC_MspDeInit+0x34>)
 8002048:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800204c:	6453      	str	r3, [r2, #68]	@ 0x44

    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_0);
 800204e:	2101      	movs	r1, #1
 8002050:	4805      	ldr	r0, [pc, #20]	@ (8002068 <HAL_ADC_MspDeInit+0x38>)
 8002052:	f001 fd53 	bl	8003afc <HAL_GPIO_DeInit>
    /* USER CODE BEGIN ADC1_MspDeInit 1 */

    /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40012000 	.word	0x40012000
 8002064:	40023800 	.word	0x40023800
 8002068:	40020400 	.word	0x40020400

0800206c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b08a      	sub	sp, #40	@ 0x28
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002074:	f107 0314 	add.w	r3, r7, #20
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	60da      	str	r2, [r3, #12]
 8002082:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a19      	ldr	r2, [pc, #100]	@ (80020f0 <HAL_I2C_MspInit+0x84>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d12b      	bne.n	80020e6 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	613b      	str	r3, [r7, #16]
 8002092:	4b18      	ldr	r3, [pc, #96]	@ (80020f4 <HAL_I2C_MspInit+0x88>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002096:	4a17      	ldr	r2, [pc, #92]	@ (80020f4 <HAL_I2C_MspInit+0x88>)
 8002098:	f043 0302 	orr.w	r3, r3, #2
 800209c:	6313      	str	r3, [r2, #48]	@ 0x30
 800209e:	4b15      	ldr	r3, [pc, #84]	@ (80020f4 <HAL_I2C_MspInit+0x88>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	613b      	str	r3, [r7, #16]
 80020a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020aa:	23c0      	movs	r3, #192	@ 0xc0
 80020ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020ae:	2312      	movs	r3, #18
 80020b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b2:	2300      	movs	r3, #0
 80020b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b6:	2303      	movs	r3, #3
 80020b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020ba:	2304      	movs	r3, #4
 80020bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020be:	f107 0314 	add.w	r3, r7, #20
 80020c2:	4619      	mov	r1, r3
 80020c4:	480c      	ldr	r0, [pc, #48]	@ (80020f8 <HAL_I2C_MspInit+0x8c>)
 80020c6:	f001 fb95 	bl	80037f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	60fb      	str	r3, [r7, #12]
 80020ce:	4b09      	ldr	r3, [pc, #36]	@ (80020f4 <HAL_I2C_MspInit+0x88>)
 80020d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d2:	4a08      	ldr	r2, [pc, #32]	@ (80020f4 <HAL_I2C_MspInit+0x88>)
 80020d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80020d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80020da:	4b06      	ldr	r3, [pc, #24]	@ (80020f4 <HAL_I2C_MspInit+0x88>)
 80020dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020e2:	60fb      	str	r3, [r7, #12]
 80020e4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80020e6:	bf00      	nop
 80020e8:	3728      	adds	r7, #40	@ 0x28
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	40005400 	.word	0x40005400
 80020f4:	40023800 	.word	0x40023800
 80020f8:	40020400 	.word	0x40020400

080020fc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a0e      	ldr	r2, [pc, #56]	@ (8002144 <HAL_TIM_Base_MspInit+0x48>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d115      	bne.n	800213a <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	4b0d      	ldr	r3, [pc, #52]	@ (8002148 <HAL_TIM_Base_MspInit+0x4c>)
 8002114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002116:	4a0c      	ldr	r2, [pc, #48]	@ (8002148 <HAL_TIM_Base_MspInit+0x4c>)
 8002118:	f043 0301 	orr.w	r3, r3, #1
 800211c:	6453      	str	r3, [r2, #68]	@ 0x44
 800211e:	4b0a      	ldr	r3, [pc, #40]	@ (8002148 <HAL_TIM_Base_MspInit+0x4c>)
 8002120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800212a:	2200      	movs	r2, #0
 800212c:	2100      	movs	r1, #0
 800212e:	2019      	movs	r0, #25
 8002130:	f001 fb29 	bl	8003786 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002134:	2019      	movs	r0, #25
 8002136:	f001 fb42 	bl	80037be <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 800213a:	bf00      	nop
 800213c:	3710      	adds	r7, #16
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40010000 	.word	0x40010000
 8002148:	40023800 	.word	0x40023800

0800214c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800215c:	d10e      	bne.n	800217c <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	4b13      	ldr	r3, [pc, #76]	@ (80021b0 <HAL_TIM_PWM_MspInit+0x64>)
 8002164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002166:	4a12      	ldr	r2, [pc, #72]	@ (80021b0 <HAL_TIM_PWM_MspInit+0x64>)
 8002168:	f043 0301 	orr.w	r3, r3, #1
 800216c:	6413      	str	r3, [r2, #64]	@ 0x40
 800216e:	4b10      	ldr	r3, [pc, #64]	@ (80021b0 <HAL_TIM_PWM_MspInit+0x64>)
 8002170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	60fb      	str	r3, [r7, #12]
 8002178:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 800217a:	e012      	b.n	80021a2 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM4)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a0c      	ldr	r2, [pc, #48]	@ (80021b4 <HAL_TIM_PWM_MspInit+0x68>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d10d      	bne.n	80021a2 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	60bb      	str	r3, [r7, #8]
 800218a:	4b09      	ldr	r3, [pc, #36]	@ (80021b0 <HAL_TIM_PWM_MspInit+0x64>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218e:	4a08      	ldr	r2, [pc, #32]	@ (80021b0 <HAL_TIM_PWM_MspInit+0x64>)
 8002190:	f043 0304 	orr.w	r3, r3, #4
 8002194:	6413      	str	r3, [r2, #64]	@ 0x40
 8002196:	4b06      	ldr	r3, [pc, #24]	@ (80021b0 <HAL_TIM_PWM_MspInit+0x64>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219a:	f003 0304 	and.w	r3, r3, #4
 800219e:	60bb      	str	r3, [r7, #8]
 80021a0:	68bb      	ldr	r3, [r7, #8]
}
 80021a2:	bf00      	nop
 80021a4:	3714      	adds	r7, #20
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	40023800 	.word	0x40023800
 80021b4:	40000800 	.word	0x40000800

080021b8 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08c      	sub	sp, #48	@ 0x30
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c0:	f107 031c 	add.w	r3, r7, #28
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	60da      	str	r2, [r3, #12]
 80021ce:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a32      	ldr	r2, [pc, #200]	@ (80022a0 <HAL_TIM_Encoder_MspInit+0xe8>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d12c      	bne.n	8002234 <HAL_TIM_Encoder_MspInit+0x7c>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021da:	2300      	movs	r3, #0
 80021dc:	61bb      	str	r3, [r7, #24]
 80021de:	4b31      	ldr	r3, [pc, #196]	@ (80022a4 <HAL_TIM_Encoder_MspInit+0xec>)
 80021e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e2:	4a30      	ldr	r2, [pc, #192]	@ (80022a4 <HAL_TIM_Encoder_MspInit+0xec>)
 80021e4:	f043 0302 	orr.w	r3, r3, #2
 80021e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80021ea:	4b2e      	ldr	r3, [pc, #184]	@ (80022a4 <HAL_TIM_Encoder_MspInit+0xec>)
 80021ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	61bb      	str	r3, [r7, #24]
 80021f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f6:	2300      	movs	r3, #0
 80021f8:	617b      	str	r3, [r7, #20]
 80021fa:	4b2a      	ldr	r3, [pc, #168]	@ (80022a4 <HAL_TIM_Encoder_MspInit+0xec>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fe:	4a29      	ldr	r2, [pc, #164]	@ (80022a4 <HAL_TIM_Encoder_MspInit+0xec>)
 8002200:	f043 0301 	orr.w	r3, r3, #1
 8002204:	6313      	str	r3, [r2, #48]	@ 0x30
 8002206:	4b27      	ldr	r3, [pc, #156]	@ (80022a4 <HAL_TIM_Encoder_MspInit+0xec>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	617b      	str	r3, [r7, #20]
 8002210:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002212:	23c0      	movs	r3, #192	@ 0xc0
 8002214:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002216:	2302      	movs	r3, #2
 8002218:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221a:	2300      	movs	r3, #0
 800221c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221e:	2300      	movs	r3, #0
 8002220:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002222:	2302      	movs	r3, #2
 8002224:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002226:	f107 031c 	add.w	r3, r7, #28
 800222a:	4619      	mov	r1, r3
 800222c:	481e      	ldr	r0, [pc, #120]	@ (80022a8 <HAL_TIM_Encoder_MspInit+0xf0>)
 800222e:	f001 fae1 	bl	80037f4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002232:	e030      	b.n	8002296 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM5)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a1c      	ldr	r2, [pc, #112]	@ (80022ac <HAL_TIM_Encoder_MspInit+0xf4>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d12b      	bne.n	8002296 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800223e:	2300      	movs	r3, #0
 8002240:	613b      	str	r3, [r7, #16]
 8002242:	4b18      	ldr	r3, [pc, #96]	@ (80022a4 <HAL_TIM_Encoder_MspInit+0xec>)
 8002244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002246:	4a17      	ldr	r2, [pc, #92]	@ (80022a4 <HAL_TIM_Encoder_MspInit+0xec>)
 8002248:	f043 0308 	orr.w	r3, r3, #8
 800224c:	6413      	str	r3, [r2, #64]	@ 0x40
 800224e:	4b15      	ldr	r3, [pc, #84]	@ (80022a4 <HAL_TIM_Encoder_MspInit+0xec>)
 8002250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002252:	f003 0308 	and.w	r3, r3, #8
 8002256:	613b      	str	r3, [r7, #16]
 8002258:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	4b11      	ldr	r3, [pc, #68]	@ (80022a4 <HAL_TIM_Encoder_MspInit+0xec>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002262:	4a10      	ldr	r2, [pc, #64]	@ (80022a4 <HAL_TIM_Encoder_MspInit+0xec>)
 8002264:	f043 0301 	orr.w	r3, r3, #1
 8002268:	6313      	str	r3, [r2, #48]	@ 0x30
 800226a:	4b0e      	ldr	r3, [pc, #56]	@ (80022a4 <HAL_TIM_Encoder_MspInit+0xec>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002276:	2303      	movs	r3, #3
 8002278:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227a:	2302      	movs	r3, #2
 800227c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227e:	2300      	movs	r3, #0
 8002280:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002282:	2300      	movs	r3, #0
 8002284:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002286:	2302      	movs	r3, #2
 8002288:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800228a:	f107 031c 	add.w	r3, r7, #28
 800228e:	4619      	mov	r1, r3
 8002290:	4805      	ldr	r0, [pc, #20]	@ (80022a8 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002292:	f001 faaf 	bl	80037f4 <HAL_GPIO_Init>
}
 8002296:	bf00      	nop
 8002298:	3730      	adds	r7, #48	@ 0x30
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	40000400 	.word	0x40000400
 80022a4:	40023800 	.word	0x40023800
 80022a8:	40020000 	.word	0x40020000
 80022ac:	40000c00 	.word	0x40000c00

080022b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b08a      	sub	sp, #40	@ 0x28
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b8:	f107 0314 	add.w	r3, r7, #20
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	605a      	str	r2, [r3, #4]
 80022c2:	609a      	str	r2, [r3, #8]
 80022c4:	60da      	str	r2, [r3, #12]
 80022c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022d0:	d11e      	bne.n	8002310 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d2:	2300      	movs	r3, #0
 80022d4:	613b      	str	r3, [r7, #16]
 80022d6:	4b22      	ldr	r3, [pc, #136]	@ (8002360 <HAL_TIM_MspPostInit+0xb0>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022da:	4a21      	ldr	r2, [pc, #132]	@ (8002360 <HAL_TIM_MspPostInit+0xb0>)
 80022dc:	f043 0301 	orr.w	r3, r3, #1
 80022e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022e2:	4b1f      	ldr	r3, [pc, #124]	@ (8002360 <HAL_TIM_MspPostInit+0xb0>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	613b      	str	r3, [r7, #16]
 80022ec:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80022ee:	2320      	movs	r3, #32
 80022f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f2:	2302      	movs	r3, #2
 80022f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f6:	2300      	movs	r3, #0
 80022f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fa:	2300      	movs	r3, #0
 80022fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80022fe:	2301      	movs	r3, #1
 8002300:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002302:	f107 0314 	add.w	r3, r7, #20
 8002306:	4619      	mov	r1, r3
 8002308:	4816      	ldr	r0, [pc, #88]	@ (8002364 <HAL_TIM_MspPostInit+0xb4>)
 800230a:	f001 fa73 	bl	80037f4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800230e:	e023      	b.n	8002358 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a14      	ldr	r2, [pc, #80]	@ (8002368 <HAL_TIM_MspPostInit+0xb8>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d11e      	bne.n	8002358 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800231a:	2300      	movs	r3, #0
 800231c:	60fb      	str	r3, [r7, #12]
 800231e:	4b10      	ldr	r3, [pc, #64]	@ (8002360 <HAL_TIM_MspPostInit+0xb0>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002322:	4a0f      	ldr	r2, [pc, #60]	@ (8002360 <HAL_TIM_MspPostInit+0xb0>)
 8002324:	f043 0308 	orr.w	r3, r3, #8
 8002328:	6313      	str	r3, [r2, #48]	@ 0x30
 800232a:	4b0d      	ldr	r3, [pc, #52]	@ (8002360 <HAL_TIM_MspPostInit+0xb0>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232e:	f003 0308 	and.w	r3, r3, #8
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002336:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800233a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233c:	2302      	movs	r3, #2
 800233e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002340:	2300      	movs	r3, #0
 8002342:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002344:	2300      	movs	r3, #0
 8002346:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002348:	2302      	movs	r3, #2
 800234a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800234c:	f107 0314 	add.w	r3, r7, #20
 8002350:	4619      	mov	r1, r3
 8002352:	4806      	ldr	r0, [pc, #24]	@ (800236c <HAL_TIM_MspPostInit+0xbc>)
 8002354:	f001 fa4e 	bl	80037f4 <HAL_GPIO_Init>
}
 8002358:	bf00      	nop
 800235a:	3728      	adds	r7, #40	@ 0x28
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40023800 	.word	0x40023800
 8002364:	40020000 	.word	0x40020000
 8002368:	40000800 	.word	0x40000800
 800236c:	40020c00 	.word	0x40020c00

08002370 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002374:	bf00      	nop
 8002376:	e7fd      	b.n	8002374 <NMI_Handler+0x4>

08002378 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800237c:	bf00      	nop
 800237e:	e7fd      	b.n	800237c <HardFault_Handler+0x4>

08002380 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002384:	bf00      	nop
 8002386:	e7fd      	b.n	8002384 <MemManage_Handler+0x4>

08002388 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800238c:	bf00      	nop
 800238e:	e7fd      	b.n	800238c <BusFault_Handler+0x4>

08002390 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002394:	bf00      	nop
 8002396:	e7fd      	b.n	8002394 <UsageFault_Handler+0x4>

08002398 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800239c:	bf00      	nop
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr

080023a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023a6:	b480      	push	{r7}
 80023a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023aa:	bf00      	nop
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023b8:	bf00      	nop
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr

080023c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023c6:	f000 fc9b 	bl	8002d00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023ca:	bf00      	nop
 80023cc:	bd80      	pop	{r7, pc}
	...

080023d0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80023d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	state = !state;
 80023d6:	4baa      	ldr	r3, [pc, #680]	@ (8002680 <TIM1_UP_TIM10_IRQHandler+0x2b0>)
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2b00      	cmp	r3, #0
 80023de:	bf0c      	ite	eq
 80023e0:	2301      	moveq	r3, #1
 80023e2:	2300      	movne	r3, #0
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	461a      	mov	r2, r3
 80023e8:	4ba5      	ldr	r3, [pc, #660]	@ (8002680 <TIM1_UP_TIM10_IRQHandler+0x2b0>)
 80023ea:	701a      	strb	r2, [r3, #0]
	Angle_CompFilter(&mpu, dt,  alpha);
 80023ec:	4ba5      	ldr	r3, [pc, #660]	@ (8002684 <TIM1_UP_TIM10_IRQHandler+0x2b4>)
 80023ee:	edd3 7a00 	vldr	s15, [r3]
 80023f2:	4ba5      	ldr	r3, [pc, #660]	@ (8002688 <TIM1_UP_TIM10_IRQHandler+0x2b8>)
 80023f4:	ed93 7a00 	vldr	s14, [r3]
 80023f8:	eef0 0a47 	vmov.f32	s1, s14
 80023fc:	eeb0 0a67 	vmov.f32	s0, s15
 8002400:	48a2      	ldr	r0, [pc, #648]	@ (800268c <TIM1_UP_TIM10_IRQHandler+0x2bc>)
 8002402:	f7ff fc85 	bl	8001d10 <Angle_CompFilter>
	Read_Angel(&mpu, &pitch, &roll, &yaw);
 8002406:	4ba2      	ldr	r3, [pc, #648]	@ (8002690 <TIM1_UP_TIM10_IRQHandler+0x2c0>)
 8002408:	4aa2      	ldr	r2, [pc, #648]	@ (8002694 <TIM1_UP_TIM10_IRQHandler+0x2c4>)
 800240a:	49a3      	ldr	r1, [pc, #652]	@ (8002698 <TIM1_UP_TIM10_IRQHandler+0x2c8>)
 800240c:	489f      	ldr	r0, [pc, #636]	@ (800268c <TIM1_UP_TIM10_IRQHandler+0x2bc>)
 800240e:	f7ff fd89 	bl	8001f24 <Read_Angel>
	if(state_touch ){
 8002412:	4ba2      	ldr	r3, [pc, #648]	@ (800269c <TIM1_UP_TIM10_IRQHandler+0x2cc>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2b00      	cmp	r3, #0
 800241a:	f000 80b1 	beq.w	8002580 <TIM1_UP_TIM10_IRQHandler+0x1b0>
		 * The control signal obtained from the first PID is used as the reference to compute the error for the second PID.
		 * Block diagram of the system simulated in MATLAB Simulink file.
		 * */

		//Calculate control signal for error of position
		pos_control_signal_x = PID_regulator(x_goal - position_x, err_x, int_pos_x, 0.45, 0.001, 0.4, dt);
 800241e:	4ba0      	ldr	r3, [pc, #640]	@ (80026a0 <TIM1_UP_TIM10_IRQHandler+0x2d0>)
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	4ba0      	ldr	r3, [pc, #640]	@ (80026a4 <TIM1_UP_TIM10_IRQHandler+0x2d4>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	1ad4      	subs	r4, r2, r3
 8002428:	4b9f      	ldr	r3, [pc, #636]	@ (80026a8 <TIM1_UP_TIM10_IRQHandler+0x2d8>)
 800242a:	681d      	ldr	r5, [r3, #0]
 800242c:	4b9f      	ldr	r3, [pc, #636]	@ (80026ac <TIM1_UP_TIM10_IRQHandler+0x2dc>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4618      	mov	r0, r3
 8002432:	f7fe f835 	bl	80004a0 <__aeabi_f2d>
 8002436:	4680      	mov	r8, r0
 8002438:	4689      	mov	r9, r1
 800243a:	4b92      	ldr	r3, [pc, #584]	@ (8002684 <TIM1_UP_TIM10_IRQHandler+0x2b4>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4618      	mov	r0, r3
 8002440:	f7fe f82e 	bl	80004a0 <__aeabi_f2d>
 8002444:	4602      	mov	r2, r0
 8002446:	460b      	mov	r3, r1
 8002448:	ec43 2b14 	vmov	d4, r2, r3
 800244c:	ed9f 3b82 	vldr	d3, [pc, #520]	@ 8002658 <TIM1_UP_TIM10_IRQHandler+0x288>
 8002450:	ed9f 2b83 	vldr	d2, [pc, #524]	@ 8002660 <TIM1_UP_TIM10_IRQHandler+0x290>
 8002454:	ed9f 1b84 	vldr	d1, [pc, #528]	@ 8002668 <TIM1_UP_TIM10_IRQHandler+0x298>
 8002458:	ec49 8b10 	vmov	d0, r8, r9
 800245c:	4629      	mov	r1, r5
 800245e:	4620      	mov	r0, r4
 8002460:	f7fe fdc6 	bl	8000ff0 <PID_regulator>
 8002464:	4603      	mov	r3, r0
 8002466:	4a92      	ldr	r2, [pc, #584]	@ (80026b0 <TIM1_UP_TIM10_IRQHandler+0x2e0>)
 8002468:	6013      	str	r3, [r2, #0]
		pos_control_signal_y = PID_regulator(y_goal - position_y, err_y, int_pos_y, 0.45, 0.001, 0.4, dt);
 800246a:	4b92      	ldr	r3, [pc, #584]	@ (80026b4 <TIM1_UP_TIM10_IRQHandler+0x2e4>)
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	4b92      	ldr	r3, [pc, #584]	@ (80026b8 <TIM1_UP_TIM10_IRQHandler+0x2e8>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	1ad4      	subs	r4, r2, r3
 8002474:	4b91      	ldr	r3, [pc, #580]	@ (80026bc <TIM1_UP_TIM10_IRQHandler+0x2ec>)
 8002476:	681d      	ldr	r5, [r3, #0]
 8002478:	4b91      	ldr	r3, [pc, #580]	@ (80026c0 <TIM1_UP_TIM10_IRQHandler+0x2f0>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4618      	mov	r0, r3
 800247e:	f7fe f80f 	bl	80004a0 <__aeabi_f2d>
 8002482:	4680      	mov	r8, r0
 8002484:	4689      	mov	r9, r1
 8002486:	4b7f      	ldr	r3, [pc, #508]	@ (8002684 <TIM1_UP_TIM10_IRQHandler+0x2b4>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4618      	mov	r0, r3
 800248c:	f7fe f808 	bl	80004a0 <__aeabi_f2d>
 8002490:	4602      	mov	r2, r0
 8002492:	460b      	mov	r3, r1
 8002494:	ec43 2b14 	vmov	d4, r2, r3
 8002498:	ed9f 3b6f 	vldr	d3, [pc, #444]	@ 8002658 <TIM1_UP_TIM10_IRQHandler+0x288>
 800249c:	ed9f 2b70 	vldr	d2, [pc, #448]	@ 8002660 <TIM1_UP_TIM10_IRQHandler+0x290>
 80024a0:	ed9f 1b71 	vldr	d1, [pc, #452]	@ 8002668 <TIM1_UP_TIM10_IRQHandler+0x298>
 80024a4:	ec49 8b10 	vmov	d0, r8, r9
 80024a8:	4629      	mov	r1, r5
 80024aa:	4620      	mov	r0, r4
 80024ac:	f7fe fda0 	bl	8000ff0 <PID_regulator>
 80024b0:	4603      	mov	r3, r0
 80024b2:	4a84      	ldr	r2, [pc, #528]	@ (80026c4 <TIM1_UP_TIM10_IRQHandler+0x2f4>)
 80024b4:	6013      	str	r3, [r2, #0]

		//Calculate control signal for error of angle
		ang_control_signal_alpha = PID_regulator(pos_control_signal_x - pitch, err_alpha, int_ang_alpha, 0.045, 0.0012, 0, dt);
 80024b6:	4b7e      	ldr	r3, [pc, #504]	@ (80026b0 <TIM1_UP_TIM10_IRQHandler+0x2e0>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	ee07 3a90 	vmov	s15, r3
 80024be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024c2:	4b75      	ldr	r3, [pc, #468]	@ (8002698 <TIM1_UP_TIM10_IRQHandler+0x2c8>)
 80024c4:	edd3 7a00 	vldr	s15, [r3]
 80024c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024cc:	ee17 0a90 	vmov	r0, s15
 80024d0:	f7fd ffe6 	bl	80004a0 <__aeabi_f2d>
 80024d4:	4680      	mov	r8, r0
 80024d6:	4689      	mov	r9, r1
 80024d8:	4b7b      	ldr	r3, [pc, #492]	@ (80026c8 <TIM1_UP_TIM10_IRQHandler+0x2f8>)
 80024da:	681c      	ldr	r4, [r3, #0]
 80024dc:	4b7b      	ldr	r3, [pc, #492]	@ (80026cc <TIM1_UP_TIM10_IRQHandler+0x2fc>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7fd ffdd 	bl	80004a0 <__aeabi_f2d>
 80024e6:	4682      	mov	sl, r0
 80024e8:	468b      	mov	fp, r1
 80024ea:	4b66      	ldr	r3, [pc, #408]	@ (8002684 <TIM1_UP_TIM10_IRQHandler+0x2b4>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7fd ffd6 	bl	80004a0 <__aeabi_f2d>
 80024f4:	4602      	mov	r2, r0
 80024f6:	460b      	mov	r3, r1
 80024f8:	ec43 2b14 	vmov	d4, r2, r3
 80024fc:	2100      	movs	r1, #0
 80024fe:	ed9f 3b5c 	vldr	d3, [pc, #368]	@ 8002670 <TIM1_UP_TIM10_IRQHandler+0x2a0>
 8002502:	ed9f 2b5d 	vldr	d2, [pc, #372]	@ 8002678 <TIM1_UP_TIM10_IRQHandler+0x2a8>
 8002506:	ec4b ab11 	vmov	d1, sl, fp
 800250a:	4620      	mov	r0, r4
 800250c:	ec49 8b10 	vmov	d0, r8, r9
 8002510:	f7fe fd6e 	bl	8000ff0 <PID_regulator>
 8002514:	4603      	mov	r3, r0
 8002516:	4a6e      	ldr	r2, [pc, #440]	@ (80026d0 <TIM1_UP_TIM10_IRQHandler+0x300>)
 8002518:	6013      	str	r3, [r2, #0]
		ang_control_signal_beta = PID_regulator(pos_control_signal_y - roll, err_beta, int_ang_beta, 0.045, 0.0012, 0, dt);
 800251a:	4b6a      	ldr	r3, [pc, #424]	@ (80026c4 <TIM1_UP_TIM10_IRQHandler+0x2f4>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	ee07 3a90 	vmov	s15, r3
 8002522:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002526:	4b5b      	ldr	r3, [pc, #364]	@ (8002694 <TIM1_UP_TIM10_IRQHandler+0x2c4>)
 8002528:	edd3 7a00 	vldr	s15, [r3]
 800252c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002530:	ee17 0a90 	vmov	r0, s15
 8002534:	f7fd ffb4 	bl	80004a0 <__aeabi_f2d>
 8002538:	4680      	mov	r8, r0
 800253a:	4689      	mov	r9, r1
 800253c:	4b65      	ldr	r3, [pc, #404]	@ (80026d4 <TIM1_UP_TIM10_IRQHandler+0x304>)
 800253e:	681c      	ldr	r4, [r3, #0]
 8002540:	4b65      	ldr	r3, [pc, #404]	@ (80026d8 <TIM1_UP_TIM10_IRQHandler+0x308>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f7fd ffab 	bl	80004a0 <__aeabi_f2d>
 800254a:	4682      	mov	sl, r0
 800254c:	468b      	mov	fp, r1
 800254e:	4b4d      	ldr	r3, [pc, #308]	@ (8002684 <TIM1_UP_TIM10_IRQHandler+0x2b4>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f7fd ffa4 	bl	80004a0 <__aeabi_f2d>
 8002558:	4602      	mov	r2, r0
 800255a:	460b      	mov	r3, r1
 800255c:	ec43 2b14 	vmov	d4, r2, r3
 8002560:	2100      	movs	r1, #0
 8002562:	ed9f 3b43 	vldr	d3, [pc, #268]	@ 8002670 <TIM1_UP_TIM10_IRQHandler+0x2a0>
 8002566:	ed9f 2b44 	vldr	d2, [pc, #272]	@ 8002678 <TIM1_UP_TIM10_IRQHandler+0x2a8>
 800256a:	ec4b ab11 	vmov	d1, sl, fp
 800256e:	4620      	mov	r0, r4
 8002570:	ec49 8b10 	vmov	d0, r8, r9
 8002574:	f7fe fd3c 	bl	8000ff0 <PID_regulator>
 8002578:	4603      	mov	r3, r0
 800257a:	4a58      	ldr	r2, [pc, #352]	@ (80026dc <TIM1_UP_TIM10_IRQHandler+0x30c>)
 800257c:	6013      	str	r3, [r2, #0]
 800257e:	e063      	b.n	8002648 <TIM1_UP_TIM10_IRQHandler+0x278>
	}else{
		//If the ball is not on the plate then control the plate to the horizontal position.
		int_ang_alpha = 0;
 8002580:	4b52      	ldr	r3, [pc, #328]	@ (80026cc <TIM1_UP_TIM10_IRQHandler+0x2fc>)
 8002582:	f04f 0200 	mov.w	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
		int_ang_beta = 0;
 8002588:	4b53      	ldr	r3, [pc, #332]	@ (80026d8 <TIM1_UP_TIM10_IRQHandler+0x308>)
 800258a:	f04f 0200 	mov.w	r2, #0
 800258e:	601a      	str	r2, [r3, #0]
		ang_control_signal_alpha = PID_regulator(0 - pitch, err_alpha, int_ang_alpha, 0.045, 0.0012, 0, dt);
 8002590:	4b41      	ldr	r3, [pc, #260]	@ (8002698 <TIM1_UP_TIM10_IRQHandler+0x2c8>)
 8002592:	edd3 7a00 	vldr	s15, [r3]
 8002596:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 80026e0 <TIM1_UP_TIM10_IRQHandler+0x310>
 800259a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800259e:	ee17 0a90 	vmov	r0, s15
 80025a2:	f7fd ff7d 	bl	80004a0 <__aeabi_f2d>
 80025a6:	4680      	mov	r8, r0
 80025a8:	4689      	mov	r9, r1
 80025aa:	4b47      	ldr	r3, [pc, #284]	@ (80026c8 <TIM1_UP_TIM10_IRQHandler+0x2f8>)
 80025ac:	681c      	ldr	r4, [r3, #0]
 80025ae:	4b47      	ldr	r3, [pc, #284]	@ (80026cc <TIM1_UP_TIM10_IRQHandler+0x2fc>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7fd ff74 	bl	80004a0 <__aeabi_f2d>
 80025b8:	4682      	mov	sl, r0
 80025ba:	468b      	mov	fp, r1
 80025bc:	4b31      	ldr	r3, [pc, #196]	@ (8002684 <TIM1_UP_TIM10_IRQHandler+0x2b4>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7fd ff6d 	bl	80004a0 <__aeabi_f2d>
 80025c6:	4602      	mov	r2, r0
 80025c8:	460b      	mov	r3, r1
 80025ca:	ec43 2b14 	vmov	d4, r2, r3
 80025ce:	2100      	movs	r1, #0
 80025d0:	ed9f 3b27 	vldr	d3, [pc, #156]	@ 8002670 <TIM1_UP_TIM10_IRQHandler+0x2a0>
 80025d4:	ed9f 2b28 	vldr	d2, [pc, #160]	@ 8002678 <TIM1_UP_TIM10_IRQHandler+0x2a8>
 80025d8:	ec4b ab11 	vmov	d1, sl, fp
 80025dc:	4620      	mov	r0, r4
 80025de:	ec49 8b10 	vmov	d0, r8, r9
 80025e2:	f7fe fd05 	bl	8000ff0 <PID_regulator>
 80025e6:	4603      	mov	r3, r0
 80025e8:	4a39      	ldr	r2, [pc, #228]	@ (80026d0 <TIM1_UP_TIM10_IRQHandler+0x300>)
 80025ea:	6013      	str	r3, [r2, #0]
		ang_control_signal_beta = PID_regulator(0 - roll, err_beta, int_ang_beta, 0.045, 0.0012, 0, dt);
 80025ec:	4b29      	ldr	r3, [pc, #164]	@ (8002694 <TIM1_UP_TIM10_IRQHandler+0x2c4>)
 80025ee:	edd3 7a00 	vldr	s15, [r3]
 80025f2:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 80026e0 <TIM1_UP_TIM10_IRQHandler+0x310>
 80025f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025fa:	ee17 0a90 	vmov	r0, s15
 80025fe:	f7fd ff4f 	bl	80004a0 <__aeabi_f2d>
 8002602:	4680      	mov	r8, r0
 8002604:	4689      	mov	r9, r1
 8002606:	4b33      	ldr	r3, [pc, #204]	@ (80026d4 <TIM1_UP_TIM10_IRQHandler+0x304>)
 8002608:	681c      	ldr	r4, [r3, #0]
 800260a:	4b33      	ldr	r3, [pc, #204]	@ (80026d8 <TIM1_UP_TIM10_IRQHandler+0x308>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4618      	mov	r0, r3
 8002610:	f7fd ff46 	bl	80004a0 <__aeabi_f2d>
 8002614:	4682      	mov	sl, r0
 8002616:	468b      	mov	fp, r1
 8002618:	4b1a      	ldr	r3, [pc, #104]	@ (8002684 <TIM1_UP_TIM10_IRQHandler+0x2b4>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4618      	mov	r0, r3
 800261e:	f7fd ff3f 	bl	80004a0 <__aeabi_f2d>
 8002622:	4602      	mov	r2, r0
 8002624:	460b      	mov	r3, r1
 8002626:	ec43 2b14 	vmov	d4, r2, r3
 800262a:	2100      	movs	r1, #0
 800262c:	ed9f 3b10 	vldr	d3, [pc, #64]	@ 8002670 <TIM1_UP_TIM10_IRQHandler+0x2a0>
 8002630:	ed9f 2b11 	vldr	d2, [pc, #68]	@ 8002678 <TIM1_UP_TIM10_IRQHandler+0x2a8>
 8002634:	ec4b ab11 	vmov	d1, sl, fp
 8002638:	4620      	mov	r0, r4
 800263a:	ec49 8b10 	vmov	d0, r8, r9
 800263e:	f7fe fcd7 	bl	8000ff0 <PID_regulator>
 8002642:	4603      	mov	r3, r0
 8002644:	4a25      	ldr	r2, [pc, #148]	@ (80026dc <TIM1_UP_TIM10_IRQHandler+0x30c>)
 8002646:	6013      	str	r3, [r2, #0]
	}



  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002648:	4826      	ldr	r0, [pc, #152]	@ (80026e4 <TIM1_UP_TIM10_IRQHandler+0x314>)
 800264a:	f003 fc41 	bl	8005ed0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800264e:	bf00      	nop
 8002650:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002654:	f3af 8000 	nop.w
 8002658:	9999999a 	.word	0x9999999a
 800265c:	3fd99999 	.word	0x3fd99999
 8002660:	d2f1a9fc 	.word	0xd2f1a9fc
 8002664:	3f50624d 	.word	0x3f50624d
 8002668:	cccccccd 	.word	0xcccccccd
 800266c:	3fdccccc 	.word	0x3fdccccc
 8002670:	30553261 	.word	0x30553261
 8002674:	3f53a92a 	.word	0x3f53a92a
 8002678:	70a3d70a 	.word	0x70a3d70a
 800267c:	3fa70a3d 	.word	0x3fa70a3d
 8002680:	20000314 	.word	0x20000314
 8002684:	20000004 	.word	0x20000004
 8002688:	20000000 	.word	0x20000000
 800268c:	200002c8 	.word	0x200002c8
 8002690:	20000310 	.word	0x20000310
 8002694:	2000030c 	.word	0x2000030c
 8002698:	20000308 	.word	0x20000308
 800269c:	200003a8 	.word	0x200003a8
 80026a0:	20000290 	.word	0x20000290
 80026a4:	200003ac 	.word	0x200003ac
 80026a8:	20000298 	.word	0x20000298
 80026ac:	200002b8 	.word	0x200002b8
 80026b0:	200002a8 	.word	0x200002a8
 80026b4:	20000294 	.word	0x20000294
 80026b8:	200003b0 	.word	0x200003b0
 80026bc:	2000029c 	.word	0x2000029c
 80026c0:	200002bc 	.word	0x200002bc
 80026c4:	200002ac 	.word	0x200002ac
 80026c8:	200002a0 	.word	0x200002a0
 80026cc:	200002c0 	.word	0x200002c0
 80026d0:	200002b0 	.word	0x200002b0
 80026d4:	200002a4 	.word	0x200002a4
 80026d8:	200002c4 	.word	0x200002c4
 80026dc:	200002b4 	.word	0x200002b4
 80026e0:	00000000 	.word	0x00000000
 80026e4:	20000128 	.word	0x20000128

080026e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026ec:	4b06      	ldr	r3, [pc, #24]	@ (8002708 <SystemInit+0x20>)
 80026ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026f2:	4a05      	ldr	r2, [pc, #20]	@ (8002708 <SystemInit+0x20>)
 80026f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80026f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026fc:	bf00      	nop
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	e000ed00 	.word	0xe000ed00

0800270c <touch_5wire_init>:
		ADC_HandleTypeDef *hadc,uint32_t Channel,
		GPIO_TypeDef* GPIO_Sen, uint16_t Pin_Sen,
		GPIO_TypeDef* GPIO_LR, uint16_t Pin_LR,
		GPIO_TypeDef* GPIO_LL, uint16_t Pin_LL,
		GPIO_TypeDef* GPIO_UR, uint16_t Pin_UR,
		GPIO_TypeDef* GPIO_UL, uint16_t Pin_UL){
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
 8002718:	603b      	str	r3, [r7, #0]

	Ts->Sen_ADC.hadc = hadc;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	68ba      	ldr	r2, [r7, #8]
 800271e:	601a      	str	r2, [r3, #0]
	Ts->Sen_ADC.Channel = Channel;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	605a      	str	r2, [r3, #4]

	Ts->Sen_GPIO.GPIOx = GPIO_Sen;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	609a      	str	r2, [r3, #8]
	Ts->Sen_GPIO.Pin = Pin_Sen;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8c3a      	ldrh	r2, [r7, #32]
 8002730:	819a      	strh	r2, [r3, #12]

	Ts->LR.GPIOx = GPIO_LR; Ts->LR.Pin = Pin_LR;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002736:	611a      	str	r2, [r3, #16]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800273c:	829a      	strh	r2, [r3, #20]
	Ts->LL.GPIOx = GPIO_LL; Ts->LL.Pin = Pin_LL;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002742:	619a      	str	r2, [r3, #24]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8002748:	839a      	strh	r2, [r3, #28]
	Ts->UR.GPIOx = GPIO_UR; Ts->UR.Pin = Pin_UR;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800274e:	621a      	str	r2, [r3, #32]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8002754:	849a      	strh	r2, [r3, #36]	@ 0x24
	Ts->UL.GPIOx = GPIO_UL; Ts->UL.Pin = Pin_UL;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800275a:	629a      	str	r2, [r3, #40]	@ 0x28
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8002762:	859a      	strh	r2, [r3, #44]	@ 0x2c

	Ts->total_x = 0;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	659a      	str	r2, [r3, #88]	@ 0x58
	Ts->total_y = 0;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	Ts->current_index_x = 0;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
	Ts->current_index_y = 0;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

	for(int i = 0; i < 10; i++){
 8002782:	2300      	movs	r3, #0
 8002784:	617b      	str	r3, [r7, #20]
 8002786:	e00e      	b.n	80027a6 <touch_5wire_init+0x9a>
		Ts->arr_value_x[i] = 0;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	697a      	ldr	r2, [r7, #20]
 800278c:	320c      	adds	r2, #12
 800278e:	2100      	movs	r1, #0
 8002790:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		Ts->arr_value_y[i] = 0;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	3218      	adds	r2, #24
 800279a:	2100      	movs	r1, #0
 800279c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(int i = 0; i < 10; i++){
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	3301      	adds	r3, #1
 80027a4:	617b      	str	r3, [r7, #20]
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	2b09      	cmp	r3, #9
 80027aa:	dded      	ble.n	8002788 <touch_5wire_init+0x7c>
	}

	//Configure to GPIO
	set_to_gpio(Ts);
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f000 f8eb 	bl	8002988 <set_to_gpio>
}
 80027b2:	bf00      	nop
 80027b4:	3718      	adds	r7, #24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <map>:

int32_t map(uint32_t input_value, uint32_t min_input, uint32_t max_input, int32_t min_output, int32_t max_output){
 80027ba:	b480      	push	{r7}
 80027bc:	b085      	sub	sp, #20
 80027be:	af00      	add	r7, sp, #0
 80027c0:	60f8      	str	r0, [r7, #12]
 80027c2:	60b9      	str	r1, [r7, #8]
 80027c4:	607a      	str	r2, [r7, #4]
 80027c6:	603b      	str	r3, [r7, #0]
	return (input_value - min_input)*(max_output - min_output)/(max_input - min_input) + min_output;
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	69b9      	ldr	r1, [r7, #24]
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	1a8a      	subs	r2, r1, r2
 80027d4:	fb03 f202 	mul.w	r2, r3, r2
 80027d8:	6879      	ldr	r1, [r7, #4]
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	1acb      	subs	r3, r1, r3
 80027de:	fbb2 f2f3 	udiv	r2, r2, r3
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	4413      	add	r3, r2
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3714      	adds	r7, #20
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
	...

080027f4 <average_filter>:

uint32_t average_filter(uint32_t* arr_filter, uint32_t raw_value, uint32_t* total, uint8_t* current_index){
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]
 8002800:	603b      	str	r3, [r7, #0]
	*total -= arr_filter[*current_index];
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	68f9      	ldr	r1, [r7, #12]
 800280e:	440b      	add	r3, r1
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	1ad2      	subs	r2, r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	601a      	str	r2, [r3, #0]
	arr_filter[*current_index] = raw_value;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	4413      	add	r3, r2
 8002822:	68ba      	ldr	r2, [r7, #8]
 8002824:	601a      	str	r2, [r3, #0]
	*total += raw_value;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	441a      	add	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	601a      	str	r2, [r3, #0]
	(*current_index)++;
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	3301      	adds	r3, #1
 8002838:	b2da      	uxtb	r2, r3
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	701a      	strb	r2, [r3, #0]
	if(*current_index >= 10){
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	2b09      	cmp	r3, #9
 8002844:	d902      	bls.n	800284c <average_filter+0x58>
		*current_index = 0;
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	2200      	movs	r2, #0
 800284a:	701a      	strb	r2, [r3, #0]
	}
	return (uint32_t)(*total/10);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a04      	ldr	r2, [pc, #16]	@ (8002864 <average_filter+0x70>)
 8002852:	fba2 2303 	umull	r2, r3, r2, r3
 8002856:	08db      	lsrs	r3, r3, #3
}
 8002858:	4618      	mov	r0, r3
 800285a:	3714      	adds	r7, #20
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr
 8002864:	cccccccd 	.word	0xcccccccd

08002868 <Write_Pin>:

void Write_Pin(GPIO_WIRE_t wire, GPIO_PinState PinState){
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	f107 0308 	add.w	r3, r7, #8
 8002872:	e883 0003 	stmia.w	r3, {r0, r1}
 8002876:	4613      	mov	r3, r2
 8002878:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(wire.GPIOx, wire.Pin, PinState);
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	89b9      	ldrh	r1, [r7, #12]
 800287e:	79fa      	ldrb	r2, [r7, #7]
 8002880:	4618      	mov	r0, r3
 8002882:	f001 fa37 	bl	8003cf4 <HAL_GPIO_WritePin>
}
 8002886:	bf00      	nop
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <Read_Pin>:

GPIO_PinState  Read_Pin(GPIO_WIRE_t wire){
 800288e:	b580      	push	{r7, lr}
 8002890:	b082      	sub	sp, #8
 8002892:	af00      	add	r7, sp, #0
 8002894:	463b      	mov	r3, r7
 8002896:	e883 0003 	stmia.w	r3, {r0, r1}
	return HAL_GPIO_ReadPin(wire.GPIOx, wire.Pin);
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	88ba      	ldrh	r2, [r7, #4]
 800289e:	4611      	mov	r1, r2
 80028a0:	4618      	mov	r0, r3
 80028a2:	f001 fa0f 	bl	8003cc4 <HAL_GPIO_ReadPin>
 80028a6:	4603      	mov	r3, r0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3708      	adds	r7, #8
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <config_touch_detect>:

void config_touch_detect(TOUCH_5WIRE_t*  Ts){
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
	Write_Pin(Ts->LR, GPIO_PIN_RESET);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	3310      	adds	r3, #16
 80028be:	e893 0003 	ldmia.w	r3, {r0, r1}
 80028c2:	f7ff ffd1 	bl	8002868 <Write_Pin>
	Write_Pin(Ts->LL, GPIO_PIN_RESET);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	3318      	adds	r3, #24
 80028cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80028d0:	f7ff ffca 	bl	8002868 <Write_Pin>
	Write_Pin(Ts->UL, GPIO_PIN_RESET);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	3328      	adds	r3, #40	@ 0x28
 80028da:	e893 0003 	ldmia.w	r3, {r0, r1}
 80028de:	f7ff ffc3 	bl	8002868 <Write_Pin>
	Write_Pin(Ts->UR, GPIO_PIN_RESET);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	3320      	adds	r3, #32
 80028e8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80028ec:	f7ff ffbc 	bl	8002868 <Write_Pin>
}
 80028f0:	bf00      	nop
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <config_read_x>:

void config_read_x(TOUCH_5WIRE_t* Ts){
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
	Write_Pin(Ts->LR, GPIO_PIN_SET);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	3310      	adds	r3, #16
 8002906:	e893 0003 	ldmia.w	r3, {r0, r1}
 800290a:	f7ff ffad 	bl	8002868 <Write_Pin>
	Write_Pin(Ts->LL, GPIO_PIN_RESET);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	3318      	adds	r3, #24
 8002914:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002918:	f7ff ffa6 	bl	8002868 <Write_Pin>
	Write_Pin(Ts->UL, GPIO_PIN_RESET);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	3328      	adds	r3, #40	@ 0x28
 8002922:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002926:	f7ff ff9f 	bl	8002868 <Write_Pin>
	Write_Pin(Ts->UR, GPIO_PIN_SET);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2201      	movs	r2, #1
 800292e:	3320      	adds	r3, #32
 8002930:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002934:	f7ff ff98 	bl	8002868 <Write_Pin>
}
 8002938:	bf00      	nop
 800293a:	3708      	adds	r7, #8
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <config_read_y>:

void config_read_y(TOUCH_5WIRE_t* Ts){
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
	Write_Pin(Ts->LR, GPIO_PIN_RESET);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	3310      	adds	r3, #16
 800294e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002952:	f7ff ff89 	bl	8002868 <Write_Pin>
	Write_Pin(Ts->LL, GPIO_PIN_RESET);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	3318      	adds	r3, #24
 800295c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002960:	f7ff ff82 	bl	8002868 <Write_Pin>
	Write_Pin(Ts->UL, GPIO_PIN_SET);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	3328      	adds	r3, #40	@ 0x28
 800296a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800296e:	f7ff ff7b 	bl	8002868 <Write_Pin>
	Write_Pin(Ts->UR, GPIO_PIN_SET);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2201      	movs	r2, #1
 8002976:	3320      	adds	r3, #32
 8002978:	e893 0003 	ldmia.w	r3, {r0, r1}
 800297c:	f7ff ff74 	bl	8002868 <Write_Pin>
}
 8002980:	bf00      	nop
 8002982:	3708      	adds	r7, #8
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <set_to_gpio>:

void set_to_gpio(TOUCH_5WIRE_t* Ts){
 8002988:	b580      	push	{r7, lr}
 800298a:	b088      	sub	sp, #32
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
	//Stop ADC
	HAL_ADC_Stop(Ts->Sen_ADC.hadc);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4618      	mov	r0, r3
 8002996:	f000 fb21 	bl	8002fdc <HAL_ADC_Stop>
	HAL_ADC_DeInit(Ts->Sen_ADC.hadc);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f000 fa35 	bl	8002e0e <HAL_ADC_DeInit>
	//Configure to GPIO
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a4:	f107 030c 	add.w	r3, r7, #12
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	605a      	str	r2, [r3, #4]
 80029ae:	609a      	str	r2, [r3, #8]
 80029b0:	60da      	str	r2, [r3, #12]
 80029b2:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = Ts->Sen_GPIO.Pin;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	899b      	ldrh	r3, [r3, #12]
 80029b8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029ba:	2300      	movs	r3, #0
 80029bc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029be:	2301      	movs	r3, #1
 80029c0:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(Ts->Sen_GPIO.GPIOx, &GPIO_InitStruct);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f107 020c 	add.w	r2, r7, #12
 80029ca:	4611      	mov	r1, r2
 80029cc:	4618      	mov	r0, r3
 80029ce:	f000 ff11 	bl	80037f4 <HAL_GPIO_Init>
}
 80029d2:	bf00      	nop
 80029d4:	3720      	adds	r7, #32
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
	...

080029dc <set_to_adc>:

void set_to_adc(TOUCH_5WIRE_t* Ts){
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 80029e4:	f107 0308 	add.w	r3, r7, #8
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	605a      	str	r2, [r3, #4]
 80029ee:	609a      	str	r2, [r3, #8]
 80029f0:	60da      	str	r2, [r3, #12]

	Ts->Sen_ADC.hadc->Instance = ADC1;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a24      	ldr	r2, [pc, #144]	@ (8002a88 <set_to_adc+0xac>)
 80029f8:	601a      	str	r2, [r3, #0]
	Ts->Sen_ADC.hadc->Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2200      	movs	r2, #0
 8002a00:	605a      	str	r2, [r3, #4]
	Ts->Sen_ADC.hadc->Init.Resolution = ADC_RESOLUTION_12B;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2200      	movs	r2, #0
 8002a08:	609a      	str	r2, [r3, #8]
	Ts->Sen_ADC.hadc->Init.ScanConvMode = DISABLE;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	611a      	str	r2, [r3, #16]
	Ts->Sen_ADC.hadc->Init.ContinuousConvMode = DISABLE;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2200      	movs	r2, #0
 8002a18:	761a      	strb	r2, [r3, #24]
	Ts->Sen_ADC.hadc->Init.DiscontinuousConvMode = DISABLE;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 2020 	strb.w	r2, [r3, #32]
	Ts->Sen_ADC.hadc->Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	62da      	str	r2, [r3, #44]	@ 0x2c
	Ts->Sen_ADC.hadc->Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a16      	ldr	r2, [pc, #88]	@ (8002a8c <set_to_adc+0xb0>)
 8002a32:	629a      	str	r2, [r3, #40]	@ 0x28
	Ts->Sen_ADC.hadc->Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	60da      	str	r2, [r3, #12]
	Ts->Sen_ADC.hadc->Init.NbrOfConversion = 1;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2201      	movs	r2, #1
 8002a42:	61da      	str	r2, [r3, #28]
	Ts->Sen_ADC.hadc->Init.DMAContinuousRequests = DISABLE;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	Ts->Sen_ADC.hadc->Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2201      	movs	r2, #1
 8002a54:	615a      	str	r2, [r3, #20]

	HAL_ADC_Init(Ts->Sen_ADC.hadc);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f000 f994 	bl	8002d88 <HAL_ADC_Init>

	sConfig.Channel = Ts->Sen_ADC.Channel;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8002a66:	2301      	movs	r3, #1
 8002a68:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	613b      	str	r3, [r7, #16]
	HAL_ADC_ConfigChannel(Ts->Sen_ADC.hadc, &sConfig);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f107 0208 	add.w	r2, r7, #8
 8002a76:	4611      	mov	r1, r2
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f000 fb7b 	bl	8003174 <HAL_ADC_ConfigChannel>
//	if (HAL_ADC_ConfigChannel(Ts->Sen_ADC.hadc, &sConfig) != HAL_OK)
//	{
//		Error_Handler();
//	};
}
 8002a7e:	bf00      	nop
 8002a80:	3718      	adds	r7, #24
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	40012000 	.word	0x40012000
 8002a8c:	0f000001 	.word	0x0f000001

08002a90 <touch_detect>:

uint8_t touch_detect(TOUCH_5WIRE_t* Ts){
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
//	HAL_ADC_Stop(&hadc1);
//	HAL_ADC_DeInit(&hadc1);
	config_touch_detect(Ts);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f7ff ff09 	bl	80028b0 <config_touch_detect>
	set_to_gpio(Ts);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f7ff ff72 	bl	8002988 <set_to_gpio>
	HAL_Delay(10);
 8002aa4:	200a      	movs	r0, #10
 8002aa6:	f000 f94b 	bl	8002d40 <HAL_Delay>
//	state_touch = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
	if(Read_Pin(Ts->Sen_GPIO) == GPIO_PIN_RESET){
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	3308      	adds	r3, #8
 8002aae:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002ab2:	f7ff feec 	bl	800288e <Read_Pin>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d101      	bne.n	8002ac0 <touch_detect+0x30>
		return 1;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e000      	b.n	8002ac2 <touch_detect+0x32>
	}
	return 0;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <get_raw_value_x>:

uint32_t get_raw_value_x(TOUCH_5WIRE_t* Ts){
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b082      	sub	sp, #8
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
	config_read_x(Ts);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7ff ff10 	bl	80028f8 <config_read_x>
//	HAL_Delay(10);
	HAL_ADC_Start(Ts->Sen_ADC.hadc);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f000 f9c9 	bl	8002e74 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(Ts->Sen_ADC.hadc, 10);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	210a      	movs	r1, #10
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f000 faaa 	bl	8003042 <HAL_ADC_PollForConversion>
	return HAL_ADC_GetValue(Ts->Sen_ADC.hadc);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f000 fb30 	bl	8003158 <HAL_ADC_GetValue>
 8002af8:	4603      	mov	r3, r0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <get_position_x>:

int32_t get_position_x(TOUCH_5WIRE_t* Ts, uint16_t min_adc_x, uint16_t max_adc_x, uint16_t length){
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b088      	sub	sp, #32
 8002b06:	af02      	add	r7, sp, #8
 8002b08:	60f8      	str	r0, [r7, #12]
 8002b0a:	4608      	mov	r0, r1
 8002b0c:	4611      	mov	r1, r2
 8002b0e:	461a      	mov	r2, r3
 8002b10:	4603      	mov	r3, r0
 8002b12:	817b      	strh	r3, [r7, #10]
 8002b14:	460b      	mov	r3, r1
 8002b16:	813b      	strh	r3, [r7, #8]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	80fb      	strh	r3, [r7, #6]
	uint32_t raw_value_x = get_raw_value_x(Ts);
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f7ff ffd4 	bl	8002aca <get_raw_value_x>
 8002b22:	6178      	str	r0, [r7, #20]
	uint32_t value_filtered_x = average_filter(Ts->arr_value_x, raw_value_x, &Ts->total_x, &Ts->current_index_x);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f103 0258 	add.w	r2, r3, #88	@ 0x58
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	335c      	adds	r3, #92	@ 0x5c
 8002b34:	6979      	ldr	r1, [r7, #20]
 8002b36:	f7ff fe5d 	bl	80027f4 <average_filter>
 8002b3a:	6138      	str	r0, [r7, #16]
	return map(value_filtered_x, min_adc_x, max_adc_x, -length/2, length/2);
 8002b3c:	8979      	ldrh	r1, [r7, #10]
 8002b3e:	8938      	ldrh	r0, [r7, #8]
 8002b40:	88fb      	ldrh	r3, [r7, #6]
 8002b42:	0fda      	lsrs	r2, r3, #31
 8002b44:	4413      	add	r3, r2
 8002b46:	105b      	asrs	r3, r3, #1
 8002b48:	425b      	negs	r3, r3
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	88fb      	ldrh	r3, [r7, #6]
 8002b4e:	085b      	lsrs	r3, r3, #1
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	9300      	str	r3, [sp, #0]
 8002b54:	4613      	mov	r3, r2
 8002b56:	4602      	mov	r2, r0
 8002b58:	6938      	ldr	r0, [r7, #16]
 8002b5a:	f7ff fe2e 	bl	80027ba <map>
 8002b5e:	4603      	mov	r3, r0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3718      	adds	r7, #24
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <get_raw_value_y>:

uint32_t get_raw_value_y(TOUCH_5WIRE_t* Ts){
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
	config_read_y(Ts);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f7ff fee5 	bl	8002940 <config_read_y>
//	HAL_Delay(10);
	HAL_ADC_Start(Ts->Sen_ADC.hadc);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 f97a 	bl	8002e74 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(Ts->Sen_ADC.hadc, 10);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	210a      	movs	r1, #10
 8002b86:	4618      	mov	r0, r3
 8002b88:	f000 fa5b 	bl	8003042 <HAL_ADC_PollForConversion>
	return HAL_ADC_GetValue(Ts->Sen_ADC.hadc);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f000 fae1 	bl	8003158 <HAL_ADC_GetValue>
 8002b96:	4603      	mov	r3, r0
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3708      	adds	r7, #8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <get_position_y>:

int32_t get_position_y(TOUCH_5WIRE_t* Ts, uint16_t min_adc_y, uint16_t max_adc_y, uint16_t width){
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b088      	sub	sp, #32
 8002ba4:	af02      	add	r7, sp, #8
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	4608      	mov	r0, r1
 8002baa:	4611      	mov	r1, r2
 8002bac:	461a      	mov	r2, r3
 8002bae:	4603      	mov	r3, r0
 8002bb0:	817b      	strh	r3, [r7, #10]
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	813b      	strh	r3, [r7, #8]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	80fb      	strh	r3, [r7, #6]
	uint32_t raw_value_y = get_raw_value_y(Ts);
 8002bba:	68f8      	ldr	r0, [r7, #12]
 8002bbc:	f7ff ffd4 	bl	8002b68 <get_raw_value_y>
 8002bc0:	6178      	str	r0, [r7, #20]
	uint32_t value_filtered_y =  average_filter(Ts->arr_value_y, raw_value_y, &Ts->total_y, &Ts->current_index_y);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	338c      	adds	r3, #140	@ 0x8c
 8002bd2:	6979      	ldr	r1, [r7, #20]
 8002bd4:	f7ff fe0e 	bl	80027f4 <average_filter>
 8002bd8:	6138      	str	r0, [r7, #16]
	return map(value_filtered_y, min_adc_y, max_adc_y, -width/2, width/2);
 8002bda:	8979      	ldrh	r1, [r7, #10]
 8002bdc:	8938      	ldrh	r0, [r7, #8]
 8002bde:	88fb      	ldrh	r3, [r7, #6]
 8002be0:	0fda      	lsrs	r2, r3, #31
 8002be2:	4413      	add	r3, r2
 8002be4:	105b      	asrs	r3, r3, #1
 8002be6:	425b      	negs	r3, r3
 8002be8:	461a      	mov	r2, r3
 8002bea:	88fb      	ldrh	r3, [r7, #6]
 8002bec:	085b      	lsrs	r3, r3, #1
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	9300      	str	r3, [sp, #0]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	6938      	ldr	r0, [r7, #16]
 8002bf8:	f7ff fddf 	bl	80027ba <map>
 8002bfc:	4603      	mov	r3, r0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3718      	adds	r7, #24
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
	...

08002c08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002c40 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002c0c:	f7ff fd6c 	bl	80026e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c10:	480c      	ldr	r0, [pc, #48]	@ (8002c44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c12:	490d      	ldr	r1, [pc, #52]	@ (8002c48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c14:	4a0d      	ldr	r2, [pc, #52]	@ (8002c4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c18:	e002      	b.n	8002c20 <LoopCopyDataInit>

08002c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c1e:	3304      	adds	r3, #4

08002c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c24:	d3f9      	bcc.n	8002c1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c26:	4a0a      	ldr	r2, [pc, #40]	@ (8002c50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c28:	4c0a      	ldr	r4, [pc, #40]	@ (8002c54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c2c:	e001      	b.n	8002c32 <LoopFillZerobss>

08002c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c30:	3204      	adds	r2, #4

08002c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c34:	d3fb      	bcc.n	8002c2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c36:	f004 f807 	bl	8006c48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c3a:	f7fe fa25 	bl	8001088 <main>
  bx  lr    
 8002c3e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c48:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002c4c:	08007218 	.word	0x08007218
  ldr r2, =_sbss
 8002c50:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002c54:	20000528 	.word	0x20000528

08002c58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c58:	e7fe      	b.n	8002c58 <ADC_IRQHandler>
	...

08002c5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c60:	4b0e      	ldr	r3, [pc, #56]	@ (8002c9c <HAL_Init+0x40>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a0d      	ldr	r2, [pc, #52]	@ (8002c9c <HAL_Init+0x40>)
 8002c66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c9c <HAL_Init+0x40>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a0a      	ldr	r2, [pc, #40]	@ (8002c9c <HAL_Init+0x40>)
 8002c72:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c78:	4b08      	ldr	r3, [pc, #32]	@ (8002c9c <HAL_Init+0x40>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a07      	ldr	r2, [pc, #28]	@ (8002c9c <HAL_Init+0x40>)
 8002c7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c84:	2003      	movs	r0, #3
 8002c86:	f000 fd73 	bl	8003770 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c8a:	200f      	movs	r0, #15
 8002c8c:	f000 f808 	bl	8002ca0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c90:	f7ff f962 	bl	8001f58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	40023c00 	.word	0x40023c00

08002ca0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ca8:	4b12      	ldr	r3, [pc, #72]	@ (8002cf4 <HAL_InitTick+0x54>)
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	4b12      	ldr	r3, [pc, #72]	@ (8002cf8 <HAL_InitTick+0x58>)
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002cb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f000 fd8b 	bl	80037da <HAL_SYSTICK_Config>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e00e      	b.n	8002cec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2b0f      	cmp	r3, #15
 8002cd2:	d80a      	bhi.n	8002cea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	6879      	ldr	r1, [r7, #4]
 8002cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cdc:	f000 fd53 	bl	8003786 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ce0:	4a06      	ldr	r2, [pc, #24]	@ (8002cfc <HAL_InitTick+0x5c>)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	e000      	b.n	8002cec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3708      	adds	r7, #8
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	20000014 	.word	0x20000014
 8002cf8:	2000001c 	.word	0x2000001c
 8002cfc:	20000018 	.word	0x20000018

08002d00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d04:	4b06      	ldr	r3, [pc, #24]	@ (8002d20 <HAL_IncTick+0x20>)
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	461a      	mov	r2, r3
 8002d0a:	4b06      	ldr	r3, [pc, #24]	@ (8002d24 <HAL_IncTick+0x24>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4413      	add	r3, r2
 8002d10:	4a04      	ldr	r2, [pc, #16]	@ (8002d24 <HAL_IncTick+0x24>)
 8002d12:	6013      	str	r3, [r2, #0]
}
 8002d14:	bf00      	nop
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	2000001c 	.word	0x2000001c
 8002d24:	200003ec 	.word	0x200003ec

08002d28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d2c:	4b03      	ldr	r3, [pc, #12]	@ (8002d3c <HAL_GetTick+0x14>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	200003ec 	.word	0x200003ec

08002d40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d48:	f7ff ffee 	bl	8002d28 <HAL_GetTick>
 8002d4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d58:	d005      	beq.n	8002d66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8002d84 <HAL_Delay+0x44>)
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	461a      	mov	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	4413      	add	r3, r2
 8002d64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d66:	bf00      	nop
 8002d68:	f7ff ffde 	bl	8002d28 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d8f7      	bhi.n	8002d68 <HAL_Delay+0x28>
  {
  }
}
 8002d78:	bf00      	nop
 8002d7a:	bf00      	nop
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	2000001c 	.word	0x2000001c

08002d88 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d90:	2300      	movs	r3, #0
 8002d92:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e033      	b.n	8002e06 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d109      	bne.n	8002dba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f7ff f8fe 	bl	8001fa8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dbe:	f003 0310 	and.w	r3, r3, #16
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d118      	bne.n	8002df8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dca:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002dce:	f023 0302 	bic.w	r3, r3, #2
 8002dd2:	f043 0202 	orr.w	r2, r3, #2
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 fafc 	bl	80033d8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dea:	f023 0303 	bic.w	r3, r3, #3
 8002dee:	f043 0201 	orr.w	r2, r3, #1
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	641a      	str	r2, [r3, #64]	@ 0x40
 8002df6:	e001      	b.n	8002dfc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <HAL_ADC_DeInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b084      	sub	sp, #16
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e16:	2300      	movs	r3, #0
 8002e18:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d101      	bne.n	8002e24 <HAL_ADC_DeInit+0x16>
  {
    return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e022      	b.n	8002e6a <HAL_ADC_DeInit+0x5c>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e28:	f043 0202 	orr.w	r2, r3, #2
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689a      	ldr	r2, [r3, #8]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 0201 	bic.w	r2, r2, #1
 8002e3e:	609a      	str	r2, [r3, #8]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d108      	bne.n	8002e60 <HAL_ADC_DeInit+0x52>

    /* DeInit the low level hardware: RCC clock, NVIC */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware: RCC clock, NVIC */
    HAL_ADC_MspDeInit(hadc);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f7ff f8ee 	bl	8002030 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
	...

08002e74 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d101      	bne.n	8002e8e <HAL_ADC_Start+0x1a>
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	e097      	b.n	8002fbe <HAL_ADC_Start+0x14a>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2201      	movs	r2, #1
 8002e92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f003 0301 	and.w	r3, r3, #1
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d018      	beq.n	8002ed6 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	689a      	ldr	r2, [r3, #8]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f042 0201 	orr.w	r2, r2, #1
 8002eb2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002eb4:	4b45      	ldr	r3, [pc, #276]	@ (8002fcc <HAL_ADC_Start+0x158>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a45      	ldr	r2, [pc, #276]	@ (8002fd0 <HAL_ADC_Start+0x15c>)
 8002eba:	fba2 2303 	umull	r2, r3, r2, r3
 8002ebe:	0c9a      	lsrs	r2, r3, #18
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	4413      	add	r3, r2
 8002ec6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002ec8:	e002      	b.n	8002ed0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1f9      	bne.n	8002eca <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d15f      	bne.n	8002fa4 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002eec:	f023 0301 	bic.w	r3, r3, #1
 8002ef0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d007      	beq.n	8002f16 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002f0e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f22:	d106      	bne.n	8002f32 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f28:	f023 0206 	bic.w	r2, r3, #6
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	645a      	str	r2, [r3, #68]	@ 0x44
 8002f30:	e002      	b.n	8002f38 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f40:	4b24      	ldr	r3, [pc, #144]	@ (8002fd4 <HAL_ADC_Start+0x160>)
 8002f42:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002f4c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f003 031f 	and.w	r3, r3, #31
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d10f      	bne.n	8002f7a <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d129      	bne.n	8002fbc <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689a      	ldr	r2, [r3, #8]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002f76:	609a      	str	r2, [r3, #8]
 8002f78:	e020      	b.n	8002fbc <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a16      	ldr	r2, [pc, #88]	@ (8002fd8 <HAL_ADC_Start+0x164>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d11b      	bne.n	8002fbc <HAL_ADC_Start+0x148>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d114      	bne.n	8002fbc <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	689a      	ldr	r2, [r3, #8]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002fa0:	609a      	str	r2, [r3, #8]
 8002fa2:	e00b      	b.n	8002fbc <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa8:	f043 0210 	orr.w	r2, r3, #16
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fb4:	f043 0201 	orr.w	r2, r3, #1
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3714      	adds	r7, #20
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	20000014 	.word	0x20000014
 8002fd0:	431bde83 	.word	0x431bde83
 8002fd4:	40012300 	.word	0x40012300
 8002fd8:	40012000 	.word	0x40012000

08002fdc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d101      	bne.n	8002ff2 <HAL_ADC_Stop+0x16>
 8002fee:	2302      	movs	r3, #2
 8002ff0:	e021      	b.n	8003036 <HAL_ADC_Stop+0x5a>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	689a      	ldr	r2, [r3, #8]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 0201 	bic.w	r2, r2, #1
 8003008:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f003 0301 	and.w	r3, r3, #1
 8003014:	2b00      	cmp	r3, #0
 8003016:	d109      	bne.n	800302c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003020:	f023 0301 	bic.w	r3, r3, #1
 8003024:	f043 0201 	orr.w	r2, r3, #1
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr

08003042 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b084      	sub	sp, #16
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
 800304a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800304c:	2300      	movs	r3, #0
 800304e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800305a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800305e:	d113      	bne.n	8003088 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800306a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800306e:	d10b      	bne.n	8003088 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003074:	f043 0220 	orr.w	r2, r3, #32
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e063      	b.n	8003150 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8003088:	f7ff fe4e 	bl	8002d28 <HAL_GetTick>
 800308c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800308e:	e021      	b.n	80030d4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003096:	d01d      	beq.n	80030d4 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d007      	beq.n	80030ae <HAL_ADC_PollForConversion+0x6c>
 800309e:	f7ff fe43 	bl	8002d28 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d212      	bcs.n	80030d4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d00b      	beq.n	80030d4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c0:	f043 0204 	orr.w	r2, r3, #4
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e03d      	b.n	8003150 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d1d6      	bne.n	8003090 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f06f 0212 	mvn.w	r2, #18
 80030ea:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d123      	bne.n	800314e <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800310a:	2b00      	cmp	r3, #0
 800310c:	d11f      	bne.n	800314e <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003114:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003118:	2b00      	cmp	r3, #0
 800311a:	d006      	beq.n	800312a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003126:	2b00      	cmp	r3, #0
 8003128:	d111      	bne.n	800314e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800312e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d105      	bne.n	800314e <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003146:	f043 0201 	orr.w	r2, r3, #1
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003166:	4618      	mov	r0, r3
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
	...

08003174 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800317e:	2300      	movs	r3, #0
 8003180:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003188:	2b01      	cmp	r3, #1
 800318a:	d101      	bne.n	8003190 <HAL_ADC_ConfigChannel+0x1c>
 800318c:	2302      	movs	r3, #2
 800318e:	e113      	b.n	80033b8 <HAL_ADC_ConfigChannel+0x244>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2b09      	cmp	r3, #9
 800319e:	d925      	bls.n	80031ec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68d9      	ldr	r1, [r3, #12]
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	461a      	mov	r2, r3
 80031ae:	4613      	mov	r3, r2
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	4413      	add	r3, r2
 80031b4:	3b1e      	subs	r3, #30
 80031b6:	2207      	movs	r2, #7
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	43da      	mvns	r2, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	400a      	ands	r2, r1
 80031c4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68d9      	ldr	r1, [r3, #12]
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	4618      	mov	r0, r3
 80031d8:	4603      	mov	r3, r0
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	4403      	add	r3, r0
 80031de:	3b1e      	subs	r3, #30
 80031e0:	409a      	lsls	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	60da      	str	r2, [r3, #12]
 80031ea:	e022      	b.n	8003232 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6919      	ldr	r1, [r3, #16]
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	461a      	mov	r2, r3
 80031fa:	4613      	mov	r3, r2
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	4413      	add	r3, r2
 8003200:	2207      	movs	r2, #7
 8003202:	fa02 f303 	lsl.w	r3, r2, r3
 8003206:	43da      	mvns	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	400a      	ands	r2, r1
 800320e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6919      	ldr	r1, [r3, #16]
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	689a      	ldr	r2, [r3, #8]
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	b29b      	uxth	r3, r3
 8003220:	4618      	mov	r0, r3
 8003222:	4603      	mov	r3, r0
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	4403      	add	r3, r0
 8003228:	409a      	lsls	r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2b06      	cmp	r3, #6
 8003238:	d824      	bhi.n	8003284 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685a      	ldr	r2, [r3, #4]
 8003244:	4613      	mov	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4413      	add	r3, r2
 800324a:	3b05      	subs	r3, #5
 800324c:	221f      	movs	r2, #31
 800324e:	fa02 f303 	lsl.w	r3, r2, r3
 8003252:	43da      	mvns	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	400a      	ands	r2, r1
 800325a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	b29b      	uxth	r3, r3
 8003268:	4618      	mov	r0, r3
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	685a      	ldr	r2, [r3, #4]
 800326e:	4613      	mov	r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	4413      	add	r3, r2
 8003274:	3b05      	subs	r3, #5
 8003276:	fa00 f203 	lsl.w	r2, r0, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	430a      	orrs	r2, r1
 8003280:	635a      	str	r2, [r3, #52]	@ 0x34
 8003282:	e04c      	b.n	800331e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	2b0c      	cmp	r3, #12
 800328a:	d824      	bhi.n	80032d6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685a      	ldr	r2, [r3, #4]
 8003296:	4613      	mov	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4413      	add	r3, r2
 800329c:	3b23      	subs	r3, #35	@ 0x23
 800329e:	221f      	movs	r2, #31
 80032a0:	fa02 f303 	lsl.w	r3, r2, r3
 80032a4:	43da      	mvns	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	400a      	ands	r2, r1
 80032ac:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	4618      	mov	r0, r3
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685a      	ldr	r2, [r3, #4]
 80032c0:	4613      	mov	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	4413      	add	r3, r2
 80032c6:	3b23      	subs	r3, #35	@ 0x23
 80032c8:	fa00 f203 	lsl.w	r2, r0, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80032d4:	e023      	b.n	800331e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685a      	ldr	r2, [r3, #4]
 80032e0:	4613      	mov	r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	4413      	add	r3, r2
 80032e6:	3b41      	subs	r3, #65	@ 0x41
 80032e8:	221f      	movs	r2, #31
 80032ea:	fa02 f303 	lsl.w	r3, r2, r3
 80032ee:	43da      	mvns	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	400a      	ands	r2, r1
 80032f6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	b29b      	uxth	r3, r3
 8003304:	4618      	mov	r0, r3
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	4613      	mov	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	4413      	add	r3, r2
 8003310:	3b41      	subs	r3, #65	@ 0x41
 8003312:	fa00 f203 	lsl.w	r2, r0, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	430a      	orrs	r2, r1
 800331c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800331e:	4b29      	ldr	r3, [pc, #164]	@ (80033c4 <HAL_ADC_ConfigChannel+0x250>)
 8003320:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a28      	ldr	r2, [pc, #160]	@ (80033c8 <HAL_ADC_ConfigChannel+0x254>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d10f      	bne.n	800334c <HAL_ADC_ConfigChannel+0x1d8>
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2b12      	cmp	r3, #18
 8003332:	d10b      	bne.n	800334c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a1d      	ldr	r2, [pc, #116]	@ (80033c8 <HAL_ADC_ConfigChannel+0x254>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d12b      	bne.n	80033ae <HAL_ADC_ConfigChannel+0x23a>
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a1c      	ldr	r2, [pc, #112]	@ (80033cc <HAL_ADC_ConfigChannel+0x258>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d003      	beq.n	8003368 <HAL_ADC_ConfigChannel+0x1f4>
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2b11      	cmp	r3, #17
 8003366:	d122      	bne.n	80033ae <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a11      	ldr	r2, [pc, #68]	@ (80033cc <HAL_ADC_ConfigChannel+0x258>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d111      	bne.n	80033ae <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800338a:	4b11      	ldr	r3, [pc, #68]	@ (80033d0 <HAL_ADC_ConfigChannel+0x25c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a11      	ldr	r2, [pc, #68]	@ (80033d4 <HAL_ADC_ConfigChannel+0x260>)
 8003390:	fba2 2303 	umull	r2, r3, r2, r3
 8003394:	0c9a      	lsrs	r2, r3, #18
 8003396:	4613      	mov	r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4413      	add	r3, r2
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80033a0:	e002      	b.n	80033a8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	3b01      	subs	r3, #1
 80033a6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1f9      	bne.n	80033a2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3714      	adds	r7, #20
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr
 80033c4:	40012300 	.word	0x40012300
 80033c8:	40012000 	.word	0x40012000
 80033cc:	10000012 	.word	0x10000012
 80033d0:	20000014 	.word	0x20000014
 80033d4:	431bde83 	.word	0x431bde83

080033d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033e0:	4b79      	ldr	r3, [pc, #484]	@ (80035c8 <ADC_Init+0x1f0>)
 80033e2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	685a      	ldr	r2, [r3, #4]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	431a      	orrs	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	685a      	ldr	r2, [r3, #4]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800340c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	6859      	ldr	r1, [r3, #4]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	021a      	lsls	r2, r3, #8
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	430a      	orrs	r2, r1
 8003420:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	685a      	ldr	r2, [r3, #4]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003430:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	6859      	ldr	r1, [r3, #4]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	689a      	ldr	r2, [r3, #8]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	430a      	orrs	r2, r1
 8003442:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	689a      	ldr	r2, [r3, #8]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003452:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6899      	ldr	r1, [r3, #8]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	68da      	ldr	r2, [r3, #12]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	430a      	orrs	r2, r1
 8003464:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800346a:	4a58      	ldr	r2, [pc, #352]	@ (80035cc <ADC_Init+0x1f4>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d022      	beq.n	80034b6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689a      	ldr	r2, [r3, #8]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800347e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6899      	ldr	r1, [r3, #8]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	689a      	ldr	r2, [r3, #8]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80034a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	6899      	ldr	r1, [r3, #8]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	609a      	str	r2, [r3, #8]
 80034b4:	e00f      	b.n	80034d6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	689a      	ldr	r2, [r3, #8]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80034c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	689a      	ldr	r2, [r3, #8]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80034d4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	689a      	ldr	r2, [r3, #8]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f022 0202 	bic.w	r2, r2, #2
 80034e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	6899      	ldr	r1, [r3, #8]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	7e1b      	ldrb	r3, [r3, #24]
 80034f0:	005a      	lsls	r2, r3, #1
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d01b      	beq.n	800353c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685a      	ldr	r2, [r3, #4]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003512:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	685a      	ldr	r2, [r3, #4]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003522:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6859      	ldr	r1, [r3, #4]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352e:	3b01      	subs	r3, #1
 8003530:	035a      	lsls	r2, r3, #13
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	430a      	orrs	r2, r1
 8003538:	605a      	str	r2, [r3, #4]
 800353a:	e007      	b.n	800354c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	685a      	ldr	r2, [r3, #4]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800354a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800355a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	69db      	ldr	r3, [r3, #28]
 8003566:	3b01      	subs	r3, #1
 8003568:	051a      	lsls	r2, r3, #20
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	689a      	ldr	r2, [r3, #8]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003580:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	6899      	ldr	r1, [r3, #8]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800358e:	025a      	lsls	r2, r3, #9
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	430a      	orrs	r2, r1
 8003596:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689a      	ldr	r2, [r3, #8]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	6899      	ldr	r1, [r3, #8]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	029a      	lsls	r2, r3, #10
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	430a      	orrs	r2, r1
 80035ba:	609a      	str	r2, [r3, #8]
}
 80035bc:	bf00      	nop
 80035be:	3714      	adds	r7, #20
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr
 80035c8:	40012300 	.word	0x40012300
 80035cc:	0f000001 	.word	0x0f000001

080035d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f003 0307 	and.w	r3, r3, #7
 80035de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003614 <__NVIC_SetPriorityGrouping+0x44>)
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035e6:	68ba      	ldr	r2, [r7, #8]
 80035e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80035ec:	4013      	ands	r3, r2
 80035ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80035fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003600:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003602:	4a04      	ldr	r2, [pc, #16]	@ (8003614 <__NVIC_SetPriorityGrouping+0x44>)
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	60d3      	str	r3, [r2, #12]
}
 8003608:	bf00      	nop
 800360a:	3714      	adds	r7, #20
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr
 8003614:	e000ed00 	.word	0xe000ed00

08003618 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800361c:	4b04      	ldr	r3, [pc, #16]	@ (8003630 <__NVIC_GetPriorityGrouping+0x18>)
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	0a1b      	lsrs	r3, r3, #8
 8003622:	f003 0307 	and.w	r3, r3, #7
}
 8003626:	4618      	mov	r0, r3
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr
 8003630:	e000ed00 	.word	0xe000ed00

08003634 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	4603      	mov	r3, r0
 800363c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800363e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003642:	2b00      	cmp	r3, #0
 8003644:	db0b      	blt.n	800365e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003646:	79fb      	ldrb	r3, [r7, #7]
 8003648:	f003 021f 	and.w	r2, r3, #31
 800364c:	4907      	ldr	r1, [pc, #28]	@ (800366c <__NVIC_EnableIRQ+0x38>)
 800364e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003652:	095b      	lsrs	r3, r3, #5
 8003654:	2001      	movs	r0, #1
 8003656:	fa00 f202 	lsl.w	r2, r0, r2
 800365a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800365e:	bf00      	nop
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	e000e100 	.word	0xe000e100

08003670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	4603      	mov	r3, r0
 8003678:	6039      	str	r1, [r7, #0]
 800367a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800367c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003680:	2b00      	cmp	r3, #0
 8003682:	db0a      	blt.n	800369a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	b2da      	uxtb	r2, r3
 8003688:	490c      	ldr	r1, [pc, #48]	@ (80036bc <__NVIC_SetPriority+0x4c>)
 800368a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800368e:	0112      	lsls	r2, r2, #4
 8003690:	b2d2      	uxtb	r2, r2
 8003692:	440b      	add	r3, r1
 8003694:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003698:	e00a      	b.n	80036b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	b2da      	uxtb	r2, r3
 800369e:	4908      	ldr	r1, [pc, #32]	@ (80036c0 <__NVIC_SetPriority+0x50>)
 80036a0:	79fb      	ldrb	r3, [r7, #7]
 80036a2:	f003 030f 	and.w	r3, r3, #15
 80036a6:	3b04      	subs	r3, #4
 80036a8:	0112      	lsls	r2, r2, #4
 80036aa:	b2d2      	uxtb	r2, r2
 80036ac:	440b      	add	r3, r1
 80036ae:	761a      	strb	r2, [r3, #24]
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr
 80036bc:	e000e100 	.word	0xe000e100
 80036c0:	e000ed00 	.word	0xe000ed00

080036c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b089      	sub	sp, #36	@ 0x24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f003 0307 	and.w	r3, r3, #7
 80036d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	f1c3 0307 	rsb	r3, r3, #7
 80036de:	2b04      	cmp	r3, #4
 80036e0:	bf28      	it	cs
 80036e2:	2304      	movcs	r3, #4
 80036e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	3304      	adds	r3, #4
 80036ea:	2b06      	cmp	r3, #6
 80036ec:	d902      	bls.n	80036f4 <NVIC_EncodePriority+0x30>
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	3b03      	subs	r3, #3
 80036f2:	e000      	b.n	80036f6 <NVIC_EncodePriority+0x32>
 80036f4:	2300      	movs	r3, #0
 80036f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036f8:	f04f 32ff 	mov.w	r2, #4294967295
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003702:	43da      	mvns	r2, r3
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	401a      	ands	r2, r3
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800370c:	f04f 31ff 	mov.w	r1, #4294967295
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	fa01 f303 	lsl.w	r3, r1, r3
 8003716:	43d9      	mvns	r1, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800371c:	4313      	orrs	r3, r2
         );
}
 800371e:	4618      	mov	r0, r3
 8003720:	3724      	adds	r7, #36	@ 0x24
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
	...

0800372c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	3b01      	subs	r3, #1
 8003738:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800373c:	d301      	bcc.n	8003742 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800373e:	2301      	movs	r3, #1
 8003740:	e00f      	b.n	8003762 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003742:	4a0a      	ldr	r2, [pc, #40]	@ (800376c <SysTick_Config+0x40>)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	3b01      	subs	r3, #1
 8003748:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800374a:	210f      	movs	r1, #15
 800374c:	f04f 30ff 	mov.w	r0, #4294967295
 8003750:	f7ff ff8e 	bl	8003670 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003754:	4b05      	ldr	r3, [pc, #20]	@ (800376c <SysTick_Config+0x40>)
 8003756:	2200      	movs	r2, #0
 8003758:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800375a:	4b04      	ldr	r3, [pc, #16]	@ (800376c <SysTick_Config+0x40>)
 800375c:	2207      	movs	r2, #7
 800375e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3708      	adds	r7, #8
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	e000e010 	.word	0xe000e010

08003770 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f7ff ff29 	bl	80035d0 <__NVIC_SetPriorityGrouping>
}
 800377e:	bf00      	nop
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003786:	b580      	push	{r7, lr}
 8003788:	b086      	sub	sp, #24
 800378a:	af00      	add	r7, sp, #0
 800378c:	4603      	mov	r3, r0
 800378e:	60b9      	str	r1, [r7, #8]
 8003790:	607a      	str	r2, [r7, #4]
 8003792:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003794:	2300      	movs	r3, #0
 8003796:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003798:	f7ff ff3e 	bl	8003618 <__NVIC_GetPriorityGrouping>
 800379c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	68b9      	ldr	r1, [r7, #8]
 80037a2:	6978      	ldr	r0, [r7, #20]
 80037a4:	f7ff ff8e 	bl	80036c4 <NVIC_EncodePriority>
 80037a8:	4602      	mov	r2, r0
 80037aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037ae:	4611      	mov	r1, r2
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7ff ff5d 	bl	8003670 <__NVIC_SetPriority>
}
 80037b6:	bf00      	nop
 80037b8:	3718      	adds	r7, #24
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b082      	sub	sp, #8
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	4603      	mov	r3, r0
 80037c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7ff ff31 	bl	8003634 <__NVIC_EnableIRQ>
}
 80037d2:	bf00      	nop
 80037d4:	3708      	adds	r7, #8
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037da:	b580      	push	{r7, lr}
 80037dc:	b082      	sub	sp, #8
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7ff ffa2 	bl	800372c <SysTick_Config>
 80037e8:	4603      	mov	r3, r0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
	...

080037f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b089      	sub	sp, #36	@ 0x24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037fe:	2300      	movs	r3, #0
 8003800:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003802:	2300      	movs	r3, #0
 8003804:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003806:	2300      	movs	r3, #0
 8003808:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800380a:	2300      	movs	r3, #0
 800380c:	61fb      	str	r3, [r7, #28]
 800380e:	e159      	b.n	8003ac4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003810:	2201      	movs	r2, #1
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	fa02 f303 	lsl.w	r3, r2, r3
 8003818:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	4013      	ands	r3, r2
 8003822:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	429a      	cmp	r2, r3
 800382a:	f040 8148 	bne.w	8003abe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f003 0303 	and.w	r3, r3, #3
 8003836:	2b01      	cmp	r3, #1
 8003838:	d005      	beq.n	8003846 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003842:	2b02      	cmp	r3, #2
 8003844:	d130      	bne.n	80038a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	005b      	lsls	r3, r3, #1
 8003850:	2203      	movs	r2, #3
 8003852:	fa02 f303 	lsl.w	r3, r2, r3
 8003856:	43db      	mvns	r3, r3
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	4013      	ands	r3, r2
 800385c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	68da      	ldr	r2, [r3, #12]
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	005b      	lsls	r3, r3, #1
 8003866:	fa02 f303 	lsl.w	r3, r2, r3
 800386a:	69ba      	ldr	r2, [r7, #24]
 800386c:	4313      	orrs	r3, r2
 800386e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800387c:	2201      	movs	r2, #1
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	43db      	mvns	r3, r3
 8003886:	69ba      	ldr	r2, [r7, #24]
 8003888:	4013      	ands	r3, r2
 800388a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	091b      	lsrs	r3, r3, #4
 8003892:	f003 0201 	and.w	r2, r3, #1
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	fa02 f303 	lsl.w	r3, r2, r3
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	4313      	orrs	r3, r2
 80038a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f003 0303 	and.w	r3, r3, #3
 80038b0:	2b03      	cmp	r3, #3
 80038b2:	d017      	beq.n	80038e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	005b      	lsls	r3, r3, #1
 80038be:	2203      	movs	r2, #3
 80038c0:	fa02 f303 	lsl.w	r3, r2, r3
 80038c4:	43db      	mvns	r3, r3
 80038c6:	69ba      	ldr	r2, [r7, #24]
 80038c8:	4013      	ands	r3, r2
 80038ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	005b      	lsls	r3, r3, #1
 80038d4:	fa02 f303 	lsl.w	r3, r2, r3
 80038d8:	69ba      	ldr	r2, [r7, #24]
 80038da:	4313      	orrs	r3, r2
 80038dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f003 0303 	and.w	r3, r3, #3
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d123      	bne.n	8003938 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	08da      	lsrs	r2, r3, #3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	3208      	adds	r2, #8
 80038f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	f003 0307 	and.w	r3, r3, #7
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	220f      	movs	r2, #15
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	43db      	mvns	r3, r3
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	4013      	ands	r3, r2
 8003912:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	691a      	ldr	r2, [r3, #16]
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	f003 0307 	and.w	r3, r3, #7
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	fa02 f303 	lsl.w	r3, r2, r3
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	4313      	orrs	r3, r2
 8003928:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	08da      	lsrs	r2, r3, #3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	3208      	adds	r2, #8
 8003932:	69b9      	ldr	r1, [r7, #24]
 8003934:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	005b      	lsls	r3, r3, #1
 8003942:	2203      	movs	r2, #3
 8003944:	fa02 f303 	lsl.w	r3, r2, r3
 8003948:	43db      	mvns	r3, r3
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	4013      	ands	r3, r2
 800394e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f003 0203 	and.w	r2, r3, #3
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	005b      	lsls	r3, r3, #1
 800395c:	fa02 f303 	lsl.w	r3, r2, r3
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	4313      	orrs	r3, r2
 8003964:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003974:	2b00      	cmp	r3, #0
 8003976:	f000 80a2 	beq.w	8003abe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800397a:	2300      	movs	r3, #0
 800397c:	60fb      	str	r3, [r7, #12]
 800397e:	4b57      	ldr	r3, [pc, #348]	@ (8003adc <HAL_GPIO_Init+0x2e8>)
 8003980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003982:	4a56      	ldr	r2, [pc, #344]	@ (8003adc <HAL_GPIO_Init+0x2e8>)
 8003984:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003988:	6453      	str	r3, [r2, #68]	@ 0x44
 800398a:	4b54      	ldr	r3, [pc, #336]	@ (8003adc <HAL_GPIO_Init+0x2e8>)
 800398c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800398e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003992:	60fb      	str	r3, [r7, #12]
 8003994:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003996:	4a52      	ldr	r2, [pc, #328]	@ (8003ae0 <HAL_GPIO_Init+0x2ec>)
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	089b      	lsrs	r3, r3, #2
 800399c:	3302      	adds	r3, #2
 800399e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	f003 0303 	and.w	r3, r3, #3
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	220f      	movs	r2, #15
 80039ae:	fa02 f303 	lsl.w	r3, r2, r3
 80039b2:	43db      	mvns	r3, r3
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	4013      	ands	r3, r2
 80039b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a49      	ldr	r2, [pc, #292]	@ (8003ae4 <HAL_GPIO_Init+0x2f0>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d019      	beq.n	80039f6 <HAL_GPIO_Init+0x202>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a48      	ldr	r2, [pc, #288]	@ (8003ae8 <HAL_GPIO_Init+0x2f4>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d013      	beq.n	80039f2 <HAL_GPIO_Init+0x1fe>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a47      	ldr	r2, [pc, #284]	@ (8003aec <HAL_GPIO_Init+0x2f8>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d00d      	beq.n	80039ee <HAL_GPIO_Init+0x1fa>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a46      	ldr	r2, [pc, #280]	@ (8003af0 <HAL_GPIO_Init+0x2fc>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d007      	beq.n	80039ea <HAL_GPIO_Init+0x1f6>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a45      	ldr	r2, [pc, #276]	@ (8003af4 <HAL_GPIO_Init+0x300>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d101      	bne.n	80039e6 <HAL_GPIO_Init+0x1f2>
 80039e2:	2304      	movs	r3, #4
 80039e4:	e008      	b.n	80039f8 <HAL_GPIO_Init+0x204>
 80039e6:	2307      	movs	r3, #7
 80039e8:	e006      	b.n	80039f8 <HAL_GPIO_Init+0x204>
 80039ea:	2303      	movs	r3, #3
 80039ec:	e004      	b.n	80039f8 <HAL_GPIO_Init+0x204>
 80039ee:	2302      	movs	r3, #2
 80039f0:	e002      	b.n	80039f8 <HAL_GPIO_Init+0x204>
 80039f2:	2301      	movs	r3, #1
 80039f4:	e000      	b.n	80039f8 <HAL_GPIO_Init+0x204>
 80039f6:	2300      	movs	r3, #0
 80039f8:	69fa      	ldr	r2, [r7, #28]
 80039fa:	f002 0203 	and.w	r2, r2, #3
 80039fe:	0092      	lsls	r2, r2, #2
 8003a00:	4093      	lsls	r3, r2
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a08:	4935      	ldr	r1, [pc, #212]	@ (8003ae0 <HAL_GPIO_Init+0x2ec>)
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	089b      	lsrs	r3, r3, #2
 8003a0e:	3302      	adds	r3, #2
 8003a10:	69ba      	ldr	r2, [r7, #24]
 8003a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a16:	4b38      	ldr	r3, [pc, #224]	@ (8003af8 <HAL_GPIO_Init+0x304>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	43db      	mvns	r3, r3
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	4013      	ands	r3, r2
 8003a24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d003      	beq.n	8003a3a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003a32:	69ba      	ldr	r2, [r7, #24]
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a3a:	4a2f      	ldr	r2, [pc, #188]	@ (8003af8 <HAL_GPIO_Init+0x304>)
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a40:	4b2d      	ldr	r3, [pc, #180]	@ (8003af8 <HAL_GPIO_Init+0x304>)
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	43db      	mvns	r3, r3
 8003a4a:	69ba      	ldr	r2, [r7, #24]
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d003      	beq.n	8003a64 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a64:	4a24      	ldr	r2, [pc, #144]	@ (8003af8 <HAL_GPIO_Init+0x304>)
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a6a:	4b23      	ldr	r3, [pc, #140]	@ (8003af8 <HAL_GPIO_Init+0x304>)
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	43db      	mvns	r3, r3
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	4013      	ands	r3, r2
 8003a78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d003      	beq.n	8003a8e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a8e:	4a1a      	ldr	r2, [pc, #104]	@ (8003af8 <HAL_GPIO_Init+0x304>)
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a94:	4b18      	ldr	r3, [pc, #96]	@ (8003af8 <HAL_GPIO_Init+0x304>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	43db      	mvns	r3, r3
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d003      	beq.n	8003ab8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ab8:	4a0f      	ldr	r2, [pc, #60]	@ (8003af8 <HAL_GPIO_Init+0x304>)
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	61fb      	str	r3, [r7, #28]
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	2b0f      	cmp	r3, #15
 8003ac8:	f67f aea2 	bls.w	8003810 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003acc:	bf00      	nop
 8003ace:	bf00      	nop
 8003ad0:	3724      	adds	r7, #36	@ 0x24
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	40023800 	.word	0x40023800
 8003ae0:	40013800 	.word	0x40013800
 8003ae4:	40020000 	.word	0x40020000
 8003ae8:	40020400 	.word	0x40020400
 8003aec:	40020800 	.word	0x40020800
 8003af0:	40020c00 	.word	0x40020c00
 8003af4:	40021000 	.word	0x40021000
 8003af8:	40013c00 	.word	0x40013c00

08003afc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b087      	sub	sp, #28
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b06:	2300      	movs	r3, #0
 8003b08:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b12:	2300      	movs	r3, #0
 8003b14:	617b      	str	r3, [r7, #20]
 8003b16:	e0bb      	b.n	8003c90 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b18:	2201      	movs	r2, #1
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b20:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003b22:	683a      	ldr	r2, [r7, #0]
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	4013      	ands	r3, r2
 8003b28:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	f040 80ab 	bne.w	8003c8a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003b34:	4a5c      	ldr	r2, [pc, #368]	@ (8003ca8 <HAL_GPIO_DeInit+0x1ac>)
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	089b      	lsrs	r3, r3, #2
 8003b3a:	3302      	adds	r3, #2
 8003b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b40:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	f003 0303 	and.w	r3, r3, #3
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	220f      	movs	r2, #15
 8003b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b50:	68ba      	ldr	r2, [r7, #8]
 8003b52:	4013      	ands	r3, r2
 8003b54:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a54      	ldr	r2, [pc, #336]	@ (8003cac <HAL_GPIO_DeInit+0x1b0>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d019      	beq.n	8003b92 <HAL_GPIO_DeInit+0x96>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a53      	ldr	r2, [pc, #332]	@ (8003cb0 <HAL_GPIO_DeInit+0x1b4>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d013      	beq.n	8003b8e <HAL_GPIO_DeInit+0x92>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a52      	ldr	r2, [pc, #328]	@ (8003cb4 <HAL_GPIO_DeInit+0x1b8>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d00d      	beq.n	8003b8a <HAL_GPIO_DeInit+0x8e>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a51      	ldr	r2, [pc, #324]	@ (8003cb8 <HAL_GPIO_DeInit+0x1bc>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d007      	beq.n	8003b86 <HAL_GPIO_DeInit+0x8a>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a50      	ldr	r2, [pc, #320]	@ (8003cbc <HAL_GPIO_DeInit+0x1c0>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d101      	bne.n	8003b82 <HAL_GPIO_DeInit+0x86>
 8003b7e:	2304      	movs	r3, #4
 8003b80:	e008      	b.n	8003b94 <HAL_GPIO_DeInit+0x98>
 8003b82:	2307      	movs	r3, #7
 8003b84:	e006      	b.n	8003b94 <HAL_GPIO_DeInit+0x98>
 8003b86:	2303      	movs	r3, #3
 8003b88:	e004      	b.n	8003b94 <HAL_GPIO_DeInit+0x98>
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	e002      	b.n	8003b94 <HAL_GPIO_DeInit+0x98>
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e000      	b.n	8003b94 <HAL_GPIO_DeInit+0x98>
 8003b92:	2300      	movs	r3, #0
 8003b94:	697a      	ldr	r2, [r7, #20]
 8003b96:	f002 0203 	and.w	r2, r2, #3
 8003b9a:	0092      	lsls	r2, r2, #2
 8003b9c:	4093      	lsls	r3, r2
 8003b9e:	68ba      	ldr	r2, [r7, #8]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d132      	bne.n	8003c0a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003ba4:	4b46      	ldr	r3, [pc, #280]	@ (8003cc0 <HAL_GPIO_DeInit+0x1c4>)
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	43db      	mvns	r3, r3
 8003bac:	4944      	ldr	r1, [pc, #272]	@ (8003cc0 <HAL_GPIO_DeInit+0x1c4>)
 8003bae:	4013      	ands	r3, r2
 8003bb0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003bb2:	4b43      	ldr	r3, [pc, #268]	@ (8003cc0 <HAL_GPIO_DeInit+0x1c4>)
 8003bb4:	685a      	ldr	r2, [r3, #4]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	43db      	mvns	r3, r3
 8003bba:	4941      	ldr	r1, [pc, #260]	@ (8003cc0 <HAL_GPIO_DeInit+0x1c4>)
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003bc0:	4b3f      	ldr	r3, [pc, #252]	@ (8003cc0 <HAL_GPIO_DeInit+0x1c4>)
 8003bc2:	68da      	ldr	r2, [r3, #12]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	43db      	mvns	r3, r3
 8003bc8:	493d      	ldr	r1, [pc, #244]	@ (8003cc0 <HAL_GPIO_DeInit+0x1c4>)
 8003bca:	4013      	ands	r3, r2
 8003bcc:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003bce:	4b3c      	ldr	r3, [pc, #240]	@ (8003cc0 <HAL_GPIO_DeInit+0x1c4>)
 8003bd0:	689a      	ldr	r2, [r3, #8]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	43db      	mvns	r3, r3
 8003bd6:	493a      	ldr	r1, [pc, #232]	@ (8003cc0 <HAL_GPIO_DeInit+0x1c4>)
 8003bd8:	4013      	ands	r3, r2
 8003bda:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	f003 0303 	and.w	r3, r3, #3
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	220f      	movs	r2, #15
 8003be6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bea:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003bec:	4a2e      	ldr	r2, [pc, #184]	@ (8003ca8 <HAL_GPIO_DeInit+0x1ac>)
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	089b      	lsrs	r3, r3, #2
 8003bf2:	3302      	adds	r3, #2
 8003bf4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	43da      	mvns	r2, r3
 8003bfc:	482a      	ldr	r0, [pc, #168]	@ (8003ca8 <HAL_GPIO_DeInit+0x1ac>)
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	089b      	lsrs	r3, r3, #2
 8003c02:	400a      	ands	r2, r1
 8003c04:	3302      	adds	r3, #2
 8003c06:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	2103      	movs	r1, #3
 8003c14:	fa01 f303 	lsl.w	r3, r1, r3
 8003c18:	43db      	mvns	r3, r3
 8003c1a:	401a      	ands	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	08da      	lsrs	r2, r3, #3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	3208      	adds	r2, #8
 8003c28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	f003 0307 	and.w	r3, r3, #7
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	220f      	movs	r2, #15
 8003c36:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3a:	43db      	mvns	r3, r3
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	08d2      	lsrs	r2, r2, #3
 8003c40:	4019      	ands	r1, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	3208      	adds	r2, #8
 8003c46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	68da      	ldr	r2, [r3, #12]
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	2103      	movs	r1, #3
 8003c54:	fa01 f303 	lsl.w	r3, r1, r3
 8003c58:	43db      	mvns	r3, r3
 8003c5a:	401a      	ands	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685a      	ldr	r2, [r3, #4]
 8003c64:	2101      	movs	r1, #1
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	fa01 f303 	lsl.w	r3, r1, r3
 8003c6c:	43db      	mvns	r3, r3
 8003c6e:	401a      	ands	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689a      	ldr	r2, [r3, #8]
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	005b      	lsls	r3, r3, #1
 8003c7c:	2103      	movs	r1, #3
 8003c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c82:	43db      	mvns	r3, r3
 8003c84:	401a      	ands	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	617b      	str	r3, [r7, #20]
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	2b0f      	cmp	r3, #15
 8003c94:	f67f af40 	bls.w	8003b18 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003c98:	bf00      	nop
 8003c9a:	bf00      	nop
 8003c9c:	371c      	adds	r7, #28
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	40013800 	.word	0x40013800
 8003cac:	40020000 	.word	0x40020000
 8003cb0:	40020400 	.word	0x40020400
 8003cb4:	40020800 	.word	0x40020800
 8003cb8:	40020c00 	.word	0x40020c00
 8003cbc:	40021000 	.word	0x40021000
 8003cc0:	40013c00 	.word	0x40013c00

08003cc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	460b      	mov	r3, r1
 8003cce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	691a      	ldr	r2, [r3, #16]
 8003cd4:	887b      	ldrh	r3, [r7, #2]
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d002      	beq.n	8003ce2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	73fb      	strb	r3, [r7, #15]
 8003ce0:	e001      	b.n	8003ce6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3714      	adds	r7, #20
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	807b      	strh	r3, [r7, #2]
 8003d00:	4613      	mov	r3, r2
 8003d02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d04:	787b      	ldrb	r3, [r7, #1]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d003      	beq.n	8003d12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d0a:	887a      	ldrh	r2, [r7, #2]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d10:	e003      	b.n	8003d1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d12:	887b      	ldrh	r3, [r7, #2]
 8003d14:	041a      	lsls	r2, r3, #16
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	619a      	str	r2, [r3, #24]
}
 8003d1a:	bf00      	nop
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
	...

08003d28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d101      	bne.n	8003d3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e12b      	b.n	8003f92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d106      	bne.n	8003d54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f7fe f98c 	bl	800206c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2224      	movs	r2, #36	@ 0x24
 8003d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f022 0201 	bic.w	r2, r2, #1
 8003d6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d8c:	f001 fd4e 	bl	800582c <HAL_RCC_GetPCLK1Freq>
 8003d90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	4a81      	ldr	r2, [pc, #516]	@ (8003f9c <HAL_I2C_Init+0x274>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d807      	bhi.n	8003dac <HAL_I2C_Init+0x84>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	4a80      	ldr	r2, [pc, #512]	@ (8003fa0 <HAL_I2C_Init+0x278>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	bf94      	ite	ls
 8003da4:	2301      	movls	r3, #1
 8003da6:	2300      	movhi	r3, #0
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	e006      	b.n	8003dba <HAL_I2C_Init+0x92>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	4a7d      	ldr	r2, [pc, #500]	@ (8003fa4 <HAL_I2C_Init+0x27c>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	bf94      	ite	ls
 8003db4:	2301      	movls	r3, #1
 8003db6:	2300      	movhi	r3, #0
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d001      	beq.n	8003dc2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e0e7      	b.n	8003f92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	4a78      	ldr	r2, [pc, #480]	@ (8003fa8 <HAL_I2C_Init+0x280>)
 8003dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dca:	0c9b      	lsrs	r3, r3, #18
 8003dcc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68ba      	ldr	r2, [r7, #8]
 8003dde:	430a      	orrs	r2, r1
 8003de0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	6a1b      	ldr	r3, [r3, #32]
 8003de8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	4a6a      	ldr	r2, [pc, #424]	@ (8003f9c <HAL_I2C_Init+0x274>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d802      	bhi.n	8003dfc <HAL_I2C_Init+0xd4>
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	3301      	adds	r3, #1
 8003dfa:	e009      	b.n	8003e10 <HAL_I2C_Init+0xe8>
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003e02:	fb02 f303 	mul.w	r3, r2, r3
 8003e06:	4a69      	ldr	r2, [pc, #420]	@ (8003fac <HAL_I2C_Init+0x284>)
 8003e08:	fba2 2303 	umull	r2, r3, r2, r3
 8003e0c:	099b      	lsrs	r3, r3, #6
 8003e0e:	3301      	adds	r3, #1
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	6812      	ldr	r2, [r2, #0]
 8003e14:	430b      	orrs	r3, r1
 8003e16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	69db      	ldr	r3, [r3, #28]
 8003e1e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003e22:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	495c      	ldr	r1, [pc, #368]	@ (8003f9c <HAL_I2C_Init+0x274>)
 8003e2c:	428b      	cmp	r3, r1
 8003e2e:	d819      	bhi.n	8003e64 <HAL_I2C_Init+0x13c>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	1e59      	subs	r1, r3, #1
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	005b      	lsls	r3, r3, #1
 8003e3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e3e:	1c59      	adds	r1, r3, #1
 8003e40:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003e44:	400b      	ands	r3, r1
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00a      	beq.n	8003e60 <HAL_I2C_Init+0x138>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	1e59      	subs	r1, r3, #1
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	005b      	lsls	r3, r3, #1
 8003e54:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e58:	3301      	adds	r3, #1
 8003e5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e5e:	e051      	b.n	8003f04 <HAL_I2C_Init+0x1dc>
 8003e60:	2304      	movs	r3, #4
 8003e62:	e04f      	b.n	8003f04 <HAL_I2C_Init+0x1dc>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d111      	bne.n	8003e90 <HAL_I2C_Init+0x168>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	1e58      	subs	r0, r3, #1
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6859      	ldr	r1, [r3, #4]
 8003e74:	460b      	mov	r3, r1
 8003e76:	005b      	lsls	r3, r3, #1
 8003e78:	440b      	add	r3, r1
 8003e7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e7e:	3301      	adds	r3, #1
 8003e80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	bf0c      	ite	eq
 8003e88:	2301      	moveq	r3, #1
 8003e8a:	2300      	movne	r3, #0
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	e012      	b.n	8003eb6 <HAL_I2C_Init+0x18e>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	1e58      	subs	r0, r3, #1
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6859      	ldr	r1, [r3, #4]
 8003e98:	460b      	mov	r3, r1
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	440b      	add	r3, r1
 8003e9e:	0099      	lsls	r1, r3, #2
 8003ea0:	440b      	add	r3, r1
 8003ea2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	bf0c      	ite	eq
 8003eb0:	2301      	moveq	r3, #1
 8003eb2:	2300      	movne	r3, #0
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d001      	beq.n	8003ebe <HAL_I2C_Init+0x196>
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e022      	b.n	8003f04 <HAL_I2C_Init+0x1dc>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10e      	bne.n	8003ee4 <HAL_I2C_Init+0x1bc>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	1e58      	subs	r0, r3, #1
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6859      	ldr	r1, [r3, #4]
 8003ece:	460b      	mov	r3, r1
 8003ed0:	005b      	lsls	r3, r3, #1
 8003ed2:	440b      	add	r3, r1
 8003ed4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ed8:	3301      	adds	r3, #1
 8003eda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ede:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ee2:	e00f      	b.n	8003f04 <HAL_I2C_Init+0x1dc>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	1e58      	subs	r0, r3, #1
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6859      	ldr	r1, [r3, #4]
 8003eec:	460b      	mov	r3, r1
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	440b      	add	r3, r1
 8003ef2:	0099      	lsls	r1, r3, #2
 8003ef4:	440b      	add	r3, r1
 8003ef6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003efa:	3301      	adds	r3, #1
 8003efc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f00:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003f04:	6879      	ldr	r1, [r7, #4]
 8003f06:	6809      	ldr	r1, [r1, #0]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	69da      	ldr	r2, [r3, #28]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	430a      	orrs	r2, r1
 8003f26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003f32:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	6911      	ldr	r1, [r2, #16]
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	68d2      	ldr	r2, [r2, #12]
 8003f3e:	4311      	orrs	r1, r2
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	6812      	ldr	r2, [r2, #0]
 8003f44:	430b      	orrs	r3, r1
 8003f46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	695a      	ldr	r2, [r3, #20]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	430a      	orrs	r2, r1
 8003f62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f042 0201 	orr.w	r2, r2, #1
 8003f72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	000186a0 	.word	0x000186a0
 8003fa0:	001e847f 	.word	0x001e847f
 8003fa4:	003d08ff 	.word	0x003d08ff
 8003fa8:	431bde83 	.word	0x431bde83
 8003fac:	10624dd3 	.word	0x10624dd3

08003fb0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b088      	sub	sp, #32
 8003fb4:	af02      	add	r7, sp, #8
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	4608      	mov	r0, r1
 8003fba:	4611      	mov	r1, r2
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	817b      	strh	r3, [r7, #10]
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	813b      	strh	r3, [r7, #8]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fca:	f7fe fead 	bl	8002d28 <HAL_GetTick>
 8003fce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	2b20      	cmp	r3, #32
 8003fda:	f040 80d9 	bne.w	8004190 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	9300      	str	r3, [sp, #0]
 8003fe2:	2319      	movs	r3, #25
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	496d      	ldr	r1, [pc, #436]	@ (800419c <HAL_I2C_Mem_Write+0x1ec>)
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	f000 fdb9 	bl	8004b60 <I2C_WaitOnFlagUntilTimeout>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d001      	beq.n	8003ff8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003ff4:	2302      	movs	r3, #2
 8003ff6:	e0cc      	b.n	8004192 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d101      	bne.n	8004006 <HAL_I2C_Mem_Write+0x56>
 8004002:	2302      	movs	r3, #2
 8004004:	e0c5      	b.n	8004192 <HAL_I2C_Mem_Write+0x1e2>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0301 	and.w	r3, r3, #1
 8004018:	2b01      	cmp	r3, #1
 800401a:	d007      	beq.n	800402c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f042 0201 	orr.w	r2, r2, #1
 800402a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800403a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2221      	movs	r2, #33	@ 0x21
 8004040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2240      	movs	r2, #64	@ 0x40
 8004048:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6a3a      	ldr	r2, [r7, #32]
 8004056:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800405c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004062:	b29a      	uxth	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	4a4d      	ldr	r2, [pc, #308]	@ (80041a0 <HAL_I2C_Mem_Write+0x1f0>)
 800406c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800406e:	88f8      	ldrh	r0, [r7, #6]
 8004070:	893a      	ldrh	r2, [r7, #8]
 8004072:	8979      	ldrh	r1, [r7, #10]
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	9301      	str	r3, [sp, #4]
 8004078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800407a:	9300      	str	r3, [sp, #0]
 800407c:	4603      	mov	r3, r0
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	f000 fbf0 	bl	8004864 <I2C_RequestMemoryWrite>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d052      	beq.n	8004130 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e081      	b.n	8004192 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800408e:	697a      	ldr	r2, [r7, #20]
 8004090:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004092:	68f8      	ldr	r0, [r7, #12]
 8004094:	f000 fe7e 	bl	8004d94 <I2C_WaitOnTXEFlagUntilTimeout>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00d      	beq.n	80040ba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a2:	2b04      	cmp	r3, #4
 80040a4:	d107      	bne.n	80040b6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e06b      	b.n	8004192 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040be:	781a      	ldrb	r2, [r3, #0]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ca:	1c5a      	adds	r2, r3, #1
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040d4:	3b01      	subs	r3, #1
 80040d6:	b29a      	uxth	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	3b01      	subs	r3, #1
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	695b      	ldr	r3, [r3, #20]
 80040f0:	f003 0304 	and.w	r3, r3, #4
 80040f4:	2b04      	cmp	r3, #4
 80040f6:	d11b      	bne.n	8004130 <HAL_I2C_Mem_Write+0x180>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d017      	beq.n	8004130 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004104:	781a      	ldrb	r2, [r3, #0]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004110:	1c5a      	adds	r2, r3, #1
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800411a:	3b01      	subs	r3, #1
 800411c:	b29a      	uxth	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004126:	b29b      	uxth	r3, r3
 8004128:	3b01      	subs	r3, #1
 800412a:	b29a      	uxth	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1aa      	bne.n	800408e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004138:	697a      	ldr	r2, [r7, #20]
 800413a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800413c:	68f8      	ldr	r0, [r7, #12]
 800413e:	f000 fe71 	bl	8004e24 <I2C_WaitOnBTFFlagUntilTimeout>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00d      	beq.n	8004164 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800414c:	2b04      	cmp	r3, #4
 800414e:	d107      	bne.n	8004160 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800415e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e016      	b.n	8004192 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004172:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2220      	movs	r2, #32
 8004178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800418c:	2300      	movs	r3, #0
 800418e:	e000      	b.n	8004192 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004190:	2302      	movs	r3, #2
  }
}
 8004192:	4618      	mov	r0, r3
 8004194:	3718      	adds	r7, #24
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	00100002 	.word	0x00100002
 80041a0:	ffff0000 	.word	0xffff0000

080041a4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b08c      	sub	sp, #48	@ 0x30
 80041a8:	af02      	add	r7, sp, #8
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	4608      	mov	r0, r1
 80041ae:	4611      	mov	r1, r2
 80041b0:	461a      	mov	r2, r3
 80041b2:	4603      	mov	r3, r0
 80041b4:	817b      	strh	r3, [r7, #10]
 80041b6:	460b      	mov	r3, r1
 80041b8:	813b      	strh	r3, [r7, #8]
 80041ba:	4613      	mov	r3, r2
 80041bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80041be:	f7fe fdb3 	bl	8002d28 <HAL_GetTick>
 80041c2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	2b20      	cmp	r3, #32
 80041ce:	f040 8214 	bne.w	80045fa <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	2319      	movs	r3, #25
 80041d8:	2201      	movs	r2, #1
 80041da:	497b      	ldr	r1, [pc, #492]	@ (80043c8 <HAL_I2C_Mem_Read+0x224>)
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f000 fcbf 	bl	8004b60 <I2C_WaitOnFlagUntilTimeout>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80041e8:	2302      	movs	r3, #2
 80041ea:	e207      	b.n	80045fc <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d101      	bne.n	80041fa <HAL_I2C_Mem_Read+0x56>
 80041f6:	2302      	movs	r3, #2
 80041f8:	e200      	b.n	80045fc <HAL_I2C_Mem_Read+0x458>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2201      	movs	r2, #1
 80041fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0301 	and.w	r3, r3, #1
 800420c:	2b01      	cmp	r3, #1
 800420e:	d007      	beq.n	8004220 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f042 0201 	orr.w	r2, r2, #1
 800421e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800422e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2222      	movs	r2, #34	@ 0x22
 8004234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2240      	movs	r2, #64	@ 0x40
 800423c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800424a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004250:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004256:	b29a      	uxth	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	4a5b      	ldr	r2, [pc, #364]	@ (80043cc <HAL_I2C_Mem_Read+0x228>)
 8004260:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004262:	88f8      	ldrh	r0, [r7, #6]
 8004264:	893a      	ldrh	r2, [r7, #8]
 8004266:	8979      	ldrh	r1, [r7, #10]
 8004268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800426a:	9301      	str	r3, [sp, #4]
 800426c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	4603      	mov	r3, r0
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f000 fb8c 	bl	8004990 <I2C_RequestMemoryRead>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e1bc      	b.n	80045fc <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004286:	2b00      	cmp	r3, #0
 8004288:	d113      	bne.n	80042b2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800428a:	2300      	movs	r3, #0
 800428c:	623b      	str	r3, [r7, #32]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	695b      	ldr	r3, [r3, #20]
 8004294:	623b      	str	r3, [r7, #32]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	623b      	str	r3, [r7, #32]
 800429e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042ae:	601a      	str	r2, [r3, #0]
 80042b0:	e190      	b.n	80045d4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d11b      	bne.n	80042f2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042ca:	2300      	movs	r3, #0
 80042cc:	61fb      	str	r3, [r7, #28]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	695b      	ldr	r3, [r3, #20]
 80042d4:	61fb      	str	r3, [r7, #28]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	61fb      	str	r3, [r7, #28]
 80042de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042ee:	601a      	str	r2, [r3, #0]
 80042f0:	e170      	b.n	80045d4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d11b      	bne.n	8004332 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004308:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004318:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800431a:	2300      	movs	r3, #0
 800431c:	61bb      	str	r3, [r7, #24]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	695b      	ldr	r3, [r3, #20]
 8004324:	61bb      	str	r3, [r7, #24]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	61bb      	str	r3, [r7, #24]
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	e150      	b.n	80045d4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004332:	2300      	movs	r3, #0
 8004334:	617b      	str	r3, [r7, #20]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	695b      	ldr	r3, [r3, #20]
 800433c:	617b      	str	r3, [r7, #20]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	617b      	str	r3, [r7, #20]
 8004346:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004348:	e144      	b.n	80045d4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800434e:	2b03      	cmp	r3, #3
 8004350:	f200 80f1 	bhi.w	8004536 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004358:	2b01      	cmp	r3, #1
 800435a:	d123      	bne.n	80043a4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800435c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800435e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004360:	68f8      	ldr	r0, [r7, #12]
 8004362:	f000 fda7 	bl	8004eb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d001      	beq.n	8004370 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e145      	b.n	80045fc <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	691a      	ldr	r2, [r3, #16]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437a:	b2d2      	uxtb	r2, r2
 800437c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004382:	1c5a      	adds	r2, r3, #1
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800438c:	3b01      	subs	r3, #1
 800438e:	b29a      	uxth	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004398:	b29b      	uxth	r3, r3
 800439a:	3b01      	subs	r3, #1
 800439c:	b29a      	uxth	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80043a2:	e117      	b.n	80045d4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d14e      	bne.n	800444a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80043ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ae:	9300      	str	r3, [sp, #0]
 80043b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043b2:	2200      	movs	r2, #0
 80043b4:	4906      	ldr	r1, [pc, #24]	@ (80043d0 <HAL_I2C_Mem_Read+0x22c>)
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f000 fbd2 	bl	8004b60 <I2C_WaitOnFlagUntilTimeout>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d008      	beq.n	80043d4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e11a      	b.n	80045fc <HAL_I2C_Mem_Read+0x458>
 80043c6:	bf00      	nop
 80043c8:	00100002 	.word	0x00100002
 80043cc:	ffff0000 	.word	0xffff0000
 80043d0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	691a      	ldr	r2, [r3, #16]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ee:	b2d2      	uxtb	r2, r2
 80043f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f6:	1c5a      	adds	r2, r3, #1
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004400:	3b01      	subs	r3, #1
 8004402:	b29a      	uxth	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800440c:	b29b      	uxth	r3, r3
 800440e:	3b01      	subs	r3, #1
 8004410:	b29a      	uxth	r2, r3
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	691a      	ldr	r2, [r3, #16]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004420:	b2d2      	uxtb	r2, r2
 8004422:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004428:	1c5a      	adds	r2, r3, #1
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004432:	3b01      	subs	r3, #1
 8004434:	b29a      	uxth	r2, r3
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800443e:	b29b      	uxth	r3, r3
 8004440:	3b01      	subs	r3, #1
 8004442:	b29a      	uxth	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004448:	e0c4      	b.n	80045d4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800444a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800444c:	9300      	str	r3, [sp, #0]
 800444e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004450:	2200      	movs	r2, #0
 8004452:	496c      	ldr	r1, [pc, #432]	@ (8004604 <HAL_I2C_Mem_Read+0x460>)
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	f000 fb83 	bl	8004b60 <I2C_WaitOnFlagUntilTimeout>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d001      	beq.n	8004464 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e0cb      	b.n	80045fc <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004472:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	691a      	ldr	r2, [r3, #16]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800447e:	b2d2      	uxtb	r2, r2
 8004480:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004486:	1c5a      	adds	r2, r3, #1
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004490:	3b01      	subs	r3, #1
 8004492:	b29a      	uxth	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800449c:	b29b      	uxth	r3, r3
 800449e:	3b01      	subs	r3, #1
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044ac:	2200      	movs	r2, #0
 80044ae:	4955      	ldr	r1, [pc, #340]	@ (8004604 <HAL_I2C_Mem_Read+0x460>)
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	f000 fb55 	bl	8004b60 <I2C_WaitOnFlagUntilTimeout>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d001      	beq.n	80044c0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e09d      	b.n	80045fc <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	691a      	ldr	r2, [r3, #16]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044da:	b2d2      	uxtb	r2, r2
 80044dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e2:	1c5a      	adds	r2, r3, #1
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044ec:	3b01      	subs	r3, #1
 80044ee:	b29a      	uxth	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	3b01      	subs	r3, #1
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	691a      	ldr	r2, [r3, #16]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800450c:	b2d2      	uxtb	r2, r2
 800450e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004514:	1c5a      	adds	r2, r3, #1
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800451e:	3b01      	subs	r3, #1
 8004520:	b29a      	uxth	r2, r3
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800452a:	b29b      	uxth	r3, r3
 800452c:	3b01      	subs	r3, #1
 800452e:	b29a      	uxth	r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004534:	e04e      	b.n	80045d4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004536:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004538:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800453a:	68f8      	ldr	r0, [r7, #12]
 800453c:	f000 fcba 	bl	8004eb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d001      	beq.n	800454a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e058      	b.n	80045fc <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	691a      	ldr	r2, [r3, #16]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004554:	b2d2      	uxtb	r2, r2
 8004556:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800455c:	1c5a      	adds	r2, r3, #1
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004566:	3b01      	subs	r3, #1
 8004568:	b29a      	uxth	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004572:	b29b      	uxth	r3, r3
 8004574:	3b01      	subs	r3, #1
 8004576:	b29a      	uxth	r2, r3
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	f003 0304 	and.w	r3, r3, #4
 8004586:	2b04      	cmp	r3, #4
 8004588:	d124      	bne.n	80045d4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800458e:	2b03      	cmp	r3, #3
 8004590:	d107      	bne.n	80045a2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045a0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	691a      	ldr	r2, [r3, #16]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ac:	b2d2      	uxtb	r2, r2
 80045ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b4:	1c5a      	adds	r2, r3, #1
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045be:	3b01      	subs	r3, #1
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	3b01      	subs	r3, #1
 80045ce:	b29a      	uxth	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f47f aeb6 	bne.w	800434a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2220      	movs	r2, #32
 80045e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80045f6:	2300      	movs	r3, #0
 80045f8:	e000      	b.n	80045fc <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80045fa:	2302      	movs	r3, #2
  }
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3728      	adds	r7, #40	@ 0x28
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}
 8004604:	00010004 	.word	0x00010004

08004608 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b08a      	sub	sp, #40	@ 0x28
 800460c:	af02      	add	r7, sp, #8
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	607a      	str	r2, [r7, #4]
 8004612:	603b      	str	r3, [r7, #0]
 8004614:	460b      	mov	r3, r1
 8004616:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004618:	f7fe fb86 	bl	8002d28 <HAL_GetTick>
 800461c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800461e:	2300      	movs	r3, #0
 8004620:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b20      	cmp	r3, #32
 800462c:	f040 8111 	bne.w	8004852 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	9300      	str	r3, [sp, #0]
 8004634:	2319      	movs	r3, #25
 8004636:	2201      	movs	r2, #1
 8004638:	4988      	ldr	r1, [pc, #544]	@ (800485c <HAL_I2C_IsDeviceReady+0x254>)
 800463a:	68f8      	ldr	r0, [r7, #12]
 800463c:	f000 fa90 	bl	8004b60 <I2C_WaitOnFlagUntilTimeout>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d001      	beq.n	800464a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004646:	2302      	movs	r3, #2
 8004648:	e104      	b.n	8004854 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004650:	2b01      	cmp	r3, #1
 8004652:	d101      	bne.n	8004658 <HAL_I2C_IsDeviceReady+0x50>
 8004654:	2302      	movs	r3, #2
 8004656:	e0fd      	b.n	8004854 <HAL_I2C_IsDeviceReady+0x24c>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	2b01      	cmp	r3, #1
 800466c:	d007      	beq.n	800467e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f042 0201 	orr.w	r2, r2, #1
 800467c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800468c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2224      	movs	r2, #36	@ 0x24
 8004692:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	4a70      	ldr	r2, [pc, #448]	@ (8004860 <HAL_I2C_IsDeviceReady+0x258>)
 80046a0:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046b0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	9300      	str	r3, [sp, #0]
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f000 fa4e 	bl	8004b60 <I2C_WaitOnFlagUntilTimeout>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00d      	beq.n	80046e6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046d8:	d103      	bne.n	80046e2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046e0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e0b6      	b.n	8004854 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80046e6:	897b      	ldrh	r3, [r7, #10]
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	461a      	mov	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80046f4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80046f6:	f7fe fb17 	bl	8002d28 <HAL_GetTick>
 80046fa:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	f003 0302 	and.w	r3, r3, #2
 8004706:	2b02      	cmp	r3, #2
 8004708:	bf0c      	ite	eq
 800470a:	2301      	moveq	r3, #1
 800470c:	2300      	movne	r3, #0
 800470e:	b2db      	uxtb	r3, r3
 8004710:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	695b      	ldr	r3, [r3, #20]
 8004718:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800471c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004720:	bf0c      	ite	eq
 8004722:	2301      	moveq	r3, #1
 8004724:	2300      	movne	r3, #0
 8004726:	b2db      	uxtb	r3, r3
 8004728:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800472a:	e025      	b.n	8004778 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800472c:	f7fe fafc 	bl	8002d28 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	683a      	ldr	r2, [r7, #0]
 8004738:	429a      	cmp	r2, r3
 800473a:	d302      	bcc.n	8004742 <HAL_I2C_IsDeviceReady+0x13a>
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d103      	bne.n	800474a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	22a0      	movs	r2, #160	@ 0xa0
 8004746:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	695b      	ldr	r3, [r3, #20]
 8004750:	f003 0302 	and.w	r3, r3, #2
 8004754:	2b02      	cmp	r3, #2
 8004756:	bf0c      	ite	eq
 8004758:	2301      	moveq	r3, #1
 800475a:	2300      	movne	r3, #0
 800475c:	b2db      	uxtb	r3, r3
 800475e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800476a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800476e:	bf0c      	ite	eq
 8004770:	2301      	moveq	r3, #1
 8004772:	2300      	movne	r3, #0
 8004774:	b2db      	uxtb	r3, r3
 8004776:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800477e:	b2db      	uxtb	r3, r3
 8004780:	2ba0      	cmp	r3, #160	@ 0xa0
 8004782:	d005      	beq.n	8004790 <HAL_I2C_IsDeviceReady+0x188>
 8004784:	7dfb      	ldrb	r3, [r7, #23]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d102      	bne.n	8004790 <HAL_I2C_IsDeviceReady+0x188>
 800478a:	7dbb      	ldrb	r3, [r7, #22]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d0cd      	beq.n	800472c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2220      	movs	r2, #32
 8004794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d129      	bne.n	80047fa <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047b4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047b6:	2300      	movs	r3, #0
 80047b8:	613b      	str	r3, [r7, #16]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	695b      	ldr	r3, [r3, #20]
 80047c0:	613b      	str	r3, [r7, #16]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	613b      	str	r3, [r7, #16]
 80047ca:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	9300      	str	r3, [sp, #0]
 80047d0:	2319      	movs	r3, #25
 80047d2:	2201      	movs	r2, #1
 80047d4:	4921      	ldr	r1, [pc, #132]	@ (800485c <HAL_I2C_IsDeviceReady+0x254>)
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f000 f9c2 	bl	8004b60 <I2C_WaitOnFlagUntilTimeout>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d001      	beq.n	80047e6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e036      	b.n	8004854 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2220      	movs	r2, #32
 80047ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80047f6:	2300      	movs	r3, #0
 80047f8:	e02c      	b.n	8004854 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004808:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004812:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	9300      	str	r3, [sp, #0]
 8004818:	2319      	movs	r3, #25
 800481a:	2201      	movs	r2, #1
 800481c:	490f      	ldr	r1, [pc, #60]	@ (800485c <HAL_I2C_IsDeviceReady+0x254>)
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	f000 f99e 	bl	8004b60 <I2C_WaitOnFlagUntilTimeout>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d001      	beq.n	800482e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e012      	b.n	8004854 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	3301      	adds	r3, #1
 8004832:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004834:	69ba      	ldr	r2, [r7, #24]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	429a      	cmp	r2, r3
 800483a:	f4ff af32 	bcc.w	80046a2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2220      	movs	r2, #32
 8004842:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e000      	b.n	8004854 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004852:	2302      	movs	r3, #2
  }
}
 8004854:	4618      	mov	r0, r3
 8004856:	3720      	adds	r7, #32
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}
 800485c:	00100002 	.word	0x00100002
 8004860:	ffff0000 	.word	0xffff0000

08004864 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b088      	sub	sp, #32
 8004868:	af02      	add	r7, sp, #8
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	4608      	mov	r0, r1
 800486e:	4611      	mov	r1, r2
 8004870:	461a      	mov	r2, r3
 8004872:	4603      	mov	r3, r0
 8004874:	817b      	strh	r3, [r7, #10]
 8004876:	460b      	mov	r3, r1
 8004878:	813b      	strh	r3, [r7, #8]
 800487a:	4613      	mov	r3, r2
 800487c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800488c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800488e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004890:	9300      	str	r3, [sp, #0]
 8004892:	6a3b      	ldr	r3, [r7, #32]
 8004894:	2200      	movs	r2, #0
 8004896:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800489a:	68f8      	ldr	r0, [r7, #12]
 800489c:	f000 f960 	bl	8004b60 <I2C_WaitOnFlagUntilTimeout>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00d      	beq.n	80048c2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048b4:	d103      	bne.n	80048be <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e05f      	b.n	8004982 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80048c2:	897b      	ldrh	r3, [r7, #10]
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	461a      	mov	r2, r3
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80048d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d4:	6a3a      	ldr	r2, [r7, #32]
 80048d6:	492d      	ldr	r1, [pc, #180]	@ (800498c <I2C_RequestMemoryWrite+0x128>)
 80048d8:	68f8      	ldr	r0, [r7, #12]
 80048da:	f000 f9bb 	bl	8004c54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d001      	beq.n	80048e8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e04c      	b.n	8004982 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048e8:	2300      	movs	r3, #0
 80048ea:	617b      	str	r3, [r7, #20]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	617b      	str	r3, [r7, #20]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	617b      	str	r3, [r7, #20]
 80048fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004900:	6a39      	ldr	r1, [r7, #32]
 8004902:	68f8      	ldr	r0, [r7, #12]
 8004904:	f000 fa46 	bl	8004d94 <I2C_WaitOnTXEFlagUntilTimeout>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00d      	beq.n	800492a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004912:	2b04      	cmp	r3, #4
 8004914:	d107      	bne.n	8004926 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004924:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e02b      	b.n	8004982 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800492a:	88fb      	ldrh	r3, [r7, #6]
 800492c:	2b01      	cmp	r3, #1
 800492e:	d105      	bne.n	800493c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004930:	893b      	ldrh	r3, [r7, #8]
 8004932:	b2da      	uxtb	r2, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	611a      	str	r2, [r3, #16]
 800493a:	e021      	b.n	8004980 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800493c:	893b      	ldrh	r3, [r7, #8]
 800493e:	0a1b      	lsrs	r3, r3, #8
 8004940:	b29b      	uxth	r3, r3
 8004942:	b2da      	uxtb	r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800494a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800494c:	6a39      	ldr	r1, [r7, #32]
 800494e:	68f8      	ldr	r0, [r7, #12]
 8004950:	f000 fa20 	bl	8004d94 <I2C_WaitOnTXEFlagUntilTimeout>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00d      	beq.n	8004976 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800495e:	2b04      	cmp	r3, #4
 8004960:	d107      	bne.n	8004972 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004970:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e005      	b.n	8004982 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004976:	893b      	ldrh	r3, [r7, #8]
 8004978:	b2da      	uxtb	r2, r3
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3718      	adds	r7, #24
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	00010002 	.word	0x00010002

08004990 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b088      	sub	sp, #32
 8004994:	af02      	add	r7, sp, #8
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	4608      	mov	r0, r1
 800499a:	4611      	mov	r1, r2
 800499c:	461a      	mov	r2, r3
 800499e:	4603      	mov	r3, r0
 80049a0:	817b      	strh	r3, [r7, #10]
 80049a2:	460b      	mov	r3, r1
 80049a4:	813b      	strh	r3, [r7, #8]
 80049a6:	4613      	mov	r3, r2
 80049a8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80049b8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049cc:	9300      	str	r3, [sp, #0]
 80049ce:	6a3b      	ldr	r3, [r7, #32]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	f000 f8c2 	bl	8004b60 <I2C_WaitOnFlagUntilTimeout>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00d      	beq.n	80049fe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049f0:	d103      	bne.n	80049fa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049f8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e0aa      	b.n	8004b54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80049fe:	897b      	ldrh	r3, [r7, #10]
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	461a      	mov	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004a0c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a10:	6a3a      	ldr	r2, [r7, #32]
 8004a12:	4952      	ldr	r1, [pc, #328]	@ (8004b5c <I2C_RequestMemoryRead+0x1cc>)
 8004a14:	68f8      	ldr	r0, [r7, #12]
 8004a16:	f000 f91d 	bl	8004c54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d001      	beq.n	8004a24 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e097      	b.n	8004b54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a24:	2300      	movs	r3, #0
 8004a26:	617b      	str	r3, [r7, #20]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	617b      	str	r3, [r7, #20]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	617b      	str	r3, [r7, #20]
 8004a38:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a3c:	6a39      	ldr	r1, [r7, #32]
 8004a3e:	68f8      	ldr	r0, [r7, #12]
 8004a40:	f000 f9a8 	bl	8004d94 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00d      	beq.n	8004a66 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a4e:	2b04      	cmp	r3, #4
 8004a50:	d107      	bne.n	8004a62 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a60:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e076      	b.n	8004b54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a66:	88fb      	ldrh	r3, [r7, #6]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d105      	bne.n	8004a78 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a6c:	893b      	ldrh	r3, [r7, #8]
 8004a6e:	b2da      	uxtb	r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	611a      	str	r2, [r3, #16]
 8004a76:	e021      	b.n	8004abc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004a78:	893b      	ldrh	r3, [r7, #8]
 8004a7a:	0a1b      	lsrs	r3, r3, #8
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	b2da      	uxtb	r2, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a88:	6a39      	ldr	r1, [r7, #32]
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	f000 f982 	bl	8004d94 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00d      	beq.n	8004ab2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a9a:	2b04      	cmp	r3, #4
 8004a9c:	d107      	bne.n	8004aae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004aac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e050      	b.n	8004b54 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ab2:	893b      	ldrh	r3, [r7, #8]
 8004ab4:	b2da      	uxtb	r2, r3
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004abc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004abe:	6a39      	ldr	r1, [r7, #32]
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f000 f967 	bl	8004d94 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00d      	beq.n	8004ae8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad0:	2b04      	cmp	r3, #4
 8004ad2:	d107      	bne.n	8004ae4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ae2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e035      	b.n	8004b54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004af6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004afa:	9300      	str	r3, [sp, #0]
 8004afc:	6a3b      	ldr	r3, [r7, #32]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004b04:	68f8      	ldr	r0, [r7, #12]
 8004b06:	f000 f82b 	bl	8004b60 <I2C_WaitOnFlagUntilTimeout>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d00d      	beq.n	8004b2c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b1e:	d103      	bne.n	8004b28 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b26:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e013      	b.n	8004b54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004b2c:	897b      	ldrh	r3, [r7, #10]
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	f043 0301 	orr.w	r3, r3, #1
 8004b34:	b2da      	uxtb	r2, r3
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b3e:	6a3a      	ldr	r2, [r7, #32]
 8004b40:	4906      	ldr	r1, [pc, #24]	@ (8004b5c <I2C_RequestMemoryRead+0x1cc>)
 8004b42:	68f8      	ldr	r0, [r7, #12]
 8004b44:	f000 f886 	bl	8004c54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d001      	beq.n	8004b52 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e000      	b.n	8004b54 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3718      	adds	r7, #24
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	00010002 	.word	0x00010002

08004b60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	603b      	str	r3, [r7, #0]
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b70:	e048      	b.n	8004c04 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b78:	d044      	beq.n	8004c04 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b7a:	f7fe f8d5 	bl	8002d28 <HAL_GetTick>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	1ad3      	subs	r3, r2, r3
 8004b84:	683a      	ldr	r2, [r7, #0]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d302      	bcc.n	8004b90 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d139      	bne.n	8004c04 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	0c1b      	lsrs	r3, r3, #16
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d10d      	bne.n	8004bb6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	695b      	ldr	r3, [r3, #20]
 8004ba0:	43da      	mvns	r2, r3
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	bf0c      	ite	eq
 8004bac:	2301      	moveq	r3, #1
 8004bae:	2300      	movne	r3, #0
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	e00c      	b.n	8004bd0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	699b      	ldr	r3, [r3, #24]
 8004bbc:	43da      	mvns	r2, r3
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	bf0c      	ite	eq
 8004bc8:	2301      	moveq	r3, #1
 8004bca:	2300      	movne	r3, #0
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	461a      	mov	r2, r3
 8004bd0:	79fb      	ldrb	r3, [r7, #7]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d116      	bne.n	8004c04 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2220      	movs	r2, #32
 8004be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bf0:	f043 0220 	orr.w	r2, r3, #32
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e023      	b.n	8004c4c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	0c1b      	lsrs	r3, r3, #16
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d10d      	bne.n	8004c2a <I2C_WaitOnFlagUntilTimeout+0xca>
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	695b      	ldr	r3, [r3, #20]
 8004c14:	43da      	mvns	r2, r3
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	4013      	ands	r3, r2
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	bf0c      	ite	eq
 8004c20:	2301      	moveq	r3, #1
 8004c22:	2300      	movne	r3, #0
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	461a      	mov	r2, r3
 8004c28:	e00c      	b.n	8004c44 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	43da      	mvns	r2, r3
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	4013      	ands	r3, r2
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	bf0c      	ite	eq
 8004c3c:	2301      	moveq	r3, #1
 8004c3e:	2300      	movne	r3, #0
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	461a      	mov	r2, r3
 8004c44:	79fb      	ldrb	r3, [r7, #7]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d093      	beq.n	8004b72 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3710      	adds	r7, #16
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	607a      	str	r2, [r7, #4]
 8004c60:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c62:	e071      	b.n	8004d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c72:	d123      	bne.n	8004cbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c82:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004c8c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2220      	movs	r2, #32
 8004c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca8:	f043 0204 	orr.w	r2, r3, #4
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e067      	b.n	8004d8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc2:	d041      	beq.n	8004d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cc4:	f7fe f830 	bl	8002d28 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d302      	bcc.n	8004cda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d136      	bne.n	8004d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	0c1b      	lsrs	r3, r3, #16
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d10c      	bne.n	8004cfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	43da      	mvns	r2, r3
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	4013      	ands	r3, r2
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	bf14      	ite	ne
 8004cf6:	2301      	movne	r3, #1
 8004cf8:	2300      	moveq	r3, #0
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	e00b      	b.n	8004d16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	43da      	mvns	r2, r3
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	4013      	ands	r3, r2
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	bf14      	ite	ne
 8004d10:	2301      	movne	r3, #1
 8004d12:	2300      	moveq	r3, #0
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d016      	beq.n	8004d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2220      	movs	r2, #32
 8004d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d34:	f043 0220 	orr.w	r2, r3, #32
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e021      	b.n	8004d8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	0c1b      	lsrs	r3, r3, #16
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d10c      	bne.n	8004d6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	695b      	ldr	r3, [r3, #20]
 8004d58:	43da      	mvns	r2, r3
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	bf14      	ite	ne
 8004d64:	2301      	movne	r3, #1
 8004d66:	2300      	moveq	r3, #0
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	e00b      	b.n	8004d84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	43da      	mvns	r2, r3
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	4013      	ands	r3, r2
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	bf14      	ite	ne
 8004d7e:	2301      	movne	r3, #1
 8004d80:	2300      	moveq	r3, #0
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	f47f af6d 	bne.w	8004c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3710      	adds	r7, #16
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004da0:	e034      	b.n	8004e0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004da2:	68f8      	ldr	r0, [r7, #12]
 8004da4:	f000 f8e3 	bl	8004f6e <I2C_IsAcknowledgeFailed>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d001      	beq.n	8004db2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e034      	b.n	8004e1c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db8:	d028      	beq.n	8004e0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dba:	f7fd ffb5 	bl	8002d28 <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	68ba      	ldr	r2, [r7, #8]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d302      	bcc.n	8004dd0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d11d      	bne.n	8004e0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dda:	2b80      	cmp	r3, #128	@ 0x80
 8004ddc:	d016      	beq.n	8004e0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2200      	movs	r2, #0
 8004de2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2220      	movs	r2, #32
 8004de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df8:	f043 0220 	orr.w	r2, r3, #32
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e007      	b.n	8004e1c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	695b      	ldr	r3, [r3, #20]
 8004e12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e16:	2b80      	cmp	r3, #128	@ 0x80
 8004e18:	d1c3      	bne.n	8004da2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3710      	adds	r7, #16
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e30:	e034      	b.n	8004e9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e32:	68f8      	ldr	r0, [r7, #12]
 8004e34:	f000 f89b 	bl	8004f6e <I2C_IsAcknowledgeFailed>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d001      	beq.n	8004e42 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e034      	b.n	8004eac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e48:	d028      	beq.n	8004e9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e4a:	f7fd ff6d 	bl	8002d28 <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	68ba      	ldr	r2, [r7, #8]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d302      	bcc.n	8004e60 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d11d      	bne.n	8004e9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	f003 0304 	and.w	r3, r3, #4
 8004e6a:	2b04      	cmp	r3, #4
 8004e6c:	d016      	beq.n	8004e9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2220      	movs	r2, #32
 8004e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e88:	f043 0220 	orr.w	r2, r3, #32
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e007      	b.n	8004eac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	f003 0304 	and.w	r3, r3, #4
 8004ea6:	2b04      	cmp	r3, #4
 8004ea8:	d1c3      	bne.n	8004e32 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004eaa:	2300      	movs	r3, #0
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3710      	adds	r7, #16
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ec0:	e049      	b.n	8004f56 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	f003 0310 	and.w	r3, r3, #16
 8004ecc:	2b10      	cmp	r3, #16
 8004ece:	d119      	bne.n	8004f04 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f06f 0210 	mvn.w	r2, #16
 8004ed8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2220      	movs	r2, #32
 8004ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e030      	b.n	8004f66 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f04:	f7fd ff10 	bl	8002d28 <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	68ba      	ldr	r2, [r7, #8]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d302      	bcc.n	8004f1a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d11d      	bne.n	8004f56 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	695b      	ldr	r3, [r3, #20]
 8004f20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f24:	2b40      	cmp	r3, #64	@ 0x40
 8004f26:	d016      	beq.n	8004f56 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2220      	movs	r2, #32
 8004f32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f42:	f043 0220 	orr.w	r2, r3, #32
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e007      	b.n	8004f66 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	695b      	ldr	r3, [r3, #20]
 8004f5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f60:	2b40      	cmp	r3, #64	@ 0x40
 8004f62:	d1ae      	bne.n	8004ec2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3710      	adds	r7, #16
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004f6e:	b480      	push	{r7}
 8004f70:	b083      	sub	sp, #12
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	695b      	ldr	r3, [r3, #20]
 8004f7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f84:	d11b      	bne.n	8004fbe <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004f8e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2220      	movs	r2, #32
 8004f9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004faa:	f043 0204 	orr.w	r2, r3, #4
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e000      	b.n	8004fc0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b086      	sub	sp, #24
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e267      	b.n	80054ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0301 	and.w	r3, r3, #1
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d075      	beq.n	80050d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004fea:	4b88      	ldr	r3, [pc, #544]	@ (800520c <HAL_RCC_OscConfig+0x240>)
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	f003 030c 	and.w	r3, r3, #12
 8004ff2:	2b04      	cmp	r3, #4
 8004ff4:	d00c      	beq.n	8005010 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ff6:	4b85      	ldr	r3, [pc, #532]	@ (800520c <HAL_RCC_OscConfig+0x240>)
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004ffe:	2b08      	cmp	r3, #8
 8005000:	d112      	bne.n	8005028 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005002:	4b82      	ldr	r3, [pc, #520]	@ (800520c <HAL_RCC_OscConfig+0x240>)
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800500a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800500e:	d10b      	bne.n	8005028 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005010:	4b7e      	ldr	r3, [pc, #504]	@ (800520c <HAL_RCC_OscConfig+0x240>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d05b      	beq.n	80050d4 <HAL_RCC_OscConfig+0x108>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d157      	bne.n	80050d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e242      	b.n	80054ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005030:	d106      	bne.n	8005040 <HAL_RCC_OscConfig+0x74>
 8005032:	4b76      	ldr	r3, [pc, #472]	@ (800520c <HAL_RCC_OscConfig+0x240>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a75      	ldr	r2, [pc, #468]	@ (800520c <HAL_RCC_OscConfig+0x240>)
 8005038:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800503c:	6013      	str	r3, [r2, #0]
 800503e:	e01d      	b.n	800507c <HAL_RCC_OscConfig+0xb0>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005048:	d10c      	bne.n	8005064 <HAL_RCC_OscConfig+0x98>
 800504a:	4b70      	ldr	r3, [pc, #448]	@ (800520c <HAL_RCC_OscConfig+0x240>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a6f      	ldr	r2, [pc, #444]	@ (800520c <HAL_RCC_OscConfig+0x240>)
 8005050:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005054:	6013      	str	r3, [r2, #0]
 8005056:	4b6d      	ldr	r3, [pc, #436]	@ (800520c <HAL_RCC_OscConfig+0x240>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a6c      	ldr	r2, [pc, #432]	@ (800520c <HAL_RCC_OscConfig+0x240>)
 800505c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005060:	6013      	str	r3, [r2, #0]
 8005062:	e00b      	b.n	800507c <HAL_RCC_OscConfig+0xb0>
 8005064:	4b69      	ldr	r3, [pc, #420]	@ (800520c <HAL_RCC_OscConfig+0x240>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a68      	ldr	r2, [pc, #416]	@ (800520c <HAL_RCC_OscConfig+0x240>)
 800506a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800506e:	6013      	str	r3, [r2, #0]
 8005070:	4b66      	ldr	r3, [pc, #408]	@ (800520c <HAL_RCC_OscConfig+0x240>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a65      	ldr	r2, [pc, #404]	@ (800520c <HAL_RCC_OscConfig+0x240>)
 8005076:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800507a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d013      	beq.n	80050ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005084:	f7fd fe50 	bl	8002d28 <HAL_GetTick>
 8005088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800508a:	e008      	b.n	800509e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800508c:	f7fd fe4c 	bl	8002d28 <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	2b64      	cmp	r3, #100	@ 0x64
 8005098:	d901      	bls.n	800509e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e207      	b.n	80054ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800509e:	4b5b      	ldr	r3, [pc, #364]	@ (800520c <HAL_RCC_OscConfig+0x240>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d0f0      	beq.n	800508c <HAL_RCC_OscConfig+0xc0>
 80050aa:	e014      	b.n	80050d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050ac:	f7fd fe3c 	bl	8002d28 <HAL_GetTick>
 80050b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050b2:	e008      	b.n	80050c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050b4:	f7fd fe38 	bl	8002d28 <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	2b64      	cmp	r3, #100	@ 0x64
 80050c0:	d901      	bls.n	80050c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e1f3      	b.n	80054ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050c6:	4b51      	ldr	r3, [pc, #324]	@ (800520c <HAL_RCC_OscConfig+0x240>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d1f0      	bne.n	80050b4 <HAL_RCC_OscConfig+0xe8>
 80050d2:	e000      	b.n	80050d6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0302 	and.w	r3, r3, #2
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d063      	beq.n	80051aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80050e2:	4b4a      	ldr	r3, [pc, #296]	@ (800520c <HAL_RCC_OscConfig+0x240>)
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	f003 030c 	and.w	r3, r3, #12
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00b      	beq.n	8005106 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050ee:	4b47      	ldr	r3, [pc, #284]	@ (800520c <HAL_RCC_OscConfig+0x240>)
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80050f6:	2b08      	cmp	r3, #8
 80050f8:	d11c      	bne.n	8005134 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050fa:	4b44      	ldr	r3, [pc, #272]	@ (800520c <HAL_RCC_OscConfig+0x240>)
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d116      	bne.n	8005134 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005106:	4b41      	ldr	r3, [pc, #260]	@ (800520c <HAL_RCC_OscConfig+0x240>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0302 	and.w	r3, r3, #2
 800510e:	2b00      	cmp	r3, #0
 8005110:	d005      	beq.n	800511e <HAL_RCC_OscConfig+0x152>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	2b01      	cmp	r3, #1
 8005118:	d001      	beq.n	800511e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e1c7      	b.n	80054ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800511e:	4b3b      	ldr	r3, [pc, #236]	@ (800520c <HAL_RCC_OscConfig+0x240>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	00db      	lsls	r3, r3, #3
 800512c:	4937      	ldr	r1, [pc, #220]	@ (800520c <HAL_RCC_OscConfig+0x240>)
 800512e:	4313      	orrs	r3, r2
 8005130:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005132:	e03a      	b.n	80051aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d020      	beq.n	800517e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800513c:	4b34      	ldr	r3, [pc, #208]	@ (8005210 <HAL_RCC_OscConfig+0x244>)
 800513e:	2201      	movs	r2, #1
 8005140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005142:	f7fd fdf1 	bl	8002d28 <HAL_GetTick>
 8005146:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005148:	e008      	b.n	800515c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800514a:	f7fd fded 	bl	8002d28 <HAL_GetTick>
 800514e:	4602      	mov	r2, r0
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	2b02      	cmp	r3, #2
 8005156:	d901      	bls.n	800515c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	e1a8      	b.n	80054ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800515c:	4b2b      	ldr	r3, [pc, #172]	@ (800520c <HAL_RCC_OscConfig+0x240>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0302 	and.w	r3, r3, #2
 8005164:	2b00      	cmp	r3, #0
 8005166:	d0f0      	beq.n	800514a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005168:	4b28      	ldr	r3, [pc, #160]	@ (800520c <HAL_RCC_OscConfig+0x240>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	00db      	lsls	r3, r3, #3
 8005176:	4925      	ldr	r1, [pc, #148]	@ (800520c <HAL_RCC_OscConfig+0x240>)
 8005178:	4313      	orrs	r3, r2
 800517a:	600b      	str	r3, [r1, #0]
 800517c:	e015      	b.n	80051aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800517e:	4b24      	ldr	r3, [pc, #144]	@ (8005210 <HAL_RCC_OscConfig+0x244>)
 8005180:	2200      	movs	r2, #0
 8005182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005184:	f7fd fdd0 	bl	8002d28 <HAL_GetTick>
 8005188:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800518a:	e008      	b.n	800519e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800518c:	f7fd fdcc 	bl	8002d28 <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	2b02      	cmp	r3, #2
 8005198:	d901      	bls.n	800519e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e187      	b.n	80054ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800519e:	4b1b      	ldr	r3, [pc, #108]	@ (800520c <HAL_RCC_OscConfig+0x240>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0302 	and.w	r3, r3, #2
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d1f0      	bne.n	800518c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0308 	and.w	r3, r3, #8
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d036      	beq.n	8005224 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d016      	beq.n	80051ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051be:	4b15      	ldr	r3, [pc, #84]	@ (8005214 <HAL_RCC_OscConfig+0x248>)
 80051c0:	2201      	movs	r2, #1
 80051c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051c4:	f7fd fdb0 	bl	8002d28 <HAL_GetTick>
 80051c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051ca:	e008      	b.n	80051de <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051cc:	f7fd fdac 	bl	8002d28 <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d901      	bls.n	80051de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e167      	b.n	80054ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051de:	4b0b      	ldr	r3, [pc, #44]	@ (800520c <HAL_RCC_OscConfig+0x240>)
 80051e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051e2:	f003 0302 	and.w	r3, r3, #2
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d0f0      	beq.n	80051cc <HAL_RCC_OscConfig+0x200>
 80051ea:	e01b      	b.n	8005224 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051ec:	4b09      	ldr	r3, [pc, #36]	@ (8005214 <HAL_RCC_OscConfig+0x248>)
 80051ee:	2200      	movs	r2, #0
 80051f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051f2:	f7fd fd99 	bl	8002d28 <HAL_GetTick>
 80051f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051f8:	e00e      	b.n	8005218 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051fa:	f7fd fd95 	bl	8002d28 <HAL_GetTick>
 80051fe:	4602      	mov	r2, r0
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	2b02      	cmp	r3, #2
 8005206:	d907      	bls.n	8005218 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e150      	b.n	80054ae <HAL_RCC_OscConfig+0x4e2>
 800520c:	40023800 	.word	0x40023800
 8005210:	42470000 	.word	0x42470000
 8005214:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005218:	4b88      	ldr	r3, [pc, #544]	@ (800543c <HAL_RCC_OscConfig+0x470>)
 800521a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800521c:	f003 0302 	and.w	r3, r3, #2
 8005220:	2b00      	cmp	r3, #0
 8005222:	d1ea      	bne.n	80051fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0304 	and.w	r3, r3, #4
 800522c:	2b00      	cmp	r3, #0
 800522e:	f000 8097 	beq.w	8005360 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005232:	2300      	movs	r3, #0
 8005234:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005236:	4b81      	ldr	r3, [pc, #516]	@ (800543c <HAL_RCC_OscConfig+0x470>)
 8005238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800523a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d10f      	bne.n	8005262 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005242:	2300      	movs	r3, #0
 8005244:	60bb      	str	r3, [r7, #8]
 8005246:	4b7d      	ldr	r3, [pc, #500]	@ (800543c <HAL_RCC_OscConfig+0x470>)
 8005248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800524a:	4a7c      	ldr	r2, [pc, #496]	@ (800543c <HAL_RCC_OscConfig+0x470>)
 800524c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005250:	6413      	str	r3, [r2, #64]	@ 0x40
 8005252:	4b7a      	ldr	r3, [pc, #488]	@ (800543c <HAL_RCC_OscConfig+0x470>)
 8005254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005256:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800525a:	60bb      	str	r3, [r7, #8]
 800525c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800525e:	2301      	movs	r3, #1
 8005260:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005262:	4b77      	ldr	r3, [pc, #476]	@ (8005440 <HAL_RCC_OscConfig+0x474>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800526a:	2b00      	cmp	r3, #0
 800526c:	d118      	bne.n	80052a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800526e:	4b74      	ldr	r3, [pc, #464]	@ (8005440 <HAL_RCC_OscConfig+0x474>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a73      	ldr	r2, [pc, #460]	@ (8005440 <HAL_RCC_OscConfig+0x474>)
 8005274:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005278:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800527a:	f7fd fd55 	bl	8002d28 <HAL_GetTick>
 800527e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005280:	e008      	b.n	8005294 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005282:	f7fd fd51 	bl	8002d28 <HAL_GetTick>
 8005286:	4602      	mov	r2, r0
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	2b02      	cmp	r3, #2
 800528e:	d901      	bls.n	8005294 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e10c      	b.n	80054ae <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005294:	4b6a      	ldr	r3, [pc, #424]	@ (8005440 <HAL_RCC_OscConfig+0x474>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800529c:	2b00      	cmp	r3, #0
 800529e:	d0f0      	beq.n	8005282 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d106      	bne.n	80052b6 <HAL_RCC_OscConfig+0x2ea>
 80052a8:	4b64      	ldr	r3, [pc, #400]	@ (800543c <HAL_RCC_OscConfig+0x470>)
 80052aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052ac:	4a63      	ldr	r2, [pc, #396]	@ (800543c <HAL_RCC_OscConfig+0x470>)
 80052ae:	f043 0301 	orr.w	r3, r3, #1
 80052b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80052b4:	e01c      	b.n	80052f0 <HAL_RCC_OscConfig+0x324>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	2b05      	cmp	r3, #5
 80052bc:	d10c      	bne.n	80052d8 <HAL_RCC_OscConfig+0x30c>
 80052be:	4b5f      	ldr	r3, [pc, #380]	@ (800543c <HAL_RCC_OscConfig+0x470>)
 80052c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052c2:	4a5e      	ldr	r2, [pc, #376]	@ (800543c <HAL_RCC_OscConfig+0x470>)
 80052c4:	f043 0304 	orr.w	r3, r3, #4
 80052c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80052ca:	4b5c      	ldr	r3, [pc, #368]	@ (800543c <HAL_RCC_OscConfig+0x470>)
 80052cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052ce:	4a5b      	ldr	r2, [pc, #364]	@ (800543c <HAL_RCC_OscConfig+0x470>)
 80052d0:	f043 0301 	orr.w	r3, r3, #1
 80052d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80052d6:	e00b      	b.n	80052f0 <HAL_RCC_OscConfig+0x324>
 80052d8:	4b58      	ldr	r3, [pc, #352]	@ (800543c <HAL_RCC_OscConfig+0x470>)
 80052da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052dc:	4a57      	ldr	r2, [pc, #348]	@ (800543c <HAL_RCC_OscConfig+0x470>)
 80052de:	f023 0301 	bic.w	r3, r3, #1
 80052e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80052e4:	4b55      	ldr	r3, [pc, #340]	@ (800543c <HAL_RCC_OscConfig+0x470>)
 80052e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052e8:	4a54      	ldr	r2, [pc, #336]	@ (800543c <HAL_RCC_OscConfig+0x470>)
 80052ea:	f023 0304 	bic.w	r3, r3, #4
 80052ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d015      	beq.n	8005324 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052f8:	f7fd fd16 	bl	8002d28 <HAL_GetTick>
 80052fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052fe:	e00a      	b.n	8005316 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005300:	f7fd fd12 	bl	8002d28 <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800530e:	4293      	cmp	r3, r2
 8005310:	d901      	bls.n	8005316 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	e0cb      	b.n	80054ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005316:	4b49      	ldr	r3, [pc, #292]	@ (800543c <HAL_RCC_OscConfig+0x470>)
 8005318:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800531a:	f003 0302 	and.w	r3, r3, #2
 800531e:	2b00      	cmp	r3, #0
 8005320:	d0ee      	beq.n	8005300 <HAL_RCC_OscConfig+0x334>
 8005322:	e014      	b.n	800534e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005324:	f7fd fd00 	bl	8002d28 <HAL_GetTick>
 8005328:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800532a:	e00a      	b.n	8005342 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800532c:	f7fd fcfc 	bl	8002d28 <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	f241 3288 	movw	r2, #5000	@ 0x1388
 800533a:	4293      	cmp	r3, r2
 800533c:	d901      	bls.n	8005342 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e0b5      	b.n	80054ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005342:	4b3e      	ldr	r3, [pc, #248]	@ (800543c <HAL_RCC_OscConfig+0x470>)
 8005344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005346:	f003 0302 	and.w	r3, r3, #2
 800534a:	2b00      	cmp	r3, #0
 800534c:	d1ee      	bne.n	800532c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800534e:	7dfb      	ldrb	r3, [r7, #23]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d105      	bne.n	8005360 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005354:	4b39      	ldr	r3, [pc, #228]	@ (800543c <HAL_RCC_OscConfig+0x470>)
 8005356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005358:	4a38      	ldr	r2, [pc, #224]	@ (800543c <HAL_RCC_OscConfig+0x470>)
 800535a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800535e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	2b00      	cmp	r3, #0
 8005366:	f000 80a1 	beq.w	80054ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800536a:	4b34      	ldr	r3, [pc, #208]	@ (800543c <HAL_RCC_OscConfig+0x470>)
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f003 030c 	and.w	r3, r3, #12
 8005372:	2b08      	cmp	r3, #8
 8005374:	d05c      	beq.n	8005430 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	699b      	ldr	r3, [r3, #24]
 800537a:	2b02      	cmp	r3, #2
 800537c:	d141      	bne.n	8005402 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800537e:	4b31      	ldr	r3, [pc, #196]	@ (8005444 <HAL_RCC_OscConfig+0x478>)
 8005380:	2200      	movs	r2, #0
 8005382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005384:	f7fd fcd0 	bl	8002d28 <HAL_GetTick>
 8005388:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800538a:	e008      	b.n	800539e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800538c:	f7fd fccc 	bl	8002d28 <HAL_GetTick>
 8005390:	4602      	mov	r2, r0
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	2b02      	cmp	r3, #2
 8005398:	d901      	bls.n	800539e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e087      	b.n	80054ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800539e:	4b27      	ldr	r3, [pc, #156]	@ (800543c <HAL_RCC_OscConfig+0x470>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d1f0      	bne.n	800538c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	69da      	ldr	r2, [r3, #28]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a1b      	ldr	r3, [r3, #32]
 80053b2:	431a      	orrs	r2, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b8:	019b      	lsls	r3, r3, #6
 80053ba:	431a      	orrs	r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053c0:	085b      	lsrs	r3, r3, #1
 80053c2:	3b01      	subs	r3, #1
 80053c4:	041b      	lsls	r3, r3, #16
 80053c6:	431a      	orrs	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053cc:	061b      	lsls	r3, r3, #24
 80053ce:	491b      	ldr	r1, [pc, #108]	@ (800543c <HAL_RCC_OscConfig+0x470>)
 80053d0:	4313      	orrs	r3, r2
 80053d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053d4:	4b1b      	ldr	r3, [pc, #108]	@ (8005444 <HAL_RCC_OscConfig+0x478>)
 80053d6:	2201      	movs	r2, #1
 80053d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053da:	f7fd fca5 	bl	8002d28 <HAL_GetTick>
 80053de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053e0:	e008      	b.n	80053f4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053e2:	f7fd fca1 	bl	8002d28 <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d901      	bls.n	80053f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	e05c      	b.n	80054ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053f4:	4b11      	ldr	r3, [pc, #68]	@ (800543c <HAL_RCC_OscConfig+0x470>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d0f0      	beq.n	80053e2 <HAL_RCC_OscConfig+0x416>
 8005400:	e054      	b.n	80054ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005402:	4b10      	ldr	r3, [pc, #64]	@ (8005444 <HAL_RCC_OscConfig+0x478>)
 8005404:	2200      	movs	r2, #0
 8005406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005408:	f7fd fc8e 	bl	8002d28 <HAL_GetTick>
 800540c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800540e:	e008      	b.n	8005422 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005410:	f7fd fc8a 	bl	8002d28 <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	2b02      	cmp	r3, #2
 800541c:	d901      	bls.n	8005422 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	e045      	b.n	80054ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005422:	4b06      	ldr	r3, [pc, #24]	@ (800543c <HAL_RCC_OscConfig+0x470>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1f0      	bne.n	8005410 <HAL_RCC_OscConfig+0x444>
 800542e:	e03d      	b.n	80054ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	699b      	ldr	r3, [r3, #24]
 8005434:	2b01      	cmp	r3, #1
 8005436:	d107      	bne.n	8005448 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e038      	b.n	80054ae <HAL_RCC_OscConfig+0x4e2>
 800543c:	40023800 	.word	0x40023800
 8005440:	40007000 	.word	0x40007000
 8005444:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005448:	4b1b      	ldr	r3, [pc, #108]	@ (80054b8 <HAL_RCC_OscConfig+0x4ec>)
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	699b      	ldr	r3, [r3, #24]
 8005452:	2b01      	cmp	r3, #1
 8005454:	d028      	beq.n	80054a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005460:	429a      	cmp	r2, r3
 8005462:	d121      	bne.n	80054a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800546e:	429a      	cmp	r2, r3
 8005470:	d11a      	bne.n	80054a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005478:	4013      	ands	r3, r2
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800547e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005480:	4293      	cmp	r3, r2
 8005482:	d111      	bne.n	80054a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800548e:	085b      	lsrs	r3, r3, #1
 8005490:	3b01      	subs	r3, #1
 8005492:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005494:	429a      	cmp	r2, r3
 8005496:	d107      	bne.n	80054a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d001      	beq.n	80054ac <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e000      	b.n	80054ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3718      	adds	r7, #24
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	40023800 	.word	0x40023800

080054bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d101      	bne.n	80054d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e0cc      	b.n	800566a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80054d0:	4b68      	ldr	r3, [pc, #416]	@ (8005674 <HAL_RCC_ClockConfig+0x1b8>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0307 	and.w	r3, r3, #7
 80054d8:	683a      	ldr	r2, [r7, #0]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d90c      	bls.n	80054f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054de:	4b65      	ldr	r3, [pc, #404]	@ (8005674 <HAL_RCC_ClockConfig+0x1b8>)
 80054e0:	683a      	ldr	r2, [r7, #0]
 80054e2:	b2d2      	uxtb	r2, r2
 80054e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054e6:	4b63      	ldr	r3, [pc, #396]	@ (8005674 <HAL_RCC_ClockConfig+0x1b8>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0307 	and.w	r3, r3, #7
 80054ee:	683a      	ldr	r2, [r7, #0]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d001      	beq.n	80054f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e0b8      	b.n	800566a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0302 	and.w	r3, r3, #2
 8005500:	2b00      	cmp	r3, #0
 8005502:	d020      	beq.n	8005546 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0304 	and.w	r3, r3, #4
 800550c:	2b00      	cmp	r3, #0
 800550e:	d005      	beq.n	800551c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005510:	4b59      	ldr	r3, [pc, #356]	@ (8005678 <HAL_RCC_ClockConfig+0x1bc>)
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	4a58      	ldr	r2, [pc, #352]	@ (8005678 <HAL_RCC_ClockConfig+0x1bc>)
 8005516:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800551a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0308 	and.w	r3, r3, #8
 8005524:	2b00      	cmp	r3, #0
 8005526:	d005      	beq.n	8005534 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005528:	4b53      	ldr	r3, [pc, #332]	@ (8005678 <HAL_RCC_ClockConfig+0x1bc>)
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	4a52      	ldr	r2, [pc, #328]	@ (8005678 <HAL_RCC_ClockConfig+0x1bc>)
 800552e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005532:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005534:	4b50      	ldr	r3, [pc, #320]	@ (8005678 <HAL_RCC_ClockConfig+0x1bc>)
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	494d      	ldr	r1, [pc, #308]	@ (8005678 <HAL_RCC_ClockConfig+0x1bc>)
 8005542:	4313      	orrs	r3, r2
 8005544:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 0301 	and.w	r3, r3, #1
 800554e:	2b00      	cmp	r3, #0
 8005550:	d044      	beq.n	80055dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	2b01      	cmp	r3, #1
 8005558:	d107      	bne.n	800556a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800555a:	4b47      	ldr	r3, [pc, #284]	@ (8005678 <HAL_RCC_ClockConfig+0x1bc>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d119      	bne.n	800559a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e07f      	b.n	800566a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	2b02      	cmp	r3, #2
 8005570:	d003      	beq.n	800557a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005576:	2b03      	cmp	r3, #3
 8005578:	d107      	bne.n	800558a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800557a:	4b3f      	ldr	r3, [pc, #252]	@ (8005678 <HAL_RCC_ClockConfig+0x1bc>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d109      	bne.n	800559a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e06f      	b.n	800566a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800558a:	4b3b      	ldr	r3, [pc, #236]	@ (8005678 <HAL_RCC_ClockConfig+0x1bc>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 0302 	and.w	r3, r3, #2
 8005592:	2b00      	cmp	r3, #0
 8005594:	d101      	bne.n	800559a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e067      	b.n	800566a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800559a:	4b37      	ldr	r3, [pc, #220]	@ (8005678 <HAL_RCC_ClockConfig+0x1bc>)
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	f023 0203 	bic.w	r2, r3, #3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	4934      	ldr	r1, [pc, #208]	@ (8005678 <HAL_RCC_ClockConfig+0x1bc>)
 80055a8:	4313      	orrs	r3, r2
 80055aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055ac:	f7fd fbbc 	bl	8002d28 <HAL_GetTick>
 80055b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055b2:	e00a      	b.n	80055ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055b4:	f7fd fbb8 	bl	8002d28 <HAL_GetTick>
 80055b8:	4602      	mov	r2, r0
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d901      	bls.n	80055ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e04f      	b.n	800566a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055ca:	4b2b      	ldr	r3, [pc, #172]	@ (8005678 <HAL_RCC_ClockConfig+0x1bc>)
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f003 020c 	and.w	r2, r3, #12
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	429a      	cmp	r2, r3
 80055da:	d1eb      	bne.n	80055b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80055dc:	4b25      	ldr	r3, [pc, #148]	@ (8005674 <HAL_RCC_ClockConfig+0x1b8>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0307 	and.w	r3, r3, #7
 80055e4:	683a      	ldr	r2, [r7, #0]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d20c      	bcs.n	8005604 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055ea:	4b22      	ldr	r3, [pc, #136]	@ (8005674 <HAL_RCC_ClockConfig+0x1b8>)
 80055ec:	683a      	ldr	r2, [r7, #0]
 80055ee:	b2d2      	uxtb	r2, r2
 80055f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055f2:	4b20      	ldr	r3, [pc, #128]	@ (8005674 <HAL_RCC_ClockConfig+0x1b8>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 0307 	and.w	r3, r3, #7
 80055fa:	683a      	ldr	r2, [r7, #0]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d001      	beq.n	8005604 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e032      	b.n	800566a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 0304 	and.w	r3, r3, #4
 800560c:	2b00      	cmp	r3, #0
 800560e:	d008      	beq.n	8005622 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005610:	4b19      	ldr	r3, [pc, #100]	@ (8005678 <HAL_RCC_ClockConfig+0x1bc>)
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	4916      	ldr	r1, [pc, #88]	@ (8005678 <HAL_RCC_ClockConfig+0x1bc>)
 800561e:	4313      	orrs	r3, r2
 8005620:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 0308 	and.w	r3, r3, #8
 800562a:	2b00      	cmp	r3, #0
 800562c:	d009      	beq.n	8005642 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800562e:	4b12      	ldr	r3, [pc, #72]	@ (8005678 <HAL_RCC_ClockConfig+0x1bc>)
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	00db      	lsls	r3, r3, #3
 800563c:	490e      	ldr	r1, [pc, #56]	@ (8005678 <HAL_RCC_ClockConfig+0x1bc>)
 800563e:	4313      	orrs	r3, r2
 8005640:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005642:	f000 f821 	bl	8005688 <HAL_RCC_GetSysClockFreq>
 8005646:	4602      	mov	r2, r0
 8005648:	4b0b      	ldr	r3, [pc, #44]	@ (8005678 <HAL_RCC_ClockConfig+0x1bc>)
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	091b      	lsrs	r3, r3, #4
 800564e:	f003 030f 	and.w	r3, r3, #15
 8005652:	490a      	ldr	r1, [pc, #40]	@ (800567c <HAL_RCC_ClockConfig+0x1c0>)
 8005654:	5ccb      	ldrb	r3, [r1, r3]
 8005656:	fa22 f303 	lsr.w	r3, r2, r3
 800565a:	4a09      	ldr	r2, [pc, #36]	@ (8005680 <HAL_RCC_ClockConfig+0x1c4>)
 800565c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800565e:	4b09      	ldr	r3, [pc, #36]	@ (8005684 <HAL_RCC_ClockConfig+0x1c8>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4618      	mov	r0, r3
 8005664:	f7fd fb1c 	bl	8002ca0 <HAL_InitTick>

  return HAL_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	3710      	adds	r7, #16
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	40023c00 	.word	0x40023c00
 8005678:	40023800 	.word	0x40023800
 800567c:	080071a8 	.word	0x080071a8
 8005680:	20000014 	.word	0x20000014
 8005684:	20000018 	.word	0x20000018

08005688 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005688:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800568c:	b090      	sub	sp, #64	@ 0x40
 800568e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005690:	2300      	movs	r3, #0
 8005692:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005694:	2300      	movs	r3, #0
 8005696:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005698:	2300      	movs	r3, #0
 800569a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800569c:	2300      	movs	r3, #0
 800569e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056a0:	4b59      	ldr	r3, [pc, #356]	@ (8005808 <HAL_RCC_GetSysClockFreq+0x180>)
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	f003 030c 	and.w	r3, r3, #12
 80056a8:	2b08      	cmp	r3, #8
 80056aa:	d00d      	beq.n	80056c8 <HAL_RCC_GetSysClockFreq+0x40>
 80056ac:	2b08      	cmp	r3, #8
 80056ae:	f200 80a1 	bhi.w	80057f4 <HAL_RCC_GetSysClockFreq+0x16c>
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d002      	beq.n	80056bc <HAL_RCC_GetSysClockFreq+0x34>
 80056b6:	2b04      	cmp	r3, #4
 80056b8:	d003      	beq.n	80056c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80056ba:	e09b      	b.n	80057f4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80056bc:	4b53      	ldr	r3, [pc, #332]	@ (800580c <HAL_RCC_GetSysClockFreq+0x184>)
 80056be:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80056c0:	e09b      	b.n	80057fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80056c2:	4b53      	ldr	r3, [pc, #332]	@ (8005810 <HAL_RCC_GetSysClockFreq+0x188>)
 80056c4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80056c6:	e098      	b.n	80057fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80056c8:	4b4f      	ldr	r3, [pc, #316]	@ (8005808 <HAL_RCC_GetSysClockFreq+0x180>)
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80056d0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80056d2:	4b4d      	ldr	r3, [pc, #308]	@ (8005808 <HAL_RCC_GetSysClockFreq+0x180>)
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d028      	beq.n	8005730 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056de:	4b4a      	ldr	r3, [pc, #296]	@ (8005808 <HAL_RCC_GetSysClockFreq+0x180>)
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	099b      	lsrs	r3, r3, #6
 80056e4:	2200      	movs	r2, #0
 80056e6:	623b      	str	r3, [r7, #32]
 80056e8:	627a      	str	r2, [r7, #36]	@ 0x24
 80056ea:	6a3b      	ldr	r3, [r7, #32]
 80056ec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80056f0:	2100      	movs	r1, #0
 80056f2:	4b47      	ldr	r3, [pc, #284]	@ (8005810 <HAL_RCC_GetSysClockFreq+0x188>)
 80056f4:	fb03 f201 	mul.w	r2, r3, r1
 80056f8:	2300      	movs	r3, #0
 80056fa:	fb00 f303 	mul.w	r3, r0, r3
 80056fe:	4413      	add	r3, r2
 8005700:	4a43      	ldr	r2, [pc, #268]	@ (8005810 <HAL_RCC_GetSysClockFreq+0x188>)
 8005702:	fba0 1202 	umull	r1, r2, r0, r2
 8005706:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005708:	460a      	mov	r2, r1
 800570a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800570c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800570e:	4413      	add	r3, r2
 8005710:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005712:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005714:	2200      	movs	r2, #0
 8005716:	61bb      	str	r3, [r7, #24]
 8005718:	61fa      	str	r2, [r7, #28]
 800571a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800571e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005722:	f7fb fa15 	bl	8000b50 <__aeabi_uldivmod>
 8005726:	4602      	mov	r2, r0
 8005728:	460b      	mov	r3, r1
 800572a:	4613      	mov	r3, r2
 800572c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800572e:	e053      	b.n	80057d8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005730:	4b35      	ldr	r3, [pc, #212]	@ (8005808 <HAL_RCC_GetSysClockFreq+0x180>)
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	099b      	lsrs	r3, r3, #6
 8005736:	2200      	movs	r2, #0
 8005738:	613b      	str	r3, [r7, #16]
 800573a:	617a      	str	r2, [r7, #20]
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005742:	f04f 0b00 	mov.w	fp, #0
 8005746:	4652      	mov	r2, sl
 8005748:	465b      	mov	r3, fp
 800574a:	f04f 0000 	mov.w	r0, #0
 800574e:	f04f 0100 	mov.w	r1, #0
 8005752:	0159      	lsls	r1, r3, #5
 8005754:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005758:	0150      	lsls	r0, r2, #5
 800575a:	4602      	mov	r2, r0
 800575c:	460b      	mov	r3, r1
 800575e:	ebb2 080a 	subs.w	r8, r2, sl
 8005762:	eb63 090b 	sbc.w	r9, r3, fp
 8005766:	f04f 0200 	mov.w	r2, #0
 800576a:	f04f 0300 	mov.w	r3, #0
 800576e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005772:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005776:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800577a:	ebb2 0408 	subs.w	r4, r2, r8
 800577e:	eb63 0509 	sbc.w	r5, r3, r9
 8005782:	f04f 0200 	mov.w	r2, #0
 8005786:	f04f 0300 	mov.w	r3, #0
 800578a:	00eb      	lsls	r3, r5, #3
 800578c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005790:	00e2      	lsls	r2, r4, #3
 8005792:	4614      	mov	r4, r2
 8005794:	461d      	mov	r5, r3
 8005796:	eb14 030a 	adds.w	r3, r4, sl
 800579a:	603b      	str	r3, [r7, #0]
 800579c:	eb45 030b 	adc.w	r3, r5, fp
 80057a0:	607b      	str	r3, [r7, #4]
 80057a2:	f04f 0200 	mov.w	r2, #0
 80057a6:	f04f 0300 	mov.w	r3, #0
 80057aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80057ae:	4629      	mov	r1, r5
 80057b0:	028b      	lsls	r3, r1, #10
 80057b2:	4621      	mov	r1, r4
 80057b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80057b8:	4621      	mov	r1, r4
 80057ba:	028a      	lsls	r2, r1, #10
 80057bc:	4610      	mov	r0, r2
 80057be:	4619      	mov	r1, r3
 80057c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057c2:	2200      	movs	r2, #0
 80057c4:	60bb      	str	r3, [r7, #8]
 80057c6:	60fa      	str	r2, [r7, #12]
 80057c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80057cc:	f7fb f9c0 	bl	8000b50 <__aeabi_uldivmod>
 80057d0:	4602      	mov	r2, r0
 80057d2:	460b      	mov	r3, r1
 80057d4:	4613      	mov	r3, r2
 80057d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80057d8:	4b0b      	ldr	r3, [pc, #44]	@ (8005808 <HAL_RCC_GetSysClockFreq+0x180>)
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	0c1b      	lsrs	r3, r3, #16
 80057de:	f003 0303 	and.w	r3, r3, #3
 80057e2:	3301      	adds	r3, #1
 80057e4:	005b      	lsls	r3, r3, #1
 80057e6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80057e8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80057ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80057f0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80057f2:	e002      	b.n	80057fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80057f4:	4b05      	ldr	r3, [pc, #20]	@ (800580c <HAL_RCC_GetSysClockFreq+0x184>)
 80057f6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80057f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3740      	adds	r7, #64	@ 0x40
 8005800:	46bd      	mov	sp, r7
 8005802:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005806:	bf00      	nop
 8005808:	40023800 	.word	0x40023800
 800580c:	00f42400 	.word	0x00f42400
 8005810:	017d7840 	.word	0x017d7840

08005814 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005814:	b480      	push	{r7}
 8005816:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005818:	4b03      	ldr	r3, [pc, #12]	@ (8005828 <HAL_RCC_GetHCLKFreq+0x14>)
 800581a:	681b      	ldr	r3, [r3, #0]
}
 800581c:	4618      	mov	r0, r3
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	20000014 	.word	0x20000014

0800582c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005830:	f7ff fff0 	bl	8005814 <HAL_RCC_GetHCLKFreq>
 8005834:	4602      	mov	r2, r0
 8005836:	4b05      	ldr	r3, [pc, #20]	@ (800584c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	0a9b      	lsrs	r3, r3, #10
 800583c:	f003 0307 	and.w	r3, r3, #7
 8005840:	4903      	ldr	r1, [pc, #12]	@ (8005850 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005842:	5ccb      	ldrb	r3, [r1, r3]
 8005844:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005848:	4618      	mov	r0, r3
 800584a:	bd80      	pop	{r7, pc}
 800584c:	40023800 	.word	0x40023800
 8005850:	080071b8 	.word	0x080071b8

08005854 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b082      	sub	sp, #8
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d101      	bne.n	8005866 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e041      	b.n	80058ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b00      	cmp	r3, #0
 8005870:	d106      	bne.n	8005880 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f7fc fc3e 	bl	80020fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2202      	movs	r2, #2
 8005884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	3304      	adds	r3, #4
 8005890:	4619      	mov	r1, r3
 8005892:	4610      	mov	r0, r2
 8005894:	f000 fe24 	bl	80064e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3708      	adds	r7, #8
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
	...

080058f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005902:	b2db      	uxtb	r3, r3
 8005904:	2b01      	cmp	r3, #1
 8005906:	d001      	beq.n	800590c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e044      	b.n	8005996 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2202      	movs	r2, #2
 8005910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68da      	ldr	r2, [r3, #12]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f042 0201 	orr.w	r2, r2, #1
 8005922:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a1e      	ldr	r2, [pc, #120]	@ (80059a4 <HAL_TIM_Base_Start_IT+0xb0>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d018      	beq.n	8005960 <HAL_TIM_Base_Start_IT+0x6c>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005936:	d013      	beq.n	8005960 <HAL_TIM_Base_Start_IT+0x6c>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a1a      	ldr	r2, [pc, #104]	@ (80059a8 <HAL_TIM_Base_Start_IT+0xb4>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d00e      	beq.n	8005960 <HAL_TIM_Base_Start_IT+0x6c>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a19      	ldr	r2, [pc, #100]	@ (80059ac <HAL_TIM_Base_Start_IT+0xb8>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d009      	beq.n	8005960 <HAL_TIM_Base_Start_IT+0x6c>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a17      	ldr	r2, [pc, #92]	@ (80059b0 <HAL_TIM_Base_Start_IT+0xbc>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d004      	beq.n	8005960 <HAL_TIM_Base_Start_IT+0x6c>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a16      	ldr	r2, [pc, #88]	@ (80059b4 <HAL_TIM_Base_Start_IT+0xc0>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d111      	bne.n	8005984 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	f003 0307 	and.w	r3, r3, #7
 800596a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2b06      	cmp	r3, #6
 8005970:	d010      	beq.n	8005994 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f042 0201 	orr.w	r2, r2, #1
 8005980:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005982:	e007      	b.n	8005994 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f042 0201 	orr.w	r2, r2, #1
 8005992:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3714      	adds	r7, #20
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	40010000 	.word	0x40010000
 80059a8:	40000400 	.word	0x40000400
 80059ac:	40000800 	.word	0x40000800
 80059b0:	40000c00 	.word	0x40000c00
 80059b4:	40014000 	.word	0x40014000

080059b8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d101      	bne.n	80059ca <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e041      	b.n	8005a4e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d106      	bne.n	80059e4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 f839 	bl	8005a56 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2202      	movs	r2, #2
 80059e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	3304      	adds	r3, #4
 80059f4:	4619      	mov	r1, r3
 80059f6:	4610      	mov	r0, r2
 80059f8:	f000 fd72 	bl	80064e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3708      	adds	r7, #8
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005a56:	b480      	push	{r7}
 8005a58:	b083      	sub	sp, #12
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005a5e:	bf00      	nop
 8005a60:	370c      	adds	r7, #12
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr

08005a6a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a6a:	b580      	push	{r7, lr}
 8005a6c:	b082      	sub	sp, #8
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d101      	bne.n	8005a7c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e041      	b.n	8005b00 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d106      	bne.n	8005a96 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f7fc fb5b 	bl	800214c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2202      	movs	r2, #2
 8005a9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	3304      	adds	r3, #4
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	4610      	mov	r0, r2
 8005aaa:	f000 fd19 	bl	80064e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2201      	movs	r2, #1
 8005aca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2201      	movs	r2, #1
 8005af2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2201      	movs	r2, #1
 8005afa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3708      	adds	r7, #8
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d109      	bne.n	8005b2c <HAL_TIM_PWM_Start+0x24>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	bf14      	ite	ne
 8005b24:	2301      	movne	r3, #1
 8005b26:	2300      	moveq	r3, #0
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	e022      	b.n	8005b72 <HAL_TIM_PWM_Start+0x6a>
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	2b04      	cmp	r3, #4
 8005b30:	d109      	bne.n	8005b46 <HAL_TIM_PWM_Start+0x3e>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	bf14      	ite	ne
 8005b3e:	2301      	movne	r3, #1
 8005b40:	2300      	moveq	r3, #0
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	e015      	b.n	8005b72 <HAL_TIM_PWM_Start+0x6a>
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	2b08      	cmp	r3, #8
 8005b4a:	d109      	bne.n	8005b60 <HAL_TIM_PWM_Start+0x58>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	bf14      	ite	ne
 8005b58:	2301      	movne	r3, #1
 8005b5a:	2300      	moveq	r3, #0
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	e008      	b.n	8005b72 <HAL_TIM_PWM_Start+0x6a>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	bf14      	ite	ne
 8005b6c:	2301      	movne	r3, #1
 8005b6e:	2300      	moveq	r3, #0
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d001      	beq.n	8005b7a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e068      	b.n	8005c4c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d104      	bne.n	8005b8a <HAL_TIM_PWM_Start+0x82>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2202      	movs	r2, #2
 8005b84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b88:	e013      	b.n	8005bb2 <HAL_TIM_PWM_Start+0xaa>
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	2b04      	cmp	r3, #4
 8005b8e:	d104      	bne.n	8005b9a <HAL_TIM_PWM_Start+0x92>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2202      	movs	r2, #2
 8005b94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b98:	e00b      	b.n	8005bb2 <HAL_TIM_PWM_Start+0xaa>
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	2b08      	cmp	r3, #8
 8005b9e:	d104      	bne.n	8005baa <HAL_TIM_PWM_Start+0xa2>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2202      	movs	r2, #2
 8005ba4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ba8:	e003      	b.n	8005bb2 <HAL_TIM_PWM_Start+0xaa>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2202      	movs	r2, #2
 8005bae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	6839      	ldr	r1, [r7, #0]
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f000 ff3c 	bl	8006a38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a23      	ldr	r2, [pc, #140]	@ (8005c54 <HAL_TIM_PWM_Start+0x14c>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d107      	bne.n	8005bda <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005bd8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a1d      	ldr	r2, [pc, #116]	@ (8005c54 <HAL_TIM_PWM_Start+0x14c>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d018      	beq.n	8005c16 <HAL_TIM_PWM_Start+0x10e>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bec:	d013      	beq.n	8005c16 <HAL_TIM_PWM_Start+0x10e>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a19      	ldr	r2, [pc, #100]	@ (8005c58 <HAL_TIM_PWM_Start+0x150>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d00e      	beq.n	8005c16 <HAL_TIM_PWM_Start+0x10e>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a17      	ldr	r2, [pc, #92]	@ (8005c5c <HAL_TIM_PWM_Start+0x154>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d009      	beq.n	8005c16 <HAL_TIM_PWM_Start+0x10e>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a16      	ldr	r2, [pc, #88]	@ (8005c60 <HAL_TIM_PWM_Start+0x158>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d004      	beq.n	8005c16 <HAL_TIM_PWM_Start+0x10e>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a14      	ldr	r2, [pc, #80]	@ (8005c64 <HAL_TIM_PWM_Start+0x15c>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d111      	bne.n	8005c3a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	f003 0307 	and.w	r3, r3, #7
 8005c20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2b06      	cmp	r3, #6
 8005c26:	d010      	beq.n	8005c4a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f042 0201 	orr.w	r2, r2, #1
 8005c36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c38:	e007      	b.n	8005c4a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f042 0201 	orr.w	r2, r2, #1
 8005c48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3710      	adds	r7, #16
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	40010000 	.word	0x40010000
 8005c58:	40000400 	.word	0x40000400
 8005c5c:	40000800 	.word	0x40000800
 8005c60:	40000c00 	.word	0x40000c00
 8005c64:	40014000 	.word	0x40014000

08005c68 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b086      	sub	sp, #24
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d101      	bne.n	8005c7c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e097      	b.n	8005dac <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d106      	bne.n	8005c96 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f7fc fa91 	bl	80021b8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2202      	movs	r2, #2
 8005c9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	6812      	ldr	r2, [r2, #0]
 8005ca8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005cac:	f023 0307 	bic.w	r3, r3, #7
 8005cb0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	3304      	adds	r3, #4
 8005cba:	4619      	mov	r1, r3
 8005cbc:	4610      	mov	r0, r2
 8005cbe:	f000 fc0f 	bl	80064e0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	699b      	ldr	r3, [r3, #24]
 8005cd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	6a1b      	ldr	r3, [r3, #32]
 8005cd8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	697a      	ldr	r2, [r7, #20]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cea:	f023 0303 	bic.w	r3, r3, #3
 8005cee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	689a      	ldr	r2, [r3, #8]
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	699b      	ldr	r3, [r3, #24]
 8005cf8:	021b      	lsls	r3, r3, #8
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005d08:	f023 030c 	bic.w	r3, r3, #12
 8005d0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005d14:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	68da      	ldr	r2, [r3, #12]
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	69db      	ldr	r3, [r3, #28]
 8005d22:	021b      	lsls	r3, r3, #8
 8005d24:	4313      	orrs	r3, r2
 8005d26:	693a      	ldr	r2, [r7, #16]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	011a      	lsls	r2, r3, #4
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	6a1b      	ldr	r3, [r3, #32]
 8005d36:	031b      	lsls	r3, r3, #12
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	693a      	ldr	r2, [r7, #16]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005d46:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005d4e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	685a      	ldr	r2, [r3, #4]
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	695b      	ldr	r3, [r3, #20]
 8005d58:	011b      	lsls	r3, r3, #4
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	697a      	ldr	r2, [r7, #20]
 8005d68:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	693a      	ldr	r2, [r7, #16]
 8005d70:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2201      	movs	r2, #1
 8005d86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2201      	movs	r2, #1
 8005d96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2201      	movs	r2, #1
 8005da6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3718      	adds	r7, #24
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005dc4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005dcc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005dd4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005ddc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d110      	bne.n	8005e06 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005de4:	7bfb      	ldrb	r3, [r7, #15]
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d102      	bne.n	8005df0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005dea:	7b7b      	ldrb	r3, [r7, #13]
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d001      	beq.n	8005df4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e069      	b.n	8005ec8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2202      	movs	r2, #2
 8005df8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2202      	movs	r2, #2
 8005e00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e04:	e031      	b.n	8005e6a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	2b04      	cmp	r3, #4
 8005e0a:	d110      	bne.n	8005e2e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e0c:	7bbb      	ldrb	r3, [r7, #14]
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d102      	bne.n	8005e18 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e12:	7b3b      	ldrb	r3, [r7, #12]
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d001      	beq.n	8005e1c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e055      	b.n	8005ec8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2202      	movs	r2, #2
 8005e20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2202      	movs	r2, #2
 8005e28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e2c:	e01d      	b.n	8005e6a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e2e:	7bfb      	ldrb	r3, [r7, #15]
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d108      	bne.n	8005e46 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e34:	7bbb      	ldrb	r3, [r7, #14]
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d105      	bne.n	8005e46 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e3a:	7b7b      	ldrb	r3, [r7, #13]
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d102      	bne.n	8005e46 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e40:	7b3b      	ldrb	r3, [r7, #12]
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d001      	beq.n	8005e4a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e03e      	b.n	8005ec8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2202      	movs	r2, #2
 8005e4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2202      	movs	r2, #2
 8005e56:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2202      	movs	r2, #2
 8005e5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2202      	movs	r2, #2
 8005e66:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d003      	beq.n	8005e78 <HAL_TIM_Encoder_Start+0xc4>
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	2b04      	cmp	r3, #4
 8005e74:	d008      	beq.n	8005e88 <HAL_TIM_Encoder_Start+0xd4>
 8005e76:	e00f      	b.n	8005e98 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	2100      	movs	r1, #0
 8005e80:	4618      	mov	r0, r3
 8005e82:	f000 fdd9 	bl	8006a38 <TIM_CCxChannelCmd>
      break;
 8005e86:	e016      	b.n	8005eb6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	2104      	movs	r1, #4
 8005e90:	4618      	mov	r0, r3
 8005e92:	f000 fdd1 	bl	8006a38 <TIM_CCxChannelCmd>
      break;
 8005e96:	e00e      	b.n	8005eb6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	2100      	movs	r1, #0
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f000 fdc9 	bl	8006a38 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	2104      	movs	r1, #4
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f000 fdc2 	bl	8006a38 <TIM_CCxChannelCmd>
      break;
 8005eb4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f042 0201 	orr.w	r2, r2, #1
 8005ec4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005ec6:	2300      	movs	r3, #0
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3710      	adds	r7, #16
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	f003 0302 	and.w	r3, r3, #2
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d020      	beq.n	8005f34 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f003 0302 	and.w	r3, r3, #2
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d01b      	beq.n	8005f34 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f06f 0202 	mvn.w	r2, #2
 8005f04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	699b      	ldr	r3, [r3, #24]
 8005f12:	f003 0303 	and.w	r3, r3, #3
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d003      	beq.n	8005f22 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 fac1 	bl	80064a2 <HAL_TIM_IC_CaptureCallback>
 8005f20:	e005      	b.n	8005f2e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 fab3 	bl	800648e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 fac4 	bl	80064b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	f003 0304 	and.w	r3, r3, #4
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d020      	beq.n	8005f80 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f003 0304 	and.w	r3, r3, #4
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d01b      	beq.n	8005f80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f06f 0204 	mvn.w	r2, #4
 8005f50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2202      	movs	r2, #2
 8005f56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	699b      	ldr	r3, [r3, #24]
 8005f5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d003      	beq.n	8005f6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 fa9b 	bl	80064a2 <HAL_TIM_IC_CaptureCallback>
 8005f6c:	e005      	b.n	8005f7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 fa8d 	bl	800648e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f000 fa9e 	bl	80064b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	f003 0308 	and.w	r3, r3, #8
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d020      	beq.n	8005fcc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f003 0308 	and.w	r3, r3, #8
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d01b      	beq.n	8005fcc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f06f 0208 	mvn.w	r2, #8
 8005f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2204      	movs	r2, #4
 8005fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	69db      	ldr	r3, [r3, #28]
 8005faa:	f003 0303 	and.w	r3, r3, #3
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d003      	beq.n	8005fba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 fa75 	bl	80064a2 <HAL_TIM_IC_CaptureCallback>
 8005fb8:	e005      	b.n	8005fc6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 fa67 	bl	800648e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f000 fa78 	bl	80064b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	f003 0310 	and.w	r3, r3, #16
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d020      	beq.n	8006018 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f003 0310 	and.w	r3, r3, #16
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d01b      	beq.n	8006018 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f06f 0210 	mvn.w	r2, #16
 8005fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2208      	movs	r2, #8
 8005fee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	69db      	ldr	r3, [r3, #28]
 8005ff6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d003      	beq.n	8006006 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 fa4f 	bl	80064a2 <HAL_TIM_IC_CaptureCallback>
 8006004:	e005      	b.n	8006012 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 fa41 	bl	800648e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 fa52 	bl	80064b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	f003 0301 	and.w	r3, r3, #1
 800601e:	2b00      	cmp	r3, #0
 8006020:	d00c      	beq.n	800603c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f003 0301 	and.w	r3, r3, #1
 8006028:	2b00      	cmp	r3, #0
 800602a:	d007      	beq.n	800603c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f06f 0201 	mvn.w	r2, #1
 8006034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 fa1f 	bl	800647a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00c      	beq.n	8006060 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800604c:	2b00      	cmp	r3, #0
 800604e:	d007      	beq.n	8006060 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 fddc 	bl	8006c18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006066:	2b00      	cmp	r3, #0
 8006068:	d00c      	beq.n	8006084 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006070:	2b00      	cmp	r3, #0
 8006072:	d007      	beq.n	8006084 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800607c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 fa23 	bl	80064ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	f003 0320 	and.w	r3, r3, #32
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00c      	beq.n	80060a8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f003 0320 	and.w	r3, r3, #32
 8006094:	2b00      	cmp	r3, #0
 8006096:	d007      	beq.n	80060a8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f06f 0220 	mvn.w	r2, #32
 80060a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 fdae 	bl	8006c04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060a8:	bf00      	nop
 80060aa:	3710      	adds	r7, #16
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b086      	sub	sp, #24
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060bc:	2300      	movs	r3, #0
 80060be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d101      	bne.n	80060ce <HAL_TIM_OC_ConfigChannel+0x1e>
 80060ca:	2302      	movs	r3, #2
 80060cc:	e048      	b.n	8006160 <HAL_TIM_OC_ConfigChannel+0xb0>
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2201      	movs	r2, #1
 80060d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2b0c      	cmp	r3, #12
 80060da:	d839      	bhi.n	8006150 <HAL_TIM_OC_ConfigChannel+0xa0>
 80060dc:	a201      	add	r2, pc, #4	@ (adr r2, 80060e4 <HAL_TIM_OC_ConfigChannel+0x34>)
 80060de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e2:	bf00      	nop
 80060e4:	08006119 	.word	0x08006119
 80060e8:	08006151 	.word	0x08006151
 80060ec:	08006151 	.word	0x08006151
 80060f0:	08006151 	.word	0x08006151
 80060f4:	08006127 	.word	0x08006127
 80060f8:	08006151 	.word	0x08006151
 80060fc:	08006151 	.word	0x08006151
 8006100:	08006151 	.word	0x08006151
 8006104:	08006135 	.word	0x08006135
 8006108:	08006151 	.word	0x08006151
 800610c:	08006151 	.word	0x08006151
 8006110:	08006151 	.word	0x08006151
 8006114:	08006143 	.word	0x08006143
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68b9      	ldr	r1, [r7, #8]
 800611e:	4618      	mov	r0, r3
 8006120:	f000 fa64 	bl	80065ec <TIM_OC1_SetConfig>
      break;
 8006124:	e017      	b.n	8006156 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	68b9      	ldr	r1, [r7, #8]
 800612c:	4618      	mov	r0, r3
 800612e:	f000 fac3 	bl	80066b8 <TIM_OC2_SetConfig>
      break;
 8006132:	e010      	b.n	8006156 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68b9      	ldr	r1, [r7, #8]
 800613a:	4618      	mov	r0, r3
 800613c:	f000 fb28 	bl	8006790 <TIM_OC3_SetConfig>
      break;
 8006140:	e009      	b.n	8006156 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68b9      	ldr	r1, [r7, #8]
 8006148:	4618      	mov	r0, r3
 800614a:	f000 fb8b 	bl	8006864 <TIM_OC4_SetConfig>
      break;
 800614e:	e002      	b.n	8006156 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	75fb      	strb	r3, [r7, #23]
      break;
 8006154:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800615e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006160:	4618      	mov	r0, r3
 8006162:	3718      	adds	r7, #24
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b086      	sub	sp, #24
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006174:	2300      	movs	r3, #0
 8006176:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800617e:	2b01      	cmp	r3, #1
 8006180:	d101      	bne.n	8006186 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006182:	2302      	movs	r3, #2
 8006184:	e0ae      	b.n	80062e4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2201      	movs	r2, #1
 800618a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2b0c      	cmp	r3, #12
 8006192:	f200 809f 	bhi.w	80062d4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006196:	a201      	add	r2, pc, #4	@ (adr r2, 800619c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800619c:	080061d1 	.word	0x080061d1
 80061a0:	080062d5 	.word	0x080062d5
 80061a4:	080062d5 	.word	0x080062d5
 80061a8:	080062d5 	.word	0x080062d5
 80061ac:	08006211 	.word	0x08006211
 80061b0:	080062d5 	.word	0x080062d5
 80061b4:	080062d5 	.word	0x080062d5
 80061b8:	080062d5 	.word	0x080062d5
 80061bc:	08006253 	.word	0x08006253
 80061c0:	080062d5 	.word	0x080062d5
 80061c4:	080062d5 	.word	0x080062d5
 80061c8:	080062d5 	.word	0x080062d5
 80061cc:	08006293 	.word	0x08006293
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68b9      	ldr	r1, [r7, #8]
 80061d6:	4618      	mov	r0, r3
 80061d8:	f000 fa08 	bl	80065ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	699a      	ldr	r2, [r3, #24]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f042 0208 	orr.w	r2, r2, #8
 80061ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	699a      	ldr	r2, [r3, #24]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f022 0204 	bic.w	r2, r2, #4
 80061fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	6999      	ldr	r1, [r3, #24]
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	691a      	ldr	r2, [r3, #16]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	430a      	orrs	r2, r1
 800620c:	619a      	str	r2, [r3, #24]
      break;
 800620e:	e064      	b.n	80062da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	68b9      	ldr	r1, [r7, #8]
 8006216:	4618      	mov	r0, r3
 8006218:	f000 fa4e 	bl	80066b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	699a      	ldr	r2, [r3, #24]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800622a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	699a      	ldr	r2, [r3, #24]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800623a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	6999      	ldr	r1, [r3, #24]
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	021a      	lsls	r2, r3, #8
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	430a      	orrs	r2, r1
 800624e:	619a      	str	r2, [r3, #24]
      break;
 8006250:	e043      	b.n	80062da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	68b9      	ldr	r1, [r7, #8]
 8006258:	4618      	mov	r0, r3
 800625a:	f000 fa99 	bl	8006790 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	69da      	ldr	r2, [r3, #28]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f042 0208 	orr.w	r2, r2, #8
 800626c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	69da      	ldr	r2, [r3, #28]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f022 0204 	bic.w	r2, r2, #4
 800627c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	69d9      	ldr	r1, [r3, #28]
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	691a      	ldr	r2, [r3, #16]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	430a      	orrs	r2, r1
 800628e:	61da      	str	r2, [r3, #28]
      break;
 8006290:	e023      	b.n	80062da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68b9      	ldr	r1, [r7, #8]
 8006298:	4618      	mov	r0, r3
 800629a:	f000 fae3 	bl	8006864 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	69da      	ldr	r2, [r3, #28]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80062ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	69da      	ldr	r2, [r3, #28]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	69d9      	ldr	r1, [r3, #28]
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	691b      	ldr	r3, [r3, #16]
 80062c8:	021a      	lsls	r2, r3, #8
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	430a      	orrs	r2, r1
 80062d0:	61da      	str	r2, [r3, #28]
      break;
 80062d2:	e002      	b.n	80062da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	75fb      	strb	r3, [r7, #23]
      break;
 80062d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80062e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3718      	adds	r7, #24
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062f6:	2300      	movs	r3, #0
 80062f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006300:	2b01      	cmp	r3, #1
 8006302:	d101      	bne.n	8006308 <HAL_TIM_ConfigClockSource+0x1c>
 8006304:	2302      	movs	r3, #2
 8006306:	e0b4      	b.n	8006472 <HAL_TIM_ConfigClockSource+0x186>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2202      	movs	r2, #2
 8006314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006326:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800632e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	68ba      	ldr	r2, [r7, #8]
 8006336:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006340:	d03e      	beq.n	80063c0 <HAL_TIM_ConfigClockSource+0xd4>
 8006342:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006346:	f200 8087 	bhi.w	8006458 <HAL_TIM_ConfigClockSource+0x16c>
 800634a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800634e:	f000 8086 	beq.w	800645e <HAL_TIM_ConfigClockSource+0x172>
 8006352:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006356:	d87f      	bhi.n	8006458 <HAL_TIM_ConfigClockSource+0x16c>
 8006358:	2b70      	cmp	r3, #112	@ 0x70
 800635a:	d01a      	beq.n	8006392 <HAL_TIM_ConfigClockSource+0xa6>
 800635c:	2b70      	cmp	r3, #112	@ 0x70
 800635e:	d87b      	bhi.n	8006458 <HAL_TIM_ConfigClockSource+0x16c>
 8006360:	2b60      	cmp	r3, #96	@ 0x60
 8006362:	d050      	beq.n	8006406 <HAL_TIM_ConfigClockSource+0x11a>
 8006364:	2b60      	cmp	r3, #96	@ 0x60
 8006366:	d877      	bhi.n	8006458 <HAL_TIM_ConfigClockSource+0x16c>
 8006368:	2b50      	cmp	r3, #80	@ 0x50
 800636a:	d03c      	beq.n	80063e6 <HAL_TIM_ConfigClockSource+0xfa>
 800636c:	2b50      	cmp	r3, #80	@ 0x50
 800636e:	d873      	bhi.n	8006458 <HAL_TIM_ConfigClockSource+0x16c>
 8006370:	2b40      	cmp	r3, #64	@ 0x40
 8006372:	d058      	beq.n	8006426 <HAL_TIM_ConfigClockSource+0x13a>
 8006374:	2b40      	cmp	r3, #64	@ 0x40
 8006376:	d86f      	bhi.n	8006458 <HAL_TIM_ConfigClockSource+0x16c>
 8006378:	2b30      	cmp	r3, #48	@ 0x30
 800637a:	d064      	beq.n	8006446 <HAL_TIM_ConfigClockSource+0x15a>
 800637c:	2b30      	cmp	r3, #48	@ 0x30
 800637e:	d86b      	bhi.n	8006458 <HAL_TIM_ConfigClockSource+0x16c>
 8006380:	2b20      	cmp	r3, #32
 8006382:	d060      	beq.n	8006446 <HAL_TIM_ConfigClockSource+0x15a>
 8006384:	2b20      	cmp	r3, #32
 8006386:	d867      	bhi.n	8006458 <HAL_TIM_ConfigClockSource+0x16c>
 8006388:	2b00      	cmp	r3, #0
 800638a:	d05c      	beq.n	8006446 <HAL_TIM_ConfigClockSource+0x15a>
 800638c:	2b10      	cmp	r3, #16
 800638e:	d05a      	beq.n	8006446 <HAL_TIM_ConfigClockSource+0x15a>
 8006390:	e062      	b.n	8006458 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80063a2:	f000 fb29 	bl	80069f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80063b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68ba      	ldr	r2, [r7, #8]
 80063bc:	609a      	str	r2, [r3, #8]
      break;
 80063be:	e04f      	b.n	8006460 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80063d0:	f000 fb12 	bl	80069f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	689a      	ldr	r2, [r3, #8]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80063e2:	609a      	str	r2, [r3, #8]
      break;
 80063e4:	e03c      	b.n	8006460 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063f2:	461a      	mov	r2, r3
 80063f4:	f000 fa86 	bl	8006904 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2150      	movs	r1, #80	@ 0x50
 80063fe:	4618      	mov	r0, r3
 8006400:	f000 fadf 	bl	80069c2 <TIM_ITRx_SetConfig>
      break;
 8006404:	e02c      	b.n	8006460 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006412:	461a      	mov	r2, r3
 8006414:	f000 faa5 	bl	8006962 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2160      	movs	r1, #96	@ 0x60
 800641e:	4618      	mov	r0, r3
 8006420:	f000 facf 	bl	80069c2 <TIM_ITRx_SetConfig>
      break;
 8006424:	e01c      	b.n	8006460 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006432:	461a      	mov	r2, r3
 8006434:	f000 fa66 	bl	8006904 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	2140      	movs	r1, #64	@ 0x40
 800643e:	4618      	mov	r0, r3
 8006440:	f000 fabf 	bl	80069c2 <TIM_ITRx_SetConfig>
      break;
 8006444:	e00c      	b.n	8006460 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4619      	mov	r1, r3
 8006450:	4610      	mov	r0, r2
 8006452:	f000 fab6 	bl	80069c2 <TIM_ITRx_SetConfig>
      break;
 8006456:	e003      	b.n	8006460 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	73fb      	strb	r3, [r7, #15]
      break;
 800645c:	e000      	b.n	8006460 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800645e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006470:	7bfb      	ldrb	r3, [r7, #15]
}
 8006472:	4618      	mov	r0, r3
 8006474:	3710      	adds	r7, #16
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}

0800647a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800647a:	b480      	push	{r7}
 800647c:	b083      	sub	sp, #12
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006482:	bf00      	nop
 8006484:	370c      	adds	r7, #12
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr

0800648e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800648e:	b480      	push	{r7}
 8006490:	b083      	sub	sp, #12
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006496:	bf00      	nop
 8006498:	370c      	adds	r7, #12
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr

080064a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80064a2:	b480      	push	{r7}
 80064a4:	b083      	sub	sp, #12
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064aa:	bf00      	nop
 80064ac:	370c      	adds	r7, #12
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr

080064b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064b6:	b480      	push	{r7}
 80064b8:	b083      	sub	sp, #12
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064be:	bf00      	nop
 80064c0:	370c      	adds	r7, #12
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr

080064ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064ca:	b480      	push	{r7}
 80064cc:	b083      	sub	sp, #12
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064d2:	bf00      	nop
 80064d4:	370c      	adds	r7, #12
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr
	...

080064e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b085      	sub	sp, #20
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4a37      	ldr	r2, [pc, #220]	@ (80065d0 <TIM_Base_SetConfig+0xf0>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d00f      	beq.n	8006518 <TIM_Base_SetConfig+0x38>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064fe:	d00b      	beq.n	8006518 <TIM_Base_SetConfig+0x38>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a34      	ldr	r2, [pc, #208]	@ (80065d4 <TIM_Base_SetConfig+0xf4>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d007      	beq.n	8006518 <TIM_Base_SetConfig+0x38>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a33      	ldr	r2, [pc, #204]	@ (80065d8 <TIM_Base_SetConfig+0xf8>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d003      	beq.n	8006518 <TIM_Base_SetConfig+0x38>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4a32      	ldr	r2, [pc, #200]	@ (80065dc <TIM_Base_SetConfig+0xfc>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d108      	bne.n	800652a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800651e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	4313      	orrs	r3, r2
 8006528:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a28      	ldr	r2, [pc, #160]	@ (80065d0 <TIM_Base_SetConfig+0xf0>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d01b      	beq.n	800656a <TIM_Base_SetConfig+0x8a>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006538:	d017      	beq.n	800656a <TIM_Base_SetConfig+0x8a>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4a25      	ldr	r2, [pc, #148]	@ (80065d4 <TIM_Base_SetConfig+0xf4>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d013      	beq.n	800656a <TIM_Base_SetConfig+0x8a>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4a24      	ldr	r2, [pc, #144]	@ (80065d8 <TIM_Base_SetConfig+0xf8>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d00f      	beq.n	800656a <TIM_Base_SetConfig+0x8a>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a23      	ldr	r2, [pc, #140]	@ (80065dc <TIM_Base_SetConfig+0xfc>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d00b      	beq.n	800656a <TIM_Base_SetConfig+0x8a>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4a22      	ldr	r2, [pc, #136]	@ (80065e0 <TIM_Base_SetConfig+0x100>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d007      	beq.n	800656a <TIM_Base_SetConfig+0x8a>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a21      	ldr	r2, [pc, #132]	@ (80065e4 <TIM_Base_SetConfig+0x104>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d003      	beq.n	800656a <TIM_Base_SetConfig+0x8a>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a20      	ldr	r2, [pc, #128]	@ (80065e8 <TIM_Base_SetConfig+0x108>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d108      	bne.n	800657c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006570:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	4313      	orrs	r3, r2
 800657a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	695b      	ldr	r3, [r3, #20]
 8006586:	4313      	orrs	r3, r2
 8006588:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	689a      	ldr	r2, [r3, #8]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a0c      	ldr	r2, [pc, #48]	@ (80065d0 <TIM_Base_SetConfig+0xf0>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d103      	bne.n	80065aa <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	691a      	ldr	r2, [r3, #16]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f043 0204 	orr.w	r2, r3, #4
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2201      	movs	r2, #1
 80065ba:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	68fa      	ldr	r2, [r7, #12]
 80065c0:	601a      	str	r2, [r3, #0]
}
 80065c2:	bf00      	nop
 80065c4:	3714      	adds	r7, #20
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr
 80065ce:	bf00      	nop
 80065d0:	40010000 	.word	0x40010000
 80065d4:	40000400 	.word	0x40000400
 80065d8:	40000800 	.word	0x40000800
 80065dc:	40000c00 	.word	0x40000c00
 80065e0:	40014000 	.word	0x40014000
 80065e4:	40014400 	.word	0x40014400
 80065e8:	40014800 	.word	0x40014800

080065ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b087      	sub	sp, #28
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a1b      	ldr	r3, [r3, #32]
 80065fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a1b      	ldr	r3, [r3, #32]
 8006600:	f023 0201 	bic.w	r2, r3, #1
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	699b      	ldr	r3, [r3, #24]
 8006612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800661a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f023 0303 	bic.w	r3, r3, #3
 8006622:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	4313      	orrs	r3, r2
 800662c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	f023 0302 	bic.w	r3, r3, #2
 8006634:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	697a      	ldr	r2, [r7, #20]
 800663c:	4313      	orrs	r3, r2
 800663e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4a1c      	ldr	r2, [pc, #112]	@ (80066b4 <TIM_OC1_SetConfig+0xc8>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d10c      	bne.n	8006662 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	f023 0308 	bic.w	r3, r3, #8
 800664e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	697a      	ldr	r2, [r7, #20]
 8006656:	4313      	orrs	r3, r2
 8006658:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	f023 0304 	bic.w	r3, r3, #4
 8006660:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4a13      	ldr	r2, [pc, #76]	@ (80066b4 <TIM_OC1_SetConfig+0xc8>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d111      	bne.n	800668e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006670:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006678:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	695b      	ldr	r3, [r3, #20]
 800667e:	693a      	ldr	r2, [r7, #16]
 8006680:	4313      	orrs	r3, r2
 8006682:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	699b      	ldr	r3, [r3, #24]
 8006688:	693a      	ldr	r2, [r7, #16]
 800668a:	4313      	orrs	r3, r2
 800668c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	693a      	ldr	r2, [r7, #16]
 8006692:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	68fa      	ldr	r2, [r7, #12]
 8006698:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	685a      	ldr	r2, [r3, #4]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	697a      	ldr	r2, [r7, #20]
 80066a6:	621a      	str	r2, [r3, #32]
}
 80066a8:	bf00      	nop
 80066aa:	371c      	adds	r7, #28
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr
 80066b4:	40010000 	.word	0x40010000

080066b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b087      	sub	sp, #28
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6a1b      	ldr	r3, [r3, #32]
 80066c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6a1b      	ldr	r3, [r3, #32]
 80066cc:	f023 0210 	bic.w	r2, r3, #16
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	699b      	ldr	r3, [r3, #24]
 80066de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	021b      	lsls	r3, r3, #8
 80066f6:	68fa      	ldr	r2, [r7, #12]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	f023 0320 	bic.w	r3, r3, #32
 8006702:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	011b      	lsls	r3, r3, #4
 800670a:	697a      	ldr	r2, [r7, #20]
 800670c:	4313      	orrs	r3, r2
 800670e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4a1e      	ldr	r2, [pc, #120]	@ (800678c <TIM_OC2_SetConfig+0xd4>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d10d      	bne.n	8006734 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800671e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	011b      	lsls	r3, r3, #4
 8006726:	697a      	ldr	r2, [r7, #20]
 8006728:	4313      	orrs	r3, r2
 800672a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006732:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	4a15      	ldr	r2, [pc, #84]	@ (800678c <TIM_OC2_SetConfig+0xd4>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d113      	bne.n	8006764 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006742:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800674a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	695b      	ldr	r3, [r3, #20]
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	693a      	ldr	r2, [r7, #16]
 8006754:	4313      	orrs	r3, r2
 8006756:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	699b      	ldr	r3, [r3, #24]
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	693a      	ldr	r2, [r7, #16]
 8006760:	4313      	orrs	r3, r2
 8006762:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	693a      	ldr	r2, [r7, #16]
 8006768:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	68fa      	ldr	r2, [r7, #12]
 800676e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	685a      	ldr	r2, [r3, #4]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	697a      	ldr	r2, [r7, #20]
 800677c:	621a      	str	r2, [r3, #32]
}
 800677e:	bf00      	nop
 8006780:	371c      	adds	r7, #28
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop
 800678c:	40010000 	.word	0x40010000

08006790 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006790:	b480      	push	{r7}
 8006792:	b087      	sub	sp, #28
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a1b      	ldr	r3, [r3, #32]
 800679e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6a1b      	ldr	r3, [r3, #32]
 80067a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	69db      	ldr	r3, [r3, #28]
 80067b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f023 0303 	bic.w	r3, r3, #3
 80067c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	68fa      	ldr	r2, [r7, #12]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80067d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	021b      	lsls	r3, r3, #8
 80067e0:	697a      	ldr	r2, [r7, #20]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a1d      	ldr	r2, [pc, #116]	@ (8006860 <TIM_OC3_SetConfig+0xd0>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d10d      	bne.n	800680a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80067f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	021b      	lsls	r3, r3, #8
 80067fc:	697a      	ldr	r2, [r7, #20]
 80067fe:	4313      	orrs	r3, r2
 8006800:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006808:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a14      	ldr	r2, [pc, #80]	@ (8006860 <TIM_OC3_SetConfig+0xd0>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d113      	bne.n	800683a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006818:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006820:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	695b      	ldr	r3, [r3, #20]
 8006826:	011b      	lsls	r3, r3, #4
 8006828:	693a      	ldr	r2, [r7, #16]
 800682a:	4313      	orrs	r3, r2
 800682c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	699b      	ldr	r3, [r3, #24]
 8006832:	011b      	lsls	r3, r3, #4
 8006834:	693a      	ldr	r2, [r7, #16]
 8006836:	4313      	orrs	r3, r2
 8006838:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	693a      	ldr	r2, [r7, #16]
 800683e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	68fa      	ldr	r2, [r7, #12]
 8006844:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	685a      	ldr	r2, [r3, #4]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	697a      	ldr	r2, [r7, #20]
 8006852:	621a      	str	r2, [r3, #32]
}
 8006854:	bf00      	nop
 8006856:	371c      	adds	r7, #28
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr
 8006860:	40010000 	.word	0x40010000

08006864 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006864:	b480      	push	{r7}
 8006866:	b087      	sub	sp, #28
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6a1b      	ldr	r3, [r3, #32]
 8006872:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6a1b      	ldr	r3, [r3, #32]
 8006878:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	69db      	ldr	r3, [r3, #28]
 800688a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800689a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	021b      	lsls	r3, r3, #8
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80068ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	031b      	lsls	r3, r3, #12
 80068b6:	693a      	ldr	r2, [r7, #16]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a10      	ldr	r2, [pc, #64]	@ (8006900 <TIM_OC4_SetConfig+0x9c>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d109      	bne.n	80068d8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	695b      	ldr	r3, [r3, #20]
 80068d0:	019b      	lsls	r3, r3, #6
 80068d2:	697a      	ldr	r2, [r7, #20]
 80068d4:	4313      	orrs	r3, r2
 80068d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	697a      	ldr	r2, [r7, #20]
 80068dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	685a      	ldr	r2, [r3, #4]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	693a      	ldr	r2, [r7, #16]
 80068f0:	621a      	str	r2, [r3, #32]
}
 80068f2:	bf00      	nop
 80068f4:	371c      	adds	r7, #28
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop
 8006900:	40010000 	.word	0x40010000

08006904 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006904:	b480      	push	{r7}
 8006906:	b087      	sub	sp, #28
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6a1b      	ldr	r3, [r3, #32]
 8006914:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6a1b      	ldr	r3, [r3, #32]
 800691a:	f023 0201 	bic.w	r2, r3, #1
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	699b      	ldr	r3, [r3, #24]
 8006926:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800692e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	011b      	lsls	r3, r3, #4
 8006934:	693a      	ldr	r2, [r7, #16]
 8006936:	4313      	orrs	r3, r2
 8006938:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	f023 030a 	bic.w	r3, r3, #10
 8006940:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006942:	697a      	ldr	r2, [r7, #20]
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	4313      	orrs	r3, r2
 8006948:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	693a      	ldr	r2, [r7, #16]
 800694e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	697a      	ldr	r2, [r7, #20]
 8006954:	621a      	str	r2, [r3, #32]
}
 8006956:	bf00      	nop
 8006958:	371c      	adds	r7, #28
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr

08006962 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006962:	b480      	push	{r7}
 8006964:	b087      	sub	sp, #28
 8006966:	af00      	add	r7, sp, #0
 8006968:	60f8      	str	r0, [r7, #12]
 800696a:	60b9      	str	r1, [r7, #8]
 800696c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	6a1b      	ldr	r3, [r3, #32]
 8006972:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6a1b      	ldr	r3, [r3, #32]
 8006978:	f023 0210 	bic.w	r2, r3, #16
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	699b      	ldr	r3, [r3, #24]
 8006984:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800698c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	031b      	lsls	r3, r3, #12
 8006992:	693a      	ldr	r2, [r7, #16]
 8006994:	4313      	orrs	r3, r2
 8006996:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800699e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	011b      	lsls	r3, r3, #4
 80069a4:	697a      	ldr	r2, [r7, #20]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	693a      	ldr	r2, [r7, #16]
 80069ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	697a      	ldr	r2, [r7, #20]
 80069b4:	621a      	str	r2, [r3, #32]
}
 80069b6:	bf00      	nop
 80069b8:	371c      	adds	r7, #28
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr

080069c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069c2:	b480      	push	{r7}
 80069c4:	b085      	sub	sp, #20
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
 80069ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069da:	683a      	ldr	r2, [r7, #0]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	4313      	orrs	r3, r2
 80069e0:	f043 0307 	orr.w	r3, r3, #7
 80069e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	609a      	str	r2, [r3, #8]
}
 80069ec:	bf00      	nop
 80069ee:	3714      	adds	r7, #20
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b087      	sub	sp, #28
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	607a      	str	r2, [r7, #4]
 8006a04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006a12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	021a      	lsls	r2, r3, #8
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	431a      	orrs	r2, r3
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	697a      	ldr	r2, [r7, #20]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	697a      	ldr	r2, [r7, #20]
 8006a2a:	609a      	str	r2, [r3, #8]
}
 8006a2c:	bf00      	nop
 8006a2e:	371c      	adds	r7, #28
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b087      	sub	sp, #28
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	f003 031f 	and.w	r3, r3, #31
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6a1a      	ldr	r2, [r3, #32]
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	43db      	mvns	r3, r3
 8006a5a:	401a      	ands	r2, r3
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	6a1a      	ldr	r2, [r3, #32]
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	f003 031f 	and.w	r3, r3, #31
 8006a6a:	6879      	ldr	r1, [r7, #4]
 8006a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8006a70:	431a      	orrs	r2, r3
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	621a      	str	r2, [r3, #32]
}
 8006a76:	bf00      	nop
 8006a78:	371c      	adds	r7, #28
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr
	...

08006a84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b085      	sub	sp, #20
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d101      	bne.n	8006a9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a98:	2302      	movs	r3, #2
 8006a9a:	e050      	b.n	8006b3e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2202      	movs	r2, #2
 8006aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ac2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	68fa      	ldr	r2, [r7, #12]
 8006ad4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a1c      	ldr	r2, [pc, #112]	@ (8006b4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d018      	beq.n	8006b12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ae8:	d013      	beq.n	8006b12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a18      	ldr	r2, [pc, #96]	@ (8006b50 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d00e      	beq.n	8006b12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a16      	ldr	r2, [pc, #88]	@ (8006b54 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d009      	beq.n	8006b12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a15      	ldr	r2, [pc, #84]	@ (8006b58 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d004      	beq.n	8006b12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a13      	ldr	r2, [pc, #76]	@ (8006b5c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d10c      	bne.n	8006b2c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	68ba      	ldr	r2, [r7, #8]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	68ba      	ldr	r2, [r7, #8]
 8006b2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b3c:	2300      	movs	r3, #0
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3714      	adds	r7, #20
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr
 8006b4a:	bf00      	nop
 8006b4c:	40010000 	.word	0x40010000
 8006b50:	40000400 	.word	0x40000400
 8006b54:	40000800 	.word	0x40000800
 8006b58:	40000c00 	.word	0x40000c00
 8006b5c:	40014000 	.word	0x40014000

08006b60 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b085      	sub	sp, #20
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d101      	bne.n	8006b7c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006b78:	2302      	movs	r3, #2
 8006b7a:	e03d      	b.n	8006bf8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	695b      	ldr	r3, [r3, #20]
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	69db      	ldr	r3, [r3, #28]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	68fa      	ldr	r2, [r7, #12]
 8006bec:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006bf6:	2300      	movs	r3, #0
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3714      	adds	r7, #20
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c0c:	bf00      	nop
 8006c0e:	370c      	adds	r7, #12
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c20:	bf00      	nop
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <memset>:
 8006c2c:	4402      	add	r2, r0
 8006c2e:	4603      	mov	r3, r0
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d100      	bne.n	8006c36 <memset+0xa>
 8006c34:	4770      	bx	lr
 8006c36:	f803 1b01 	strb.w	r1, [r3], #1
 8006c3a:	e7f9      	b.n	8006c30 <memset+0x4>

08006c3c <__errno>:
 8006c3c:	4b01      	ldr	r3, [pc, #4]	@ (8006c44 <__errno+0x8>)
 8006c3e:	6818      	ldr	r0, [r3, #0]
 8006c40:	4770      	bx	lr
 8006c42:	bf00      	nop
 8006c44:	20000020 	.word	0x20000020

08006c48 <__libc_init_array>:
 8006c48:	b570      	push	{r4, r5, r6, lr}
 8006c4a:	4d0d      	ldr	r5, [pc, #52]	@ (8006c80 <__libc_init_array+0x38>)
 8006c4c:	4c0d      	ldr	r4, [pc, #52]	@ (8006c84 <__libc_init_array+0x3c>)
 8006c4e:	1b64      	subs	r4, r4, r5
 8006c50:	10a4      	asrs	r4, r4, #2
 8006c52:	2600      	movs	r6, #0
 8006c54:	42a6      	cmp	r6, r4
 8006c56:	d109      	bne.n	8006c6c <__libc_init_array+0x24>
 8006c58:	4d0b      	ldr	r5, [pc, #44]	@ (8006c88 <__libc_init_array+0x40>)
 8006c5a:	4c0c      	ldr	r4, [pc, #48]	@ (8006c8c <__libc_init_array+0x44>)
 8006c5c:	f000 fa98 	bl	8007190 <_init>
 8006c60:	1b64      	subs	r4, r4, r5
 8006c62:	10a4      	asrs	r4, r4, #2
 8006c64:	2600      	movs	r6, #0
 8006c66:	42a6      	cmp	r6, r4
 8006c68:	d105      	bne.n	8006c76 <__libc_init_array+0x2e>
 8006c6a:	bd70      	pop	{r4, r5, r6, pc}
 8006c6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c70:	4798      	blx	r3
 8006c72:	3601      	adds	r6, #1
 8006c74:	e7ee      	b.n	8006c54 <__libc_init_array+0xc>
 8006c76:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c7a:	4798      	blx	r3
 8006c7c:	3601      	adds	r6, #1
 8006c7e:	e7f2      	b.n	8006c66 <__libc_init_array+0x1e>
 8006c80:	08007210 	.word	0x08007210
 8006c84:	08007210 	.word	0x08007210
 8006c88:	08007210 	.word	0x08007210
 8006c8c:	08007214 	.word	0x08007214

08006c90 <sqrt>:
 8006c90:	b538      	push	{r3, r4, r5, lr}
 8006c92:	ed2d 8b02 	vpush	{d8}
 8006c96:	ec55 4b10 	vmov	r4, r5, d0
 8006c9a:	f000 f827 	bl	8006cec <__ieee754_sqrt>
 8006c9e:	4622      	mov	r2, r4
 8006ca0:	462b      	mov	r3, r5
 8006ca2:	4620      	mov	r0, r4
 8006ca4:	4629      	mov	r1, r5
 8006ca6:	eeb0 8a40 	vmov.f32	s16, s0
 8006caa:	eef0 8a60 	vmov.f32	s17, s1
 8006cae:	f7f9 fee9 	bl	8000a84 <__aeabi_dcmpun>
 8006cb2:	b990      	cbnz	r0, 8006cda <sqrt+0x4a>
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	4620      	mov	r0, r4
 8006cba:	4629      	mov	r1, r5
 8006cbc:	f7f9 feba 	bl	8000a34 <__aeabi_dcmplt>
 8006cc0:	b158      	cbz	r0, 8006cda <sqrt+0x4a>
 8006cc2:	f7ff ffbb 	bl	8006c3c <__errno>
 8006cc6:	2321      	movs	r3, #33	@ 0x21
 8006cc8:	6003      	str	r3, [r0, #0]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	2300      	movs	r3, #0
 8006cce:	4610      	mov	r0, r2
 8006cd0:	4619      	mov	r1, r3
 8006cd2:	f7f9 fd67 	bl	80007a4 <__aeabi_ddiv>
 8006cd6:	ec41 0b18 	vmov	d8, r0, r1
 8006cda:	eeb0 0a48 	vmov.f32	s0, s16
 8006cde:	eef0 0a68 	vmov.f32	s1, s17
 8006ce2:	ecbd 8b02 	vpop	{d8}
 8006ce6:	bd38      	pop	{r3, r4, r5, pc}

08006ce8 <atan2f>:
 8006ce8:	f000 b8d6 	b.w	8006e98 <__ieee754_atan2f>

08006cec <__ieee754_sqrt>:
 8006cec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cf0:	4a66      	ldr	r2, [pc, #408]	@ (8006e8c <__ieee754_sqrt+0x1a0>)
 8006cf2:	ec55 4b10 	vmov	r4, r5, d0
 8006cf6:	43aa      	bics	r2, r5
 8006cf8:	462b      	mov	r3, r5
 8006cfa:	4621      	mov	r1, r4
 8006cfc:	d110      	bne.n	8006d20 <__ieee754_sqrt+0x34>
 8006cfe:	4622      	mov	r2, r4
 8006d00:	4620      	mov	r0, r4
 8006d02:	4629      	mov	r1, r5
 8006d04:	f7f9 fc24 	bl	8000550 <__aeabi_dmul>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	460b      	mov	r3, r1
 8006d0c:	4620      	mov	r0, r4
 8006d0e:	4629      	mov	r1, r5
 8006d10:	f7f9 fa68 	bl	80001e4 <__adddf3>
 8006d14:	4604      	mov	r4, r0
 8006d16:	460d      	mov	r5, r1
 8006d18:	ec45 4b10 	vmov	d0, r4, r5
 8006d1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d20:	2d00      	cmp	r5, #0
 8006d22:	dc0e      	bgt.n	8006d42 <__ieee754_sqrt+0x56>
 8006d24:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8006d28:	4322      	orrs	r2, r4
 8006d2a:	d0f5      	beq.n	8006d18 <__ieee754_sqrt+0x2c>
 8006d2c:	b19d      	cbz	r5, 8006d56 <__ieee754_sqrt+0x6a>
 8006d2e:	4622      	mov	r2, r4
 8006d30:	4620      	mov	r0, r4
 8006d32:	4629      	mov	r1, r5
 8006d34:	f7f9 fa54 	bl	80001e0 <__aeabi_dsub>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	460b      	mov	r3, r1
 8006d3c:	f7f9 fd32 	bl	80007a4 <__aeabi_ddiv>
 8006d40:	e7e8      	b.n	8006d14 <__ieee754_sqrt+0x28>
 8006d42:	152a      	asrs	r2, r5, #20
 8006d44:	d115      	bne.n	8006d72 <__ieee754_sqrt+0x86>
 8006d46:	2000      	movs	r0, #0
 8006d48:	e009      	b.n	8006d5e <__ieee754_sqrt+0x72>
 8006d4a:	0acb      	lsrs	r3, r1, #11
 8006d4c:	3a15      	subs	r2, #21
 8006d4e:	0549      	lsls	r1, r1, #21
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d0fa      	beq.n	8006d4a <__ieee754_sqrt+0x5e>
 8006d54:	e7f7      	b.n	8006d46 <__ieee754_sqrt+0x5a>
 8006d56:	462a      	mov	r2, r5
 8006d58:	e7fa      	b.n	8006d50 <__ieee754_sqrt+0x64>
 8006d5a:	005b      	lsls	r3, r3, #1
 8006d5c:	3001      	adds	r0, #1
 8006d5e:	02dc      	lsls	r4, r3, #11
 8006d60:	d5fb      	bpl.n	8006d5a <__ieee754_sqrt+0x6e>
 8006d62:	1e44      	subs	r4, r0, #1
 8006d64:	1b12      	subs	r2, r2, r4
 8006d66:	f1c0 0420 	rsb	r4, r0, #32
 8006d6a:	fa21 f404 	lsr.w	r4, r1, r4
 8006d6e:	4323      	orrs	r3, r4
 8006d70:	4081      	lsls	r1, r0
 8006d72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d76:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8006d7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d7e:	07d2      	lsls	r2, r2, #31
 8006d80:	bf5c      	itt	pl
 8006d82:	005b      	lslpl	r3, r3, #1
 8006d84:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8006d88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006d8c:	bf58      	it	pl
 8006d8e:	0049      	lslpl	r1, r1, #1
 8006d90:	2600      	movs	r6, #0
 8006d92:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8006d96:	107f      	asrs	r7, r7, #1
 8006d98:	0049      	lsls	r1, r1, #1
 8006d9a:	2016      	movs	r0, #22
 8006d9c:	4632      	mov	r2, r6
 8006d9e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8006da2:	1915      	adds	r5, r2, r4
 8006da4:	429d      	cmp	r5, r3
 8006da6:	bfde      	ittt	le
 8006da8:	192a      	addle	r2, r5, r4
 8006daa:	1b5b      	suble	r3, r3, r5
 8006dac:	1936      	addle	r6, r6, r4
 8006dae:	0fcd      	lsrs	r5, r1, #31
 8006db0:	3801      	subs	r0, #1
 8006db2:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8006db6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006dba:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8006dbe:	d1f0      	bne.n	8006da2 <__ieee754_sqrt+0xb6>
 8006dc0:	4605      	mov	r5, r0
 8006dc2:	2420      	movs	r4, #32
 8006dc4:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	eb0c 0e00 	add.w	lr, ip, r0
 8006dce:	dc02      	bgt.n	8006dd6 <__ieee754_sqrt+0xea>
 8006dd0:	d113      	bne.n	8006dfa <__ieee754_sqrt+0x10e>
 8006dd2:	458e      	cmp	lr, r1
 8006dd4:	d811      	bhi.n	8006dfa <__ieee754_sqrt+0x10e>
 8006dd6:	f1be 0f00 	cmp.w	lr, #0
 8006dda:	eb0e 000c 	add.w	r0, lr, ip
 8006dde:	da3f      	bge.n	8006e60 <__ieee754_sqrt+0x174>
 8006de0:	2800      	cmp	r0, #0
 8006de2:	db3d      	blt.n	8006e60 <__ieee754_sqrt+0x174>
 8006de4:	f102 0801 	add.w	r8, r2, #1
 8006de8:	1a9b      	subs	r3, r3, r2
 8006dea:	458e      	cmp	lr, r1
 8006dec:	bf88      	it	hi
 8006dee:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8006df2:	eba1 010e 	sub.w	r1, r1, lr
 8006df6:	4465      	add	r5, ip
 8006df8:	4642      	mov	r2, r8
 8006dfa:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8006dfe:	3c01      	subs	r4, #1
 8006e00:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8006e04:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006e08:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8006e0c:	d1dc      	bne.n	8006dc8 <__ieee754_sqrt+0xdc>
 8006e0e:	4319      	orrs	r1, r3
 8006e10:	d01b      	beq.n	8006e4a <__ieee754_sqrt+0x15e>
 8006e12:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8006e90 <__ieee754_sqrt+0x1a4>
 8006e16:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8006e94 <__ieee754_sqrt+0x1a8>
 8006e1a:	e9da 0100 	ldrd	r0, r1, [sl]
 8006e1e:	e9db 2300 	ldrd	r2, r3, [fp]
 8006e22:	f7f9 f9dd 	bl	80001e0 <__aeabi_dsub>
 8006e26:	e9da 8900 	ldrd	r8, r9, [sl]
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	460b      	mov	r3, r1
 8006e2e:	4640      	mov	r0, r8
 8006e30:	4649      	mov	r1, r9
 8006e32:	f7f9 fe09 	bl	8000a48 <__aeabi_dcmple>
 8006e36:	b140      	cbz	r0, 8006e4a <__ieee754_sqrt+0x15e>
 8006e38:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006e3c:	e9da 0100 	ldrd	r0, r1, [sl]
 8006e40:	e9db 2300 	ldrd	r2, r3, [fp]
 8006e44:	d10e      	bne.n	8006e64 <__ieee754_sqrt+0x178>
 8006e46:	3601      	adds	r6, #1
 8006e48:	4625      	mov	r5, r4
 8006e4a:	1073      	asrs	r3, r6, #1
 8006e4c:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8006e50:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8006e54:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8006e58:	086b      	lsrs	r3, r5, #1
 8006e5a:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8006e5e:	e759      	b.n	8006d14 <__ieee754_sqrt+0x28>
 8006e60:	4690      	mov	r8, r2
 8006e62:	e7c1      	b.n	8006de8 <__ieee754_sqrt+0xfc>
 8006e64:	f7f9 f9be 	bl	80001e4 <__adddf3>
 8006e68:	e9da 8900 	ldrd	r8, r9, [sl]
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	460b      	mov	r3, r1
 8006e70:	4640      	mov	r0, r8
 8006e72:	4649      	mov	r1, r9
 8006e74:	f7f9 fdde 	bl	8000a34 <__aeabi_dcmplt>
 8006e78:	b120      	cbz	r0, 8006e84 <__ieee754_sqrt+0x198>
 8006e7a:	1cab      	adds	r3, r5, #2
 8006e7c:	bf08      	it	eq
 8006e7e:	3601      	addeq	r6, #1
 8006e80:	3502      	adds	r5, #2
 8006e82:	e7e2      	b.n	8006e4a <__ieee754_sqrt+0x15e>
 8006e84:	1c6b      	adds	r3, r5, #1
 8006e86:	f023 0501 	bic.w	r5, r3, #1
 8006e8a:	e7de      	b.n	8006e4a <__ieee754_sqrt+0x15e>
 8006e8c:	7ff00000 	.word	0x7ff00000
 8006e90:	080071c8 	.word	0x080071c8
 8006e94:	080071c0 	.word	0x080071c0

08006e98 <__ieee754_atan2f>:
 8006e98:	ee10 2a90 	vmov	r2, s1
 8006e9c:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8006ea0:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8006ea4:	b510      	push	{r4, lr}
 8006ea6:	eef0 7a40 	vmov.f32	s15, s0
 8006eaa:	d806      	bhi.n	8006eba <__ieee754_atan2f+0x22>
 8006eac:	ee10 0a10 	vmov	r0, s0
 8006eb0:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8006eb4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8006eb8:	d904      	bls.n	8006ec4 <__ieee754_atan2f+0x2c>
 8006eba:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8006ebe:	eeb0 0a67 	vmov.f32	s0, s15
 8006ec2:	bd10      	pop	{r4, pc}
 8006ec4:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8006ec8:	d103      	bne.n	8006ed2 <__ieee754_atan2f+0x3a>
 8006eca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ece:	f000 b883 	b.w	8006fd8 <atanf>
 8006ed2:	1794      	asrs	r4, r2, #30
 8006ed4:	f004 0402 	and.w	r4, r4, #2
 8006ed8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8006edc:	b943      	cbnz	r3, 8006ef0 <__ieee754_atan2f+0x58>
 8006ede:	2c02      	cmp	r4, #2
 8006ee0:	d05e      	beq.n	8006fa0 <__ieee754_atan2f+0x108>
 8006ee2:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8006fb4 <__ieee754_atan2f+0x11c>
 8006ee6:	2c03      	cmp	r4, #3
 8006ee8:	bf08      	it	eq
 8006eea:	eef0 7a47 	vmoveq.f32	s15, s14
 8006eee:	e7e6      	b.n	8006ebe <__ieee754_atan2f+0x26>
 8006ef0:	b941      	cbnz	r1, 8006f04 <__ieee754_atan2f+0x6c>
 8006ef2:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8006fb8 <__ieee754_atan2f+0x120>
 8006ef6:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8006fbc <__ieee754_atan2f+0x124>
 8006efa:	2800      	cmp	r0, #0
 8006efc:	bfa8      	it	ge
 8006efe:	eef0 7a47 	vmovge.f32	s15, s14
 8006f02:	e7dc      	b.n	8006ebe <__ieee754_atan2f+0x26>
 8006f04:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8006f08:	d110      	bne.n	8006f2c <__ieee754_atan2f+0x94>
 8006f0a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8006f0e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006f12:	d107      	bne.n	8006f24 <__ieee754_atan2f+0x8c>
 8006f14:	2c02      	cmp	r4, #2
 8006f16:	d846      	bhi.n	8006fa6 <__ieee754_atan2f+0x10e>
 8006f18:	4b29      	ldr	r3, [pc, #164]	@ (8006fc0 <__ieee754_atan2f+0x128>)
 8006f1a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006f1e:	edd3 7a00 	vldr	s15, [r3]
 8006f22:	e7cc      	b.n	8006ebe <__ieee754_atan2f+0x26>
 8006f24:	2c02      	cmp	r4, #2
 8006f26:	d841      	bhi.n	8006fac <__ieee754_atan2f+0x114>
 8006f28:	4b26      	ldr	r3, [pc, #152]	@ (8006fc4 <__ieee754_atan2f+0x12c>)
 8006f2a:	e7f6      	b.n	8006f1a <__ieee754_atan2f+0x82>
 8006f2c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8006f30:	d0df      	beq.n	8006ef2 <__ieee754_atan2f+0x5a>
 8006f32:	1a5b      	subs	r3, r3, r1
 8006f34:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8006f38:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8006f3c:	da1a      	bge.n	8006f74 <__ieee754_atan2f+0xdc>
 8006f3e:	2a00      	cmp	r2, #0
 8006f40:	da01      	bge.n	8006f46 <__ieee754_atan2f+0xae>
 8006f42:	313c      	adds	r1, #60	@ 0x3c
 8006f44:	db19      	blt.n	8006f7a <__ieee754_atan2f+0xe2>
 8006f46:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8006f4a:	f000 f919 	bl	8007180 <fabsf>
 8006f4e:	f000 f843 	bl	8006fd8 <atanf>
 8006f52:	eef0 7a40 	vmov.f32	s15, s0
 8006f56:	2c01      	cmp	r4, #1
 8006f58:	d012      	beq.n	8006f80 <__ieee754_atan2f+0xe8>
 8006f5a:	2c02      	cmp	r4, #2
 8006f5c:	d017      	beq.n	8006f8e <__ieee754_atan2f+0xf6>
 8006f5e:	2c00      	cmp	r4, #0
 8006f60:	d0ad      	beq.n	8006ebe <__ieee754_atan2f+0x26>
 8006f62:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8006fc8 <__ieee754_atan2f+0x130>
 8006f66:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006f6a:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8006fcc <__ieee754_atan2f+0x134>
 8006f6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006f72:	e7a4      	b.n	8006ebe <__ieee754_atan2f+0x26>
 8006f74:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8006fbc <__ieee754_atan2f+0x124>
 8006f78:	e7ed      	b.n	8006f56 <__ieee754_atan2f+0xbe>
 8006f7a:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8006fd0 <__ieee754_atan2f+0x138>
 8006f7e:	e7ea      	b.n	8006f56 <__ieee754_atan2f+0xbe>
 8006f80:	ee17 3a90 	vmov	r3, s15
 8006f84:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8006f88:	ee07 3a90 	vmov	s15, r3
 8006f8c:	e797      	b.n	8006ebe <__ieee754_atan2f+0x26>
 8006f8e:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8006fc8 <__ieee754_atan2f+0x130>
 8006f92:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006f96:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8006fcc <__ieee754_atan2f+0x134>
 8006f9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006f9e:	e78e      	b.n	8006ebe <__ieee754_atan2f+0x26>
 8006fa0:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8006fcc <__ieee754_atan2f+0x134>
 8006fa4:	e78b      	b.n	8006ebe <__ieee754_atan2f+0x26>
 8006fa6:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8006fd4 <__ieee754_atan2f+0x13c>
 8006faa:	e788      	b.n	8006ebe <__ieee754_atan2f+0x26>
 8006fac:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8006fd0 <__ieee754_atan2f+0x138>
 8006fb0:	e785      	b.n	8006ebe <__ieee754_atan2f+0x26>
 8006fb2:	bf00      	nop
 8006fb4:	c0490fdb 	.word	0xc0490fdb
 8006fb8:	bfc90fdb 	.word	0xbfc90fdb
 8006fbc:	3fc90fdb 	.word	0x3fc90fdb
 8006fc0:	080071dc 	.word	0x080071dc
 8006fc4:	080071d0 	.word	0x080071d0
 8006fc8:	33bbbd2e 	.word	0x33bbbd2e
 8006fcc:	40490fdb 	.word	0x40490fdb
 8006fd0:	00000000 	.word	0x00000000
 8006fd4:	3f490fdb 	.word	0x3f490fdb

08006fd8 <atanf>:
 8006fd8:	b538      	push	{r3, r4, r5, lr}
 8006fda:	ee10 5a10 	vmov	r5, s0
 8006fde:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8006fe2:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8006fe6:	eef0 7a40 	vmov.f32	s15, s0
 8006fea:	d310      	bcc.n	800700e <atanf+0x36>
 8006fec:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8006ff0:	d904      	bls.n	8006ffc <atanf+0x24>
 8006ff2:	ee70 7a00 	vadd.f32	s15, s0, s0
 8006ff6:	eeb0 0a67 	vmov.f32	s0, s15
 8006ffa:	bd38      	pop	{r3, r4, r5, pc}
 8006ffc:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8007134 <atanf+0x15c>
 8007000:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8007138 <atanf+0x160>
 8007004:	2d00      	cmp	r5, #0
 8007006:	bfc8      	it	gt
 8007008:	eef0 7a47 	vmovgt.f32	s15, s14
 800700c:	e7f3      	b.n	8006ff6 <atanf+0x1e>
 800700e:	4b4b      	ldr	r3, [pc, #300]	@ (800713c <atanf+0x164>)
 8007010:	429c      	cmp	r4, r3
 8007012:	d810      	bhi.n	8007036 <atanf+0x5e>
 8007014:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8007018:	d20a      	bcs.n	8007030 <atanf+0x58>
 800701a:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8007140 <atanf+0x168>
 800701e:	ee30 7a07 	vadd.f32	s14, s0, s14
 8007022:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007026:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800702a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800702e:	dce2      	bgt.n	8006ff6 <atanf+0x1e>
 8007030:	f04f 33ff 	mov.w	r3, #4294967295
 8007034:	e013      	b.n	800705e <atanf+0x86>
 8007036:	f000 f8a3 	bl	8007180 <fabsf>
 800703a:	4b42      	ldr	r3, [pc, #264]	@ (8007144 <atanf+0x16c>)
 800703c:	429c      	cmp	r4, r3
 800703e:	d84f      	bhi.n	80070e0 <atanf+0x108>
 8007040:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8007044:	429c      	cmp	r4, r3
 8007046:	d841      	bhi.n	80070cc <atanf+0xf4>
 8007048:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800704c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8007050:	eea0 7a27 	vfma.f32	s14, s0, s15
 8007054:	2300      	movs	r3, #0
 8007056:	ee30 0a27 	vadd.f32	s0, s0, s15
 800705a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800705e:	1c5a      	adds	r2, r3, #1
 8007060:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8007064:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8007148 <atanf+0x170>
 8007068:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800714c <atanf+0x174>
 800706c:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8007150 <atanf+0x178>
 8007070:	ee66 6a06 	vmul.f32	s13, s12, s12
 8007074:	eee6 5a87 	vfma.f32	s11, s13, s14
 8007078:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8007154 <atanf+0x17c>
 800707c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8007080:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8007158 <atanf+0x180>
 8007084:	eee7 5a26 	vfma.f32	s11, s14, s13
 8007088:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800715c <atanf+0x184>
 800708c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8007090:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8007160 <atanf+0x188>
 8007094:	eee7 5a26 	vfma.f32	s11, s14, s13
 8007098:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8007164 <atanf+0x18c>
 800709c:	eea6 5a87 	vfma.f32	s10, s13, s14
 80070a0:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8007168 <atanf+0x190>
 80070a4:	eea5 7a26 	vfma.f32	s14, s10, s13
 80070a8:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800716c <atanf+0x194>
 80070ac:	eea7 5a26 	vfma.f32	s10, s14, s13
 80070b0:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8007170 <atanf+0x198>
 80070b4:	eea5 7a26 	vfma.f32	s14, s10, s13
 80070b8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80070bc:	eea5 7a86 	vfma.f32	s14, s11, s12
 80070c0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80070c4:	d121      	bne.n	800710a <atanf+0x132>
 80070c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80070ca:	e794      	b.n	8006ff6 <atanf+0x1e>
 80070cc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80070d0:	ee30 7a67 	vsub.f32	s14, s0, s15
 80070d4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80070d8:	2301      	movs	r3, #1
 80070da:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80070de:	e7be      	b.n	800705e <atanf+0x86>
 80070e0:	4b24      	ldr	r3, [pc, #144]	@ (8007174 <atanf+0x19c>)
 80070e2:	429c      	cmp	r4, r3
 80070e4:	d80b      	bhi.n	80070fe <atanf+0x126>
 80070e6:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 80070ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80070ee:	eea0 7a27 	vfma.f32	s14, s0, s15
 80070f2:	2302      	movs	r3, #2
 80070f4:	ee70 6a67 	vsub.f32	s13, s0, s15
 80070f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070fc:	e7af      	b.n	800705e <atanf+0x86>
 80070fe:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8007102:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007106:	2303      	movs	r3, #3
 8007108:	e7a9      	b.n	800705e <atanf+0x86>
 800710a:	4a1b      	ldr	r2, [pc, #108]	@ (8007178 <atanf+0x1a0>)
 800710c:	491b      	ldr	r1, [pc, #108]	@ (800717c <atanf+0x1a4>)
 800710e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8007112:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8007116:	edd3 6a00 	vldr	s13, [r3]
 800711a:	ee37 7a66 	vsub.f32	s14, s14, s13
 800711e:	2d00      	cmp	r5, #0
 8007120:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007124:	edd2 7a00 	vldr	s15, [r2]
 8007128:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800712c:	bfb8      	it	lt
 800712e:	eef1 7a67 	vneglt.f32	s15, s15
 8007132:	e760      	b.n	8006ff6 <atanf+0x1e>
 8007134:	bfc90fdb 	.word	0xbfc90fdb
 8007138:	3fc90fdb 	.word	0x3fc90fdb
 800713c:	3edfffff 	.word	0x3edfffff
 8007140:	7149f2ca 	.word	0x7149f2ca
 8007144:	3f97ffff 	.word	0x3f97ffff
 8007148:	3c8569d7 	.word	0x3c8569d7
 800714c:	3d4bda59 	.word	0x3d4bda59
 8007150:	bd6ef16b 	.word	0xbd6ef16b
 8007154:	3d886b35 	.word	0x3d886b35
 8007158:	3dba2e6e 	.word	0x3dba2e6e
 800715c:	3e124925 	.word	0x3e124925
 8007160:	3eaaaaab 	.word	0x3eaaaaab
 8007164:	bd15a221 	.word	0xbd15a221
 8007168:	bd9d8795 	.word	0xbd9d8795
 800716c:	bde38e38 	.word	0xbde38e38
 8007170:	be4ccccd 	.word	0xbe4ccccd
 8007174:	401bffff 	.word	0x401bffff
 8007178:	080071f8 	.word	0x080071f8
 800717c:	080071e8 	.word	0x080071e8

08007180 <fabsf>:
 8007180:	ee10 3a10 	vmov	r3, s0
 8007184:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007188:	ee00 3a10 	vmov	s0, r3
 800718c:	4770      	bx	lr
	...

08007190 <_init>:
 8007190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007192:	bf00      	nop
 8007194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007196:	bc08      	pop	{r3}
 8007198:	469e      	mov	lr, r3
 800719a:	4770      	bx	lr

0800719c <_fini>:
 800719c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800719e:	bf00      	nop
 80071a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071a2:	bc08      	pop	{r3}
 80071a4:	469e      	mov	lr, r3
 80071a6:	4770      	bx	lr
